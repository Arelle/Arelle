/* Generated by Cython 0.25.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__arelle__lxbrl
#define __PYX_HAVE_API__arelle__lxbrl
#include "xercesc/framework/MemoryManager.hpp"
#include "xercesc/util/PlatformUtils.hpp"
#include "xercesc/util/Hashers.hpp"
#include "xercesc/util/BaseRefVectorOf.hpp"
#include "xercesc/util/RefArrayVectorOf.hpp"
#include "xercesc/util/RefVectorOf.hpp"
#include "xercesc/util/XMLEnumerator.hpp"
#include "xercesc/util/XMemory.hpp"
#include "xercesc/util/RefHash3KeysIdPool.hpp"
#include "xercesc/util/QName.hpp"
#include "xercesc/util/XMLString.hpp"
#include "xercesc/sax/InputSource.hpp"
#include "xercesc/sax/SAXException.hpp"
#include "xercesc/sax/AttributeList.hpp"
#include "xercesc/sax/Locator.hpp"
#include "xercesc/sax/DocumentHandler.hpp"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "xercesc/sax/EntityResolver.hpp"
#include "xercesc/sax/ErrorHandler.hpp"
#include "xercesc/framework/LocalFileInputSource.hpp"
#include "xercesc/framework/MemBufInputSource.hpp"
#include "xercesc/framework/XMLPScanToken.hpp"
#include "xercesc/framework/psvi/XSAnnotation.hpp"
#include "xercesc/framework/psvi/XSObject.hpp"
#include "xercesc/framework/psvi/XSComplexTypeDefinition.hpp"
#include "xercesc/framework/psvi/XSConstants.hpp"
#include "xercesc/framework/psvi/XSModelGroup.hpp"
#include "xercesc/framework/psvi/XSParticle.hpp"
#include "xercesc/framework/psvi/XSSimpleTypeDefinition.hpp"
#include "xercesc/framework/psvi/XSWildcard.hpp"
#include "xercesc/framework/psvi/XSTypeDefinition.hpp"
#include "xercesc/framework/psvi/XSAttributeDeclaration.hpp"
#include "xercesc/framework/psvi/XSAttributeGroupDefinition.hpp"
#include "xercesc/framework/psvi/XSAttributeUse.hpp"
#include "xercesc/framework/psvi/XSElementDeclaration.hpp"
#include "xercesc/framework/psvi/XSFacet.hpp"
#include "xercesc/framework/psvi/XSModelGroupDefinition.hpp"
#include "xercesc/framework/psvi/XSMultiValueFacet.hpp"
#include "xercesc/framework/psvi/XSNamedMap.hpp"
#include "xercesc/framework/psvi/XSNotationDeclaration.hpp"
#include "xercesc/framework/XMLElementDecl.hpp"
#include "xercesc/framework/XMLGrammarPool.hpp"
#include "xercesc/framework/XMLGrammarPoolImpl.hpp"
#include "xercesc/framework/psvi/XSModel.hpp"
#include "xercesc/framework/psvi/XSNamespaceItem.hpp"
#include "xercesc/framework/psvi/XSValue.hpp"
#include "xercesc/validators/common/Grammar.hpp"
#include "xercesc/validators/schema/SchemaGrammar.hpp"
#include "xercesc/validators/schema/SchemaElementDecl.hpp"
#include "xercesc/sax2/ContentHandler.hpp"
#include "xercesc/sax2/LexicalHandler.hpp"
#include "xercesc/sax2/Attributes.hpp"
#include "xercesc/sax2/SAX2XMLReader.hpp"
#include "xercesc/sax2/XMLReaderFactory.hpp"
#include "xercesc/sax2/DefaultHandler.hpp"
#include <string.h>
#include <string>
#include "xercesc/util/XMLUni.hpp"
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "utf8"
#define __Pyx_PyObject_FromString __Pyx_PyUnicode_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "arelle_cython/lxbrl/identifyXmlFile.pxi",
  "arelle_cython/lxbrl/utils.pxi",
  "arelle_cython/lxbrl/cntlr.pxi",
  "stringsource",
  "arelle_cython/arelle.lxbrl.pyx",
};

/* "xerces_framework_memory_manager.pxd":2
 * 
 * ctypedef size_t XMLSize_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "xercesc/framework/MemoryManager.hpp" namespace "xercesc":
 */
typedef size_t __pyx_t_5lxbrl_31xerces_framework_memory_manager_XMLSize_t;

/* "lxbrl/xerces_util.pxd":3
 * from xerces_framework_memory_manager cimport MemoryManager
 * 
 * ctypedef unsigned long long int uint64_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t  XMLFilePos
 * ctypedef uint64_t  XMLFileLoc
 */
typedef unsigned PY_LONG_LONG __pyx_t_5lxbrl_11xerces_util_uint64_t;

/* "lxbrl/xerces_util.pxd":4
 * 
 * ctypedef unsigned long long int uint64_t
 * ctypedef uint64_t  XMLFilePos             # <<<<<<<<<<<<<<
 * ctypedef uint64_t  XMLFileLoc
 * ctypedef unsigned short XMLCh
 */
typedef __pyx_t_5lxbrl_11xerces_util_uint64_t __pyx_t_5lxbrl_11xerces_util_XMLFilePos;

/* "lxbrl/xerces_util.pxd":5
 * ctypedef unsigned long long int uint64_t
 * ctypedef uint64_t  XMLFilePos
 * ctypedef uint64_t  XMLFileLoc             # <<<<<<<<<<<<<<
 * ctypedef unsigned short XMLCh
 * ctypedef unsigned char XMLByte
 */
typedef __pyx_t_5lxbrl_11xerces_util_uint64_t __pyx_t_5lxbrl_11xerces_util_XMLFileLoc;

/* "lxbrl/xerces_util.pxd":6
 * ctypedef uint64_t  XMLFilePos
 * ctypedef uint64_t  XMLFileLoc
 * ctypedef unsigned short XMLCh             # <<<<<<<<<<<<<<
 * ctypedef unsigned char XMLByte
 * ctypedef size_t XMLSize_t
 */
typedef unsigned short __pyx_t_5lxbrl_11xerces_util_XMLCh;

/* "lxbrl/xerces_util.pxd":7
 * ctypedef uint64_t  XMLFileLoc
 * ctypedef unsigned short XMLCh
 * ctypedef unsigned char XMLByte             # <<<<<<<<<<<<<<
 * ctypedef size_t XMLSize_t
 * from libcpp cimport bool
 */
typedef unsigned char __pyx_t_5lxbrl_11xerces_util_XMLByte;

/* "lxbrl/xerces_util.pxd":8
 * ctypedef unsigned short XMLCh
 * ctypedef unsigned char XMLByte
 * ctypedef size_t XMLSize_t             # <<<<<<<<<<<<<<
 * from libcpp cimport bool
 * 
 */
typedef size_t __pyx_t_5lxbrl_11xerces_util_XMLSize_t;

/*--- Type declarations ---*/
struct __pyx_obj_6arelle_5lxbrl_attrdict;
struct __pyx_obj_6arelle_5lxbrl_Cntlr;

/* "xerces_framework.pxd":7
 * from libcpp cimport bool
 * 
 * ctypedef RefVectorOf[XSAnnotation] XSAnnotationList             # <<<<<<<<<<<<<<
 * ctypedef RefVectorOf[XSAttributeUse] XSAttributeUseList
 * ctypedef RefVectorOf[XSFacet] XSFacetList
 */
typedef xercesc::RefVectorOf<xercesc::XSAnnotation>  __pyx_t_5lxbrl_16xerces_framework_XSAnnotationList;

/* "xerces_framework.pxd":8
 * 
 * ctypedef RefVectorOf[XSAnnotation] XSAnnotationList
 * ctypedef RefVectorOf[XSAttributeUse] XSAttributeUseList             # <<<<<<<<<<<<<<
 * ctypedef RefVectorOf[XSFacet] XSFacetList
 * ctypedef RefVectorOf[XSMultiValueFacet] XSMultiValueFacetList
 */
typedef xercesc::RefVectorOf<xercesc::XSAttributeUse>  __pyx_t_5lxbrl_16xerces_framework_XSAttributeUseList;

/* "xerces_framework.pxd":9
 * ctypedef RefVectorOf[XSAnnotation] XSAnnotationList
 * ctypedef RefVectorOf[XSAttributeUse] XSAttributeUseList
 * ctypedef RefVectorOf[XSFacet] XSFacetList             # <<<<<<<<<<<<<<
 * ctypedef RefVectorOf[XSMultiValueFacet] XSMultiValueFacetList
 * ctypedef RefVectorOf[XSNamespaceItem] XSNamespaceItemList
 */
typedef xercesc::RefVectorOf<xercesc::XSFacet>  __pyx_t_5lxbrl_16xerces_framework_XSFacetList;

/* "xerces_framework.pxd":10
 * ctypedef RefVectorOf[XSAttributeUse] XSAttributeUseList
 * ctypedef RefVectorOf[XSFacet] XSFacetList
 * ctypedef RefVectorOf[XSMultiValueFacet] XSMultiValueFacetList             # <<<<<<<<<<<<<<
 * ctypedef RefVectorOf[XSNamespaceItem] XSNamespaceItemList
 * ctypedef RefVectorOf[XSParticle] XSParticleList
 */
typedef xercesc::RefVectorOf<xercesc::XSMultiValueFacet>  __pyx_t_5lxbrl_16xerces_framework_XSMultiValueFacetList;

/* "xerces_framework.pxd":11
 * ctypedef RefVectorOf[XSFacet] XSFacetList
 * ctypedef RefVectorOf[XSMultiValueFacet] XSMultiValueFacetList
 * ctypedef RefVectorOf[XSNamespaceItem] XSNamespaceItemList             # <<<<<<<<<<<<<<
 * ctypedef RefVectorOf[XSParticle] XSParticleList
 * ctypedef RefVectorOf[XSSimpleTypeDefinition] XSSimpleTypeDefinitionList
 */
typedef xercesc::RefVectorOf<xercesc::XSNamespaceItem>  __pyx_t_5lxbrl_16xerces_framework_XSNamespaceItemList;

/* "xerces_framework.pxd":12
 * ctypedef RefVectorOf[XSMultiValueFacet] XSMultiValueFacetList
 * ctypedef RefVectorOf[XSNamespaceItem] XSNamespaceItemList
 * ctypedef RefVectorOf[XSParticle] XSParticleList             # <<<<<<<<<<<<<<
 * ctypedef RefVectorOf[XSSimpleTypeDefinition] XSSimpleTypeDefinitionList
 * ctypedef RefArrayVectorOf[XMLCh] StringList
 */
typedef xercesc::RefVectorOf<xercesc::XSParticle>  __pyx_t_5lxbrl_16xerces_framework_XSParticleList;

/* "xerces_framework.pxd":13
 * ctypedef RefVectorOf[XSNamespaceItem] XSNamespaceItemList
 * ctypedef RefVectorOf[XSParticle] XSParticleList
 * ctypedef RefVectorOf[XSSimpleTypeDefinition] XSSimpleTypeDefinitionList             # <<<<<<<<<<<<<<
 * ctypedef RefArrayVectorOf[XMLCh] StringList
 * 
 */
typedef xercesc::RefVectorOf<xercesc::XSSimpleTypeDefinition>  __pyx_t_5lxbrl_16xerces_framework_XSSimpleTypeDefinitionList;

/* "xerces_framework.pxd":14
 * ctypedef RefVectorOf[XSParticle] XSParticleList
 * ctypedef RefVectorOf[XSSimpleTypeDefinition] XSSimpleTypeDefinitionList
 * ctypedef RefArrayVectorOf[XMLCh] StringList             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "xercesc/framework/LocalFileInputSource.hpp" namespace "xercesc":
 */
typedef xercesc::RefArrayVectorOf<__pyx_t_5lxbrl_11xerces_util_XMLCh>  __pyx_t_5lxbrl_16xerces_framework_StringList;
struct __pyx_t_6arelle_5lxbrl_templateSAX2Handler;
struct __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler;
struct __pyx_t_6arelle_5lxbrl_templateSAX2Handler : public xercesc::ErrorHandler, public xercesc::LexicalHandler, public xercesc::ContentHandler {
  virtual void characters(__pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLSize_t const );
  virtual void endDocument(void);
  virtual void endElement(__pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *);
  virtual void ignorableWhitespace(__pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLSize_t const );
  virtual void processingInstruction(__pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *);
  virtual void setDocumentLocator(xercesc::Locator const *const );
  virtual void startDocument(void);
  virtual void startElement(__pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *, xercesc::Attributes const &);
  virtual void startPrefixMapping(__pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *);
  virtual void endPrefixMapping(__pyx_t_5lxbrl_11xerces_util_XMLCh const *);
  virtual void skippedEntity(__pyx_t_5lxbrl_11xerces_util_XMLCh const *);
  virtual void comment(__pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLSize_t const );
  virtual void endCDATA(void);
  virtual void endDTD(void);
  virtual void endEntity(__pyx_t_5lxbrl_11xerces_util_XMLCh const *);
  virtual void startCDATA(void);
  virtual void startDTD(__pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *);
  virtual void startEntity(__pyx_t_5lxbrl_11xerces_util_XMLCh const *);
  virtual void elementDecl(__pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *);
  virtual void logError(xercesc::SAXParseException const &, PyObject *);
  virtual void error(xercesc::SAXParseException const &);
  virtual void fatalError(xercesc::SAXParseException const &);
  virtual void warning(xercesc::SAXParseException const &);
  virtual void resetErrors(void);
  virtual ~__pyx_t_6arelle_5lxbrl_templateSAX2Handler() { }};
struct __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler : public __pyx_t_6arelle_5lxbrl_templateSAX2Handler {

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":13
 * #from lxbrl.utils cimport templateSAX2Handler
 * 
 * cdef cppclass _IdentificationSAX2Handler(templateSAX2Handler):             # <<<<<<<<<<<<<<
 *     unsigned int eltDepth
 *     XMLCh** eltQNames
 */
  unsigned int eltDepth;
  __pyx_t_5lxbrl_11xerces_util_XMLCh **eltQNames;
  void *pyIdentificationResultsPtr;
  bool isXbrl;
  bool isXsd;
  bool isHtml;
  bool isInline;
  bool isIdentified;
  bool hasIxNamespace;
  bool hasIx11Namespace;
   __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler(void *);
  virtual PyObject *close(void);
  virtual void endElement(__pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *);
  virtual void startElement(__pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *, xercesc::Attributes const &);
  virtual void startPrefixMapping(__pyx_t_5lxbrl_11xerces_util_XMLCh const *, __pyx_t_5lxbrl_11xerces_util_XMLCh const *);
  virtual void logError(xercesc::SAXParseException const &, PyObject *);
  virtual void error(xercesc::SAXParseException const &);
  virtual void fatalError(xercesc::SAXParseException const &);
  virtual void warning(xercesc::SAXParseException const &);
  virtual ~__pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler() { }};

/* "arelle_cython/lxbrl/utils.pxi":8
 * from libcpp.string cimport string
 * 
 * cdef class attrdict(dict):             # <<<<<<<<<<<<<<
 *     """ utility to simulate an object with named fields from the kwargs """
 *     cdef dict __dict__
 */
struct __pyx_obj_6arelle_5lxbrl_attrdict {
  PyDictObject __pyx_base;
  PyObject *__dict__;
};


/* "arelle_cython/lxbrl/cntlr.pxi":7
 * cdef bool _xerces_initialized = False, _xerces_terminated = False
 * 
 * cdef class Cntlr:             # <<<<<<<<<<<<<<
 *     cdef XMLGrammarPool* _xerces_grammar_pool
 * 
 */
struct __pyx_obj_6arelle_5lxbrl_Cntlr {
  PyObject_HEAD
  xercesc::XMLGrammarPool *_xerces_grammar_pool;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'lxbrl.xerces_framework_memory_manager' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'lxbrl.xerces_util' */

/* Module declarations from 'lxbrl.xerces_sax' */

/* Module declarations from 'lxbrl.xerces_framework' */

/* Module declarations from 'lxbrl.xerces_validators' */

/* Module declarations from 'lxbrl.xerces_sax2' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'lxbrl.xerces_uni' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'arelle.lxbrl' */
static PyTypeObject *__pyx_ptype_6arelle_5lxbrl_attrdict = 0;
static PyTypeObject *__pyx_ptype_6arelle_5lxbrl_Cntlr = 0;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_nsXsd;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_nsXbrli;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_nsLink;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_nsXlink;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_nsXhtml;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_nsIxbrl;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_nsIxbrl11;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_nsVer;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnXbrl;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnLinkbase;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnSchema;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnXhtml;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnHtml;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnLinkbaseRef;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnSchemaRef;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnHref;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnReport;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnRss;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnTestcases;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnDocumentation;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnTestSuite;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnTestcase;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnTestSet;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnRegistry;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnPtvl;
static __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_6arelle_5lxbrl_lnFacts;
static bool __pyx_v_6arelle_5lxbrl__xerces_initialized;
static bool __pyx_v_6arelle_5lxbrl__xerces_terminated;
static PyObject *__pyx_f_6arelle_5lxbrl_initialize_constants(void); /*proto*/
static xercesc::InputSource *__pyx_f_6arelle_5lxbrl_fileDescInputSource(PyObject *); /*proto*/
static PyObject *__pyx_f_6arelle_5lxbrl_getAttrValue(xercesc::Attributes const &, __pyx_t_5lxbrl_11xerces_util_XMLCh *, __pyx_t_5lxbrl_11xerces_util_XMLCh *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "arelle.lxbrl"
int __pyx_module_is_main_arelle__lxbrl = 0;

/* Implementation of 'arelle.lxbrl' */
static PyObject *__pyx_builtin_range;
static const char __pyx_k_end[] = "end";
static const char __pyx_k_rss[] = "rss";
static const char __pyx_k_attr[] = "attr {}";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_bytes[] = "bytes";
static const char __pyx_k_colno[] = "colno";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_fatal[] = "fatal";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_start[] = "start {} {}";
static const char __pyx_k_token[] = "token";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_xhtml[] = "xhtml";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_inpSrc[] = "inpSrc";
static const char __pyx_k_lineno[] = "lineno";
static const char __pyx_k_parser[] = "parser";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_schema[] = "schema";
static const char __pyx_k_element[] = "element";
static const char __pyx_k_message[] = "message";
static const char __pyx_k_pyIdRes[] = "pyIdRes {}";
static const char __pyx_k_results[] = "results {} ";
static const char __pyx_k_attr_val[] = "attr val {} {}";
static const char __pyx_k_filepath[] = "filepath";
static const char __pyx_k_instance[] = "instance";
static const char __pyx_k_linkbase[] = "linkbase";
static const char __pyx_k_testcase[] = "testcase";
static const char __pyx_k_attribute[] = "attribute {} = {}";
static const char __pyx_k_attr_val_2[] = "attr val {}";
static const char __pyx_k_pyFileDesc[] = "pyFileDesc";
static const char __pyx_k_schemaRefs[] = "schemaRefs";
static const char __pyx_k_unknown_XML[] = "unknown XML";
static const char __pyx_k_arelle_lxbrl[] = "arelle.lxbrl";
static const char __pyx_k_attr_is_null[] = "attr is null";
static const char __pyx_k_linkbaseRefs[] = "linkbaseRefs";
static const char __pyx_k_xerces_closed[] = "xerces closed";
static const char __pyx_k_identifyXmlFile[] = "identifyXmlFile";
static const char __pyx_k_identify_trace1[] = "identify trace1";
static const char __pyx_k_testcases_index[] = "testcases index";
static const char __pyx_k_attr_is_not_null[] = "attr is not null";
static const char __pyx_k_nonDtsSchemaRefs[] = "nonDtsSchemaRefs";
static const char __pyx_k_versioning_report[] = "versioning report";
static const char __pyx_k_inline_XBRL_instance[] = "inline XBRL instance";
static const char __pyx_k_pyIdentificationResults[] = "pyIdentificationResults";
static const char __pyx_k_identificationSAX2Handler[] = "identificationSAX2Handler";
static const char __pyx_k_pyIdentificationResultsPtr[] = "pyIdentificationResultsPtr";
static const char __pyx_k_xerces_already_initialized[] = "xerces already initialized";
static const char __pyx_k_identify_trace2_nsInst_lnXbrl[] = "identify trace2 nsInst {} lnXbrl {}";
static const char __pyx_k_Users_hermf_Documents_mvsl_proj[] = "/Users/hermf/Documents/mvsl/projects/Arelle/ArelleProject/src-cython/arelle_cython/lxbrl/identifyXmlFile.pxi";
static const char __pyx_k_B4_handler_isXbrl_isInline_isIde[] = "B4 handler isXbrl {} isInline {} isIdentified {}";
static const char __pyx_k_handler_isXbrl_isInline_isIdenti[] = "handler isXbrl {} isInline {} isIdentified {}";
static const char __pyx_k_http_www_xbrl_org_2008_inlineXBR[] = "http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd";
static const char __pyx_k_http_www_xbrl_org_2013_inlineXBR[] = "http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd";
static const char __pyx_k_xerces_terminated_or_not_started[] = "xerces terminated or not started";
static const char __pyx_k_xerces_termination_but_not_initi[] = "xerces termination but not initialized";
static PyObject *__pyx_kp_s_B4_handler_isXbrl_isInline_isIde;
static PyObject *__pyx_kp_s_Users_hermf_Documents_mvsl_proj;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arelle_lxbrl;
static PyObject *__pyx_kp_s_attr;
static PyObject *__pyx_kp_s_attr_is_not_null;
static PyObject *__pyx_kp_s_attr_is_null;
static PyObject *__pyx_kp_s_attr_val;
static PyObject *__pyx_kp_s_attr_val_2;
static PyObject *__pyx_kp_s_attribute;
static PyObject *__pyx_n_s_bytes;
static PyObject *__pyx_n_s_colno;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_element;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_u_error;
static PyObject *__pyx_n_s_errors;
static PyObject *__pyx_n_u_fatal;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filepath;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_kp_s_handler_isXbrl_isInline_isIdenti;
static PyObject *__pyx_kp_s_http_www_xbrl_org_2008_inlineXBR;
static PyObject *__pyx_kp_s_http_www_xbrl_org_2013_inlineXBR;
static PyObject *__pyx_n_s_identificationSAX2Handler;
static PyObject *__pyx_n_s_identifyXmlFile;
static PyObject *__pyx_kp_s_identify_trace1;
static PyObject *__pyx_kp_s_identify_trace2_nsInst_lnXbrl;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_kp_u_inline_XBRL_instance;
static PyObject *__pyx_n_s_inpSrc;
static PyObject *__pyx_n_u_instance;
static PyObject *__pyx_n_s_level;
static PyObject *__pyx_n_s_lineno;
static PyObject *__pyx_n_u_linkbase;
static PyObject *__pyx_n_s_linkbaseRefs;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_message;
static PyObject *__pyx_n_s_nonDtsSchemaRefs;
static PyObject *__pyx_n_s_parser;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyFileDesc;
static PyObject *__pyx_kp_s_pyIdRes;
static PyObject *__pyx_n_s_pyIdentificationResults;
static PyObject *__pyx_n_s_pyIdentificationResultsPtr;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_kp_s_results;
static PyObject *__pyx_n_u_rss;
static PyObject *__pyx_n_u_schema;
static PyObject *__pyx_n_s_schemaRefs;
static PyObject *__pyx_kp_s_start;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_u_testcase;
static PyObject *__pyx_kp_u_testcases_index;
static PyObject *__pyx_n_s_token;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_kp_u_unknown_XML;
static PyObject *__pyx_kp_s_utf_8;
static PyObject *__pyx_kp_u_versioning_report;
static PyObject *__pyx_kp_s_xerces_already_initialized;
static PyObject *__pyx_kp_s_xerces_closed;
static PyObject *__pyx_kp_s_xerces_terminated_or_not_started;
static PyObject *__pyx_kp_s_xerces_termination_but_not_initi;
static PyObject *__pyx_n_u_xhtml;
static int __pyx_pf_6arelle_5lxbrl_8attrdict___init__(struct __pyx_obj_6arelle_5lxbrl_attrdict *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static int __pyx_pf_6arelle_5lxbrl_5Cntlr___init__(struct __pyx_obj_6arelle_5lxbrl_Cntlr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_5lxbrl_5Cntlr_2close(struct __pyx_obj_6arelle_5lxbrl_Cntlr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_5lxbrl_5Cntlr_4xerces_initialized(CYTHON_UNUSED struct __pyx_obj_6arelle_5lxbrl_Cntlr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_5lxbrl_5Cntlr_6xerces_terminated(CYTHON_UNUSED struct __pyx_obj_6arelle_5lxbrl_Cntlr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_5lxbrl_identifyXmlFile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pyFileDesc); /* proto */
static PyObject *__pyx_tp_new_6arelle_5lxbrl_attrdict(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6arelle_5lxbrl_Cntlr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_codeobj__6;

/* "arelle_cython/lxbrl/consts.pxi":35
 * 
 * 
 * cdef initialize_constants():             # <<<<<<<<<<<<<<
 *     global nsXsd, nsXbrli, nsLink, nsXlink, nsXhtml, nsIxbrl, nsIxbrl11, nsVer
 *     nsXsd = transcode("http://www.w3.org/2001/XMLSchema")
 */

static PyObject *__pyx_f_6arelle_5lxbrl_initialize_constants(void) {
  CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_nsRegistry;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize_constants", 0);

  /* "arelle_cython/lxbrl/consts.pxi":37
 * cdef initialize_constants():
 *     global nsXsd, nsXbrli, nsLink, nsXlink, nsXhtml, nsIxbrl, nsIxbrl11, nsVer
 *     nsXsd = transcode("http://www.w3.org/2001/XMLSchema")             # <<<<<<<<<<<<<<
 *     nsXbrli = transcode("http://www.xbrl.org/2003/instance")
 *     nsLink = transcode("http://www.xbrl.org/2003/linkbase")
 */
  __pyx_v_6arelle_5lxbrl_nsXsd = xercesc::XMLString::transcode(((char const *)"http://www.w3.org/2001/XMLSchema"));

  /* "arelle_cython/lxbrl/consts.pxi":38
 *     global nsXsd, nsXbrli, nsLink, nsXlink, nsXhtml, nsIxbrl, nsIxbrl11, nsVer
 *     nsXsd = transcode("http://www.w3.org/2001/XMLSchema")
 *     nsXbrli = transcode("http://www.xbrl.org/2003/instance")             # <<<<<<<<<<<<<<
 *     nsLink = transcode("http://www.xbrl.org/2003/linkbase")
 *     nsXlink = transcode("http://www.w3.org/1999/xlink")
 */
  __pyx_v_6arelle_5lxbrl_nsXbrli = xercesc::XMLString::transcode(((char const *)"http://www.xbrl.org/2003/instance"));

  /* "arelle_cython/lxbrl/consts.pxi":39
 *     nsXsd = transcode("http://www.w3.org/2001/XMLSchema")
 *     nsXbrli = transcode("http://www.xbrl.org/2003/instance")
 *     nsLink = transcode("http://www.xbrl.org/2003/linkbase")             # <<<<<<<<<<<<<<
 *     nsXlink = transcode("http://www.w3.org/1999/xlink")
 *     nsXhtml = transcode("http://www.w3.org/1999/xhtml")
 */
  __pyx_v_6arelle_5lxbrl_nsLink = xercesc::XMLString::transcode(((char const *)"http://www.xbrl.org/2003/linkbase"));

  /* "arelle_cython/lxbrl/consts.pxi":40
 *     nsXbrli = transcode("http://www.xbrl.org/2003/instance")
 *     nsLink = transcode("http://www.xbrl.org/2003/linkbase")
 *     nsXlink = transcode("http://www.w3.org/1999/xlink")             # <<<<<<<<<<<<<<
 *     nsXhtml = transcode("http://www.w3.org/1999/xhtml")
 *     nsIxbrl = transcode("http://www.xbrl.org/2008/inlineXBRL")
 */
  __pyx_v_6arelle_5lxbrl_nsXlink = xercesc::XMLString::transcode(((char const *)"http://www.w3.org/1999/xlink"));

  /* "arelle_cython/lxbrl/consts.pxi":41
 *     nsLink = transcode("http://www.xbrl.org/2003/linkbase")
 *     nsXlink = transcode("http://www.w3.org/1999/xlink")
 *     nsXhtml = transcode("http://www.w3.org/1999/xhtml")             # <<<<<<<<<<<<<<
 *     nsIxbrl = transcode("http://www.xbrl.org/2008/inlineXBRL")
 *     nsIxbrl11 = transcode("http://www.xbrl.org/2013/inlineXBRL")
 */
  __pyx_v_6arelle_5lxbrl_nsXhtml = xercesc::XMLString::transcode(((char const *)"http://www.w3.org/1999/xhtml"));

  /* "arelle_cython/lxbrl/consts.pxi":42
 *     nsXlink = transcode("http://www.w3.org/1999/xlink")
 *     nsXhtml = transcode("http://www.w3.org/1999/xhtml")
 *     nsIxbrl = transcode("http://www.xbrl.org/2008/inlineXBRL")             # <<<<<<<<<<<<<<
 *     nsIxbrl11 = transcode("http://www.xbrl.org/2013/inlineXBRL")
 *     nsVer = transcode("http://xbrl.org/2013/versioning-base")
 */
  __pyx_v_6arelle_5lxbrl_nsIxbrl = xercesc::XMLString::transcode(((char const *)"http://www.xbrl.org/2008/inlineXBRL"));

  /* "arelle_cython/lxbrl/consts.pxi":43
 *     nsXhtml = transcode("http://www.w3.org/1999/xhtml")
 *     nsIxbrl = transcode("http://www.xbrl.org/2008/inlineXBRL")
 *     nsIxbrl11 = transcode("http://www.xbrl.org/2013/inlineXBRL")             # <<<<<<<<<<<<<<
 *     nsVer = transcode("http://xbrl.org/2013/versioning-base")
 *     nsRegistry = transcode("http://xbrl.org/2008/registry")
 */
  __pyx_v_6arelle_5lxbrl_nsIxbrl11 = xercesc::XMLString::transcode(((char const *)"http://www.xbrl.org/2013/inlineXBRL"));

  /* "arelle_cython/lxbrl/consts.pxi":44
 *     nsIxbrl = transcode("http://www.xbrl.org/2008/inlineXBRL")
 *     nsIxbrl11 = transcode("http://www.xbrl.org/2013/inlineXBRL")
 *     nsVer = transcode("http://xbrl.org/2013/versioning-base")             # <<<<<<<<<<<<<<
 *     nsRegistry = transcode("http://xbrl.org/2008/registry")
 * 
 */
  __pyx_v_6arelle_5lxbrl_nsVer = xercesc::XMLString::transcode(((char const *)"http://xbrl.org/2013/versioning-base"));

  /* "arelle_cython/lxbrl/consts.pxi":45
 *     nsIxbrl11 = transcode("http://www.xbrl.org/2013/inlineXBRL")
 *     nsVer = transcode("http://xbrl.org/2013/versioning-base")
 *     nsRegistry = transcode("http://xbrl.org/2008/registry")             # <<<<<<<<<<<<<<
 * 
 *     global lnXbrl, lnLinkbase, lnSchema, lnXhtml, lnHtml, lnLinkbaseRef, lnSchemaRef, lnHref, lnReport, lnRss, \
 */
  __pyx_v_nsRegistry = xercesc::XMLString::transcode(((char const *)"http://xbrl.org/2008/registry"));

  /* "arelle_cython/lxbrl/consts.pxi":49
 *     global lnXbrl, lnLinkbase, lnSchema, lnXhtml, lnHtml, lnLinkbaseRef, lnSchemaRef, lnHref, lnReport, lnRss, \
 *             lnTestcases, lnDocumentation, lnTestSuite, lnTestcase, lnTestSet, lnRegistry, lnPtvl, lnFacts
 *     lnXbrl = transcode("xbrl")             # <<<<<<<<<<<<<<
 *     lnLinkbase = transcode("linkbase")
 *     lnSchema = transcode("schema")
 */
  __pyx_v_6arelle_5lxbrl_lnXbrl = xercesc::XMLString::transcode(((char const *)"xbrl"));

  /* "arelle_cython/lxbrl/consts.pxi":50
 *             lnTestcases, lnDocumentation, lnTestSuite, lnTestcase, lnTestSet, lnRegistry, lnPtvl, lnFacts
 *     lnXbrl = transcode("xbrl")
 *     lnLinkbase = transcode("linkbase")             # <<<<<<<<<<<<<<
 *     lnSchema = transcode("schema")
 *     lnXhtml = transcode("xhtml")
 */
  __pyx_v_6arelle_5lxbrl_lnLinkbase = xercesc::XMLString::transcode(((char const *)"linkbase"));

  /* "arelle_cython/lxbrl/consts.pxi":51
 *     lnXbrl = transcode("xbrl")
 *     lnLinkbase = transcode("linkbase")
 *     lnSchema = transcode("schema")             # <<<<<<<<<<<<<<
 *     lnXhtml = transcode("xhtml")
 *     lnHtml = transcode("html")
 */
  __pyx_v_6arelle_5lxbrl_lnSchema = xercesc::XMLString::transcode(((char const *)"schema"));

  /* "arelle_cython/lxbrl/consts.pxi":52
 *     lnLinkbase = transcode("linkbase")
 *     lnSchema = transcode("schema")
 *     lnXhtml = transcode("xhtml")             # <<<<<<<<<<<<<<
 *     lnHtml = transcode("html")
 *     lnLinkbaseRef = transcode("linkbaseRef")
 */
  __pyx_v_6arelle_5lxbrl_lnXhtml = xercesc::XMLString::transcode(((char const *)"xhtml"));

  /* "arelle_cython/lxbrl/consts.pxi":53
 *     lnSchema = transcode("schema")
 *     lnXhtml = transcode("xhtml")
 *     lnHtml = transcode("html")             # <<<<<<<<<<<<<<
 *     lnLinkbaseRef = transcode("linkbaseRef")
 *     lnSchemaRef = transcode("schemaRef")
 */
  __pyx_v_6arelle_5lxbrl_lnHtml = xercesc::XMLString::transcode(((char const *)"html"));

  /* "arelle_cython/lxbrl/consts.pxi":54
 *     lnXhtml = transcode("xhtml")
 *     lnHtml = transcode("html")
 *     lnLinkbaseRef = transcode("linkbaseRef")             # <<<<<<<<<<<<<<
 *     lnSchemaRef = transcode("schemaRef")
 *     lnHref = transcode("href")
 */
  __pyx_v_6arelle_5lxbrl_lnLinkbaseRef = xercesc::XMLString::transcode(((char const *)"linkbaseRef"));

  /* "arelle_cython/lxbrl/consts.pxi":55
 *     lnHtml = transcode("html")
 *     lnLinkbaseRef = transcode("linkbaseRef")
 *     lnSchemaRef = transcode("schemaRef")             # <<<<<<<<<<<<<<
 *     lnHref = transcode("href")
 *     lnReport = transcode("report")
 */
  __pyx_v_6arelle_5lxbrl_lnSchemaRef = xercesc::XMLString::transcode(((char const *)"schemaRef"));

  /* "arelle_cython/lxbrl/consts.pxi":56
 *     lnLinkbaseRef = transcode("linkbaseRef")
 *     lnSchemaRef = transcode("schemaRef")
 *     lnHref = transcode("href")             # <<<<<<<<<<<<<<
 *     lnReport = transcode("report")
 *     lnRss = transcode("rss")
 */
  __pyx_v_6arelle_5lxbrl_lnHref = xercesc::XMLString::transcode(((char const *)"href"));

  /* "arelle_cython/lxbrl/consts.pxi":57
 *     lnSchemaRef = transcode("schemaRef")
 *     lnHref = transcode("href")
 *     lnReport = transcode("report")             # <<<<<<<<<<<<<<
 *     lnRss = transcode("rss")
 *     lnTestcases = transcode("testcases")
 */
  __pyx_v_6arelle_5lxbrl_lnReport = xercesc::XMLString::transcode(((char const *)"report"));

  /* "arelle_cython/lxbrl/consts.pxi":58
 *     lnHref = transcode("href")
 *     lnReport = transcode("report")
 *     lnRss = transcode("rss")             # <<<<<<<<<<<<<<
 *     lnTestcases = transcode("testcases")
 *     lnDocumentation = transcode("documentation")
 */
  __pyx_v_6arelle_5lxbrl_lnRss = xercesc::XMLString::transcode(((char const *)"rss"));

  /* "arelle_cython/lxbrl/consts.pxi":59
 *     lnReport = transcode("report")
 *     lnRss = transcode("rss")
 *     lnTestcases = transcode("testcases")             # <<<<<<<<<<<<<<
 *     lnDocumentation = transcode("documentation")
 *     lnTestSuite = transcode("testSuite")
 */
  __pyx_v_6arelle_5lxbrl_lnTestcases = xercesc::XMLString::transcode(((char const *)"testcases"));

  /* "arelle_cython/lxbrl/consts.pxi":60
 *     lnRss = transcode("rss")
 *     lnTestcases = transcode("testcases")
 *     lnDocumentation = transcode("documentation")             # <<<<<<<<<<<<<<
 *     lnTestSuite = transcode("testSuite")
 *     lnTestcase = transcode("testcase")
 */
  __pyx_v_6arelle_5lxbrl_lnDocumentation = xercesc::XMLString::transcode(((char const *)"documentation"));

  /* "arelle_cython/lxbrl/consts.pxi":61
 *     lnTestcases = transcode("testcases")
 *     lnDocumentation = transcode("documentation")
 *     lnTestSuite = transcode("testSuite")             # <<<<<<<<<<<<<<
 *     lnTestcase = transcode("testcase")
 *     lnTestSet = transcode("testSet")
 */
  __pyx_v_6arelle_5lxbrl_lnTestSuite = xercesc::XMLString::transcode(((char const *)"testSuite"));

  /* "arelle_cython/lxbrl/consts.pxi":62
 *     lnDocumentation = transcode("documentation")
 *     lnTestSuite = transcode("testSuite")
 *     lnTestcase = transcode("testcase")             # <<<<<<<<<<<<<<
 *     lnTestSet = transcode("testSet")
 *     lnRegistry = transcode("registry")
 */
  __pyx_v_6arelle_5lxbrl_lnTestcase = xercesc::XMLString::transcode(((char const *)"testcase"));

  /* "arelle_cython/lxbrl/consts.pxi":63
 *     lnTestSuite = transcode("testSuite")
 *     lnTestcase = transcode("testcase")
 *     lnTestSet = transcode("testSet")             # <<<<<<<<<<<<<<
 *     lnRegistry = transcode("registry")
 *     lnPtvl = transcode("ptvl")
 */
  __pyx_v_6arelle_5lxbrl_lnTestSet = xercesc::XMLString::transcode(((char const *)"testSet"));

  /* "arelle_cython/lxbrl/consts.pxi":64
 *     lnTestcase = transcode("testcase")
 *     lnTestSet = transcode("testSet")
 *     lnRegistry = transcode("registry")             # <<<<<<<<<<<<<<
 *     lnPtvl = transcode("ptvl")
 *     lnFacts = transcode("facts")
 */
  __pyx_v_6arelle_5lxbrl_lnRegistry = xercesc::XMLString::transcode(((char const *)"registry"));

  /* "arelle_cython/lxbrl/consts.pxi":65
 *     lnTestSet = transcode("testSet")
 *     lnRegistry = transcode("registry")
 *     lnPtvl = transcode("ptvl")             # <<<<<<<<<<<<<<
 *     lnFacts = transcode("facts")
 */
  __pyx_v_6arelle_5lxbrl_lnPtvl = xercesc::XMLString::transcode(((char const *)"ptvl"));

  /* "arelle_cython/lxbrl/consts.pxi":66
 *     lnRegistry = transcode("registry")
 *     lnPtvl = transcode("ptvl")
 *     lnFacts = transcode("facts")             # <<<<<<<<<<<<<<
 */
  __pyx_v_6arelle_5lxbrl_lnFacts = xercesc::XMLString::transcode(((char const *)"facts"));

  /* "arelle_cython/lxbrl/consts.pxi":35
 * 
 * 
 * cdef initialize_constants():             # <<<<<<<<<<<<<<
 *     global nsXsd, nsXbrli, nsLink, nsXlink, nsXhtml, nsIxbrl, nsIxbrl11, nsVer
 *     nsXsd = transcode("http://www.w3.org/2001/XMLSchema")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/lxbrl/utils.pxi":11
 *     """ utility to simulate an object with named fields from the kwargs """
 *     cdef dict __dict__
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         dict.__init__(self, *args, **kwargs)
 *         self.__dict__ = self
 */

/* Python wrapper */
static int __pyx_pw_6arelle_5lxbrl_8attrdict_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6arelle_5lxbrl_8attrdict_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6arelle_5lxbrl_8attrdict___init__(((struct __pyx_obj_6arelle_5lxbrl_attrdict *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_5lxbrl_8attrdict___init__(struct __pyx_obj_6arelle_5lxbrl_attrdict *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "arelle_cython/lxbrl/utils.pxi":12
 *     cdef dict __dict__
 *     def __init__(self, *args, **kwargs):
 *         dict.__init__(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 *         self.__dict__ = self
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/lxbrl/utils.pxi":13
 *     def __init__(self, *args, **kwargs):
 *         dict.__init__(self, *args, **kwargs)
 *         self.__dict__ = self             # <<<<<<<<<<<<<<
 * 
 * cdef InputSource* fileDescInputSource( pyFileDesc ):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_self->__dict__);
  __Pyx_DECREF(__pyx_v_self->__dict__);
  __pyx_v_self->__dict__ = ((PyObject*)__pyx_v_self);

  /* "arelle_cython/lxbrl/utils.pxi":11
 *     """ utility to simulate an object with named fields from the kwargs """
 *     cdef dict __dict__
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         dict.__init__(self, *args, **kwargs)
 *         self.__dict__ = self
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("arelle.lxbrl.attrdict.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/lxbrl/utils.pxi":15
 *         self.__dict__ = self
 * 
 * cdef InputSource* fileDescInputSource( pyFileDesc ):             # <<<<<<<<<<<<<<
 *     cdef const char* c_s
 *     cdef string std_s
 */

static xercesc::InputSource *__pyx_f_6arelle_5lxbrl_fileDescInputSource(PyObject *__pyx_v_pyFileDesc) {
  char const *__pyx_v_c_s;
  std::string __pyx_v_std_s;
  __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_xmlChFile;
  xercesc::LocalFileInputSource *__pyx_v_fileInpSrc;
  xercesc::MemBufInputSource *__pyx_v_memInpSrc;
  PyObject *__pyx_v_byte_s = NULL;
  xercesc::InputSource *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  char const *__pyx_t_5;
  std::string __pyx_t_6;
  __Pyx_RefNannySetupContext("fileDescInputSource", 0);

  /* "arelle_cython/lxbrl/utils.pxi":21
 *     cdef LocalFileInputSource* fileInpSrc
 *     cdef MemBufInputSource* memInpSrc
 *     if "filepath" in pyFileDesc:             # <<<<<<<<<<<<<<
 *         byte_s = pyFileDesc["filepath"].encode("utf-8")
 *         c_s = byte_s
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_filepath, __pyx_v_pyFileDesc, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 21, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/lxbrl/utils.pxi":22
 *     cdef MemBufInputSource* memInpSrc
 *     if "filepath" in pyFileDesc:
 *         byte_s = pyFileDesc["filepath"].encode("utf-8")             # <<<<<<<<<<<<<<
 *         c_s = byte_s
 *         xmlChFile = transcode(c_s)
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_pyFileDesc, __pyx_n_s_filepath); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 22, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_byte_s = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "arelle_cython/lxbrl/utils.pxi":23
 *     if "filepath" in pyFileDesc:
 *         byte_s = pyFileDesc["filepath"].encode("utf-8")
 *         c_s = byte_s             # <<<<<<<<<<<<<<
 *         xmlChFile = transcode(c_s)
 *         fileInpSrc = ( new LocalFileInputSource( xmlChFile ))
 */
    __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_byte_s); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(1, 23, __pyx_L1_error)
    __pyx_v_c_s = __pyx_t_5;

    /* "arelle_cython/lxbrl/utils.pxi":24
 *         byte_s = pyFileDesc["filepath"].encode("utf-8")
 *         c_s = byte_s
 *         xmlChFile = transcode(c_s)             # <<<<<<<<<<<<<<
 *         fileInpSrc = ( new LocalFileInputSource( xmlChFile ))
 *         return fileInpSrc
 */
    __pyx_v_xmlChFile = xercesc::XMLString::transcode(__pyx_v_c_s);

    /* "arelle_cython/lxbrl/utils.pxi":25
 *         c_s = byte_s
 *         xmlChFile = transcode(c_s)
 *         fileInpSrc = ( new LocalFileInputSource( xmlChFile ))             # <<<<<<<<<<<<<<
 *         return fileInpSrc
 *     elif "bytes" in pyFileDesc:
 */
    __pyx_v_fileInpSrc = new xercesc::LocalFileInputSource(__pyx_v_xmlChFile);

    /* "arelle_cython/lxbrl/utils.pxi":26
 *         xmlChFile = transcode(c_s)
 *         fileInpSrc = ( new LocalFileInputSource( xmlChFile ))
 *         return fileInpSrc             # <<<<<<<<<<<<<<
 *     elif "bytes" in pyFileDesc:
 *         byte_s = pyFileDesc["bytes"]
 */
    __pyx_r = __pyx_v_fileInpSrc;
    goto __pyx_L0;

    /* "arelle_cython/lxbrl/utils.pxi":21
 *     cdef LocalFileInputSource* fileInpSrc
 *     cdef MemBufInputSource* memInpSrc
 *     if "filepath" in pyFileDesc:             # <<<<<<<<<<<<<<
 *         byte_s = pyFileDesc["filepath"].encode("utf-8")
 *         c_s = byte_s
 */
  }

  /* "arelle_cython/lxbrl/utils.pxi":27
 *         fileInpSrc = ( new LocalFileInputSource( xmlChFile ))
 *         return fileInpSrc
 *     elif "bytes" in pyFileDesc:             # <<<<<<<<<<<<<<
 *         byte_s = pyFileDesc["bytes"]
 *         std_s = byte_s
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_bytes, __pyx_v_pyFileDesc, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 27, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/lxbrl/utils.pxi":28
 *         return fileInpSrc
 *     elif "bytes" in pyFileDesc:
 *         byte_s = pyFileDesc["bytes"]             # <<<<<<<<<<<<<<
 *         std_s = byte_s
 *         memInpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), "(in memory)" ))
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_pyFileDesc, __pyx_n_s_bytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_byte_s = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "arelle_cython/lxbrl/utils.pxi":29
 *     elif "bytes" in pyFileDesc:
 *         byte_s = pyFileDesc["bytes"]
 *         std_s = byte_s             # <<<<<<<<<<<<<<
 *         memInpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), "(in memory)" ))
 *         return memInpSrc
 */
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_byte_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 29, __pyx_L1_error)
    __pyx_v_std_s = __pyx_t_6;

    /* "arelle_cython/lxbrl/utils.pxi":30
 *         byte_s = pyFileDesc["bytes"]
 *         std_s = byte_s
 *         memInpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), "(in memory)" ))             # <<<<<<<<<<<<<<
 *         return memInpSrc
 * 
 */
    __pyx_v_memInpSrc = new xercesc::MemBufInputSource(((__pyx_t_5lxbrl_11xerces_util_XMLByte *)__pyx_v_std_s.c_str()), __pyx_v_std_s.size(), ((char *)"(in memory)"));

    /* "arelle_cython/lxbrl/utils.pxi":31
 *         std_s = byte_s
 *         memInpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), "(in memory)" ))
 *         return memInpSrc             # <<<<<<<<<<<<<<
 * 
 * cdef cppclass templateSAX2Handler(ErrorHandler, LexicalHandler, ContentHandler):
 */
    __pyx_r = __pyx_v_memInpSrc;
    goto __pyx_L0;

    /* "arelle_cython/lxbrl/utils.pxi":27
 *         fileInpSrc = ( new LocalFileInputSource( xmlChFile ))
 *         return fileInpSrc
 *     elif "bytes" in pyFileDesc:             # <<<<<<<<<<<<<<
 *         byte_s = pyFileDesc["bytes"]
 *         std_s = byte_s
 */
  }

  /* "arelle_cython/lxbrl/utils.pxi":15
 *         self.__dict__ = self
 * 
 * cdef InputSource* fileDescInputSource( pyFileDesc ):             # <<<<<<<<<<<<<<
 *     cdef const char* c_s
 *     cdef string std_s
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("arelle.lxbrl.fileDescInputSource", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_byte_s);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/lxbrl/utils.pxi":35
 * cdef cppclass templateSAX2Handler(ErrorHandler, LexicalHandler, ContentHandler):
 *     # document handlers
 *     void characters(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         pass # needed if any analyzed element contents were to be significant
 *     void endDocument():
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::characters(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_chars, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLSize_t const __pyx_v_length) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("characters", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":37
 *     void characters(const XMLCh* chars, const XMLSize_t length):
 *         pass # needed if any analyzed element contents were to be significant
 *     void endDocument():             # <<<<<<<<<<<<<<
 *         pass
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::endDocument(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endDocument", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":39
 *     void endDocument():
 *         pass
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):             # <<<<<<<<<<<<<<
 *         pass
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::endElement(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_uri, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_localname, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_qname) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endElement", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":41
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 *         pass
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         pass
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::ignorableWhitespace(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_chars, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLSize_t const __pyx_v_length) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ignorableWhitespace", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":43
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):
 *         pass
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):             # <<<<<<<<<<<<<<
 *         pass
 *     void setDocumentLocator(const Locator* const locator):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::processingInstruction(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_target, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_data) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("processingInstruction", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":45
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):
 *         pass
 *     void setDocumentLocator(const Locator* const locator):             # <<<<<<<<<<<<<<
 *         pass
 *     void startDocument():
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::setDocumentLocator(CYTHON_UNUSED xercesc::Locator const *const __pyx_v_locator) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDocumentLocator", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":47
 *     void setDocumentLocator(const Locator* const locator):
 *         pass
 *     void startDocument():             # <<<<<<<<<<<<<<
 *         pass
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::startDocument(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startDocument", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":49
 *     void startDocument():
 *         pass
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):             # <<<<<<<<<<<<<<
 *         pass
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::startElement(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_uri, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_localname, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_qname, CYTHON_UNUSED xercesc::Attributes const &__pyx_v_attrs) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startElement", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":51
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):
 *         pass
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):             # <<<<<<<<<<<<<<
 *         pass
 *     void endPrefixMapping(const XMLCh* prefix):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::startPrefixMapping(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_prefix, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_uri) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startPrefixMapping", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":53
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         pass
 *     void endPrefixMapping(const XMLCh* prefix):             # <<<<<<<<<<<<<<
 *         pass
 *     void skippedEntity(const XMLCh* name):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::endPrefixMapping(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_prefix) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endPrefixMapping", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":55
 *     void endPrefixMapping(const XMLCh* prefix):
 *         pass
 *     void skippedEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         pass
 *     void comment(const XMLCh* chars, const XMLSize_t length):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::skippedEntity(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_name) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skippedEntity", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":57
 *     void skippedEntity(const XMLCh* name):
 *         pass
 *     void comment(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         pass
 *     void endCDATA():
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::comment(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_chars, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLSize_t const __pyx_v_length) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("comment", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":59
 *     void comment(const XMLCh* chars, const XMLSize_t length):
 *         pass
 *     void endCDATA():             # <<<<<<<<<<<<<<
 *         pass
 *     void endDTD():
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::endCDATA(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endCDATA", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":61
 *     void endCDATA():
 *         pass
 *     void endDTD():             # <<<<<<<<<<<<<<
 *         pass #print("endDTD")
 *     void endEntity(const XMLCh* name):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::endDTD(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endDTD", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":63
 *     void endDTD():
 *         pass #print("endDTD")
 *     void endEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         pass #print("endEntity name: {}".format(transcode(name)))
 *     void startCDATA():
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::endEntity(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_name) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endEntity", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":65
 *     void endEntity(const XMLCh* name):
 *         pass #print("endEntity name: {}".format(transcode(name)))
 *     void startCDATA():             # <<<<<<<<<<<<<<
 *         pass #print("startCDATA")
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::startCDATA(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startCDATA", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":67
 *     void startCDATA():
 *         pass #print("startCDATA")
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):             # <<<<<<<<<<<<<<
 *         pass #print("startDTD")
 *     void startEntity(const XMLCh* name):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::startDTD(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_name, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_publicId, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_systemId) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startDTD", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":69
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):
 *         pass #print("startDTD")
 *     void startEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         pass #print("startEntity")
 *     void elementDecl(const XMLCh* name, const XMLCh* model):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::startEntity(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_name) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startEntity", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":71
 *     void startEntity(const XMLCh* name):
 *         pass #print("startEntity")
 *     void elementDecl(const XMLCh* name, const XMLCh* model):             # <<<<<<<<<<<<<<
 *         pass #print("elementDecl")
 *     # error handlers
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::elementDecl(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_name, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_model) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("elementDecl", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":74
 *         pass #print("elementDecl")
 *     # error handlers
 *     void logError(const SAXParseException& exc, level):             # <<<<<<<<<<<<<<
 *         pass
 *     void error(const SAXParseException& exc):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::logError(CYTHON_UNUSED xercesc::SAXParseException const &__pyx_v_exc, CYTHON_UNUSED PyObject *__pyx_v_level) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logError", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":76
 *     void logError(const SAXParseException& exc, level):
 *         pass
 *     void error(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         pass
 *     void fatalError(const SAXParseException& exc):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::error(CYTHON_UNUSED xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("error", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":78
 *     void error(const SAXParseException& exc):
 *         pass
 *     void fatalError(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         pass
 *     void warning(const SAXParseException& exc):
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::fatalError(CYTHON_UNUSED xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fatalError", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":80
 *     void fatalError(const SAXParseException& exc):
 *         pass
 *     void warning(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         pass
 *     void resetErrors():
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::warning(CYTHON_UNUSED xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("warning", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":82
 *     void warning(const SAXParseException& exc):
 *         pass
 *     void resetErrors():             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

void __pyx_t_6arelle_5lxbrl_templateSAX2Handler::resetErrors(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resetErrors", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/utils.pxi":85
 *         pass
 * 
 * cdef getAttrValue(const Attributes& attrs, XMLCh* uri, XMLCh* localName):             # <<<<<<<<<<<<<<
 *     cdef object _pyValue
 *     cdef const XMLCh* _XmlValue = attrs.getValue(uri, localName)
 */

static PyObject *__pyx_f_6arelle_5lxbrl_getAttrValue(xercesc::Attributes const &__pyx_v_attrs, __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_uri, __pyx_t_5lxbrl_11xerces_util_XMLCh *__pyx_v_localName) {
  PyObject *__pyx_v__pyValue = 0;
  __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v__XmlValue;
  char *__pyx_v__charValue;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("getAttrValue", 0);

  /* "arelle_cython/lxbrl/utils.pxi":87
 * cdef getAttrValue(const Attributes& attrs, XMLCh* uri, XMLCh* localName):
 *     cdef object _pyValue
 *     cdef const XMLCh* _XmlValue = attrs.getValue(uri, localName)             # <<<<<<<<<<<<<<
 *     cdef char* _charValue
 *     print("attr val {} {}".format(transcode(uri),transcode(localName)))
 */
  __pyx_v__XmlValue = __pyx_v_attrs.getValue(__pyx_v_uri, __pyx_v_localName);

  /* "arelle_cython/lxbrl/utils.pxi":89
 *     cdef const XMLCh* _XmlValue = attrs.getValue(uri, localName)
 *     cdef char* _charValue
 *     print("attr val {} {}".format(transcode(uri),transcode(localName)))             # <<<<<<<<<<<<<<
 *     if _XmlValue == NULL:
 *         print("attr is null")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_attr_val, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_uri)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_localName)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 89, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 89, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(1, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/lxbrl/utils.pxi":90
 *     cdef char* _charValue
 *     print("attr val {} {}".format(transcode(uri),transcode(localName)))
 *     if _XmlValue == NULL:             # <<<<<<<<<<<<<<
 *         print("attr is null")
 *         return None
 */
  __pyx_t_8 = ((__pyx_v__XmlValue == NULL) != 0);
  if (__pyx_t_8) {

    /* "arelle_cython/lxbrl/utils.pxi":91
 *     print("attr val {} {}".format(transcode(uri),transcode(localName)))
 *     if _XmlValue == NULL:
 *         print("attr is null")             # <<<<<<<<<<<<<<
 *         return None
 *     print("attr is not null")
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_attr_is_null) < 0) __PYX_ERR(1, 91, __pyx_L1_error)

    /* "arelle_cython/lxbrl/utils.pxi":92
 *     if _XmlValue == NULL:
 *         print("attr is null")
 *         return None             # <<<<<<<<<<<<<<
 *     print("attr is not null")
 *     print("attr val {}".format(transcode(_XmlValue)))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "arelle_cython/lxbrl/utils.pxi":90
 *     cdef char* _charValue
 *     print("attr val {} {}".format(transcode(uri),transcode(localName)))
 *     if _XmlValue == NULL:             # <<<<<<<<<<<<<<
 *         print("attr is null")
 *         return None
 */
  }

  /* "arelle_cython/lxbrl/utils.pxi":93
 *         print("attr is null")
 *         return None
 *     print("attr is not null")             # <<<<<<<<<<<<<<
 *     print("attr val {}".format(transcode(_XmlValue)))
 *     _charValue = transcode(_XmlValue)
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_attr_is_not_null) < 0) __PYX_ERR(1, 93, __pyx_L1_error)

  /* "arelle_cython/lxbrl/utils.pxi":94
 *         return None
 *     print("attr is not null")
 *     print("attr val {}".format(transcode(_XmlValue)))             # <<<<<<<<<<<<<<
 *     _charValue = transcode(_XmlValue)
 *     _pyValue = _charValue
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_attr_val_2, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v__XmlValue)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 94, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 94, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 94, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 94, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(1, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/lxbrl/utils.pxi":95
 *     print("attr is not null")
 *     print("attr val {}".format(transcode(_XmlValue)))
 *     _charValue = transcode(_XmlValue)             # <<<<<<<<<<<<<<
 *     _pyValue = _charValue
 *     print("attr {}".format(_pyValue))
 */
  __pyx_v__charValue = xercesc::XMLString::transcode(__pyx_v__XmlValue);

  /* "arelle_cython/lxbrl/utils.pxi":96
 *     print("attr val {}".format(transcode(_XmlValue)))
 *     _charValue = transcode(_XmlValue)
 *     _pyValue = _charValue             # <<<<<<<<<<<<<<
 *     print("attr {}".format(_pyValue))
 *     release(&_charValue)
 */
  __pyx_t_1 = __Pyx_PyUnicode_FromString(__pyx_v__charValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__pyValue = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/lxbrl/utils.pxi":97
 *     _charValue = transcode(_XmlValue)
 *     _pyValue = _charValue
 *     print("attr {}".format(_pyValue))             # <<<<<<<<<<<<<<
 *     release(&_charValue)
 *     return _pyValue
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_attr, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v__pyValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v__pyValue};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 97, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v__pyValue};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 97, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v__pyValue);
      __Pyx_GIVEREF(__pyx_v__pyValue);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v__pyValue);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(1, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/lxbrl/utils.pxi":98
 *     _pyValue = _charValue
 *     print("attr {}".format(_pyValue))
 *     release(&_charValue)             # <<<<<<<<<<<<<<
 *     return _pyValue
 */
  xercesc::XMLString::release((&__pyx_v__charValue));

  /* "arelle_cython/lxbrl/utils.pxi":99
 *     print("attr {}".format(_pyValue))
 *     release(&_charValue)
 *     return _pyValue             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__pyValue);
  __pyx_r = __pyx_v__pyValue;
  goto __pyx_L0;

  /* "arelle_cython/lxbrl/utils.pxi":85
 *         pass
 * 
 * cdef getAttrValue(const Attributes& attrs, XMLCh* uri, XMLCh* localName):             # <<<<<<<<<<<<<<
 *     cdef object _pyValue
 *     cdef const XMLCh* _XmlValue = attrs.getValue(uri, localName)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("arelle.lxbrl.getAttrValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__pyValue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/lxbrl/cntlr.pxi":10
 *     cdef XMLGrammarPool* _xerces_grammar_pool
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         global _xerces_initialized, _xerces_terminated
 *         self._xerces_grammar_pool = NULL
 */

/* Python wrapper */
static int __pyx_pw_6arelle_5lxbrl_5Cntlr_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6arelle_5lxbrl_5Cntlr_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6arelle_5lxbrl_5Cntlr___init__(((struct __pyx_obj_6arelle_5lxbrl_Cntlr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_5lxbrl_5Cntlr___init__(struct __pyx_obj_6arelle_5lxbrl_Cntlr *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "arelle_cython/lxbrl/cntlr.pxi":12
 *     def __init__(self):
 *         global _xerces_initialized, _xerces_terminated
 *         self._xerces_grammar_pool = NULL             # <<<<<<<<<<<<<<
 *         assert not _xerces_initialized, "xerces already initialized" # can only be one per instance
 *         if not _xerces_initialized:
 */
  __pyx_v_self->_xerces_grammar_pool = NULL;

  /* "arelle_cython/lxbrl/cntlr.pxi":13
 *         global _xerces_initialized, _xerces_terminated
 *         self._xerces_grammar_pool = NULL
 *         assert not _xerces_initialized, "xerces already initialized" # can only be one per instance             # <<<<<<<<<<<<<<
 *         if not _xerces_initialized:
 *             Initialize()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((!(__pyx_v_6arelle_5lxbrl__xerces_initialized != 0)) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_xerces_already_initialized);
      __PYX_ERR(2, 13, __pyx_L1_error)
    }
  }
  #endif

  /* "arelle_cython/lxbrl/cntlr.pxi":14
 *         self._xerces_grammar_pool = NULL
 *         assert not _xerces_initialized, "xerces already initialized" # can only be one per instance
 *         if not _xerces_initialized:             # <<<<<<<<<<<<<<
 *             Initialize()
 *             _xerces_initialized = True
 */
  __pyx_t_1 = ((!(__pyx_v_6arelle_5lxbrl__xerces_initialized != 0)) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/lxbrl/cntlr.pxi":15
 *         assert not _xerces_initialized, "xerces already initialized" # can only be one per instance
 *         if not _xerces_initialized:
 *             Initialize()             # <<<<<<<<<<<<<<
 *             _xerces_initialized = True
 *             initialize_constants()
 */
    xercesc::XMLPlatformUtils::Initialize();

    /* "arelle_cython/lxbrl/cntlr.pxi":16
 *         if not _xerces_initialized:
 *             Initialize()
 *             _xerces_initialized = True             # <<<<<<<<<<<<<<
 *             initialize_constants()
 *         self._xerces_grammar_pool = new XMLGrammarPoolImpl(fgMemoryManager)
 */
    __pyx_v_6arelle_5lxbrl__xerces_initialized = 1;

    /* "arelle_cython/lxbrl/cntlr.pxi":17
 *             Initialize()
 *             _xerces_initialized = True
 *             initialize_constants()             # <<<<<<<<<<<<<<
 *         self._xerces_grammar_pool = new XMLGrammarPoolImpl(fgMemoryManager)
 * 
 */
    __pyx_t_2 = __pyx_f_6arelle_5lxbrl_initialize_constants(); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 17, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "arelle_cython/lxbrl/cntlr.pxi":14
 *         self._xerces_grammar_pool = NULL
 *         assert not _xerces_initialized, "xerces already initialized" # can only be one per instance
 *         if not _xerces_initialized:             # <<<<<<<<<<<<<<
 *             Initialize()
 *             _xerces_initialized = True
 */
  }

  /* "arelle_cython/lxbrl/cntlr.pxi":18
 *             _xerces_initialized = True
 *             initialize_constants()
 *         self._xerces_grammar_pool = new XMLGrammarPoolImpl(fgMemoryManager)             # <<<<<<<<<<<<<<
 * 
 *     def close(self):
 */
  __pyx_v_self->_xerces_grammar_pool = new xercesc::XMLGrammarPoolImpl(xercesc::XMLPlatformUtils::fgMemoryManager);

  /* "arelle_cython/lxbrl/cntlr.pxi":10
 *     cdef XMLGrammarPool* _xerces_grammar_pool
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         global _xerces_initialized, _xerces_terminated
 *         self._xerces_grammar_pool = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("arelle.lxbrl.Cntlr.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/lxbrl/cntlr.pxi":20
 *         self._xerces_grammar_pool = new XMLGrammarPoolImpl(fgMemoryManager)
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         global _xerces_initialized, _xerces_terminated
 *         assert _xerces_initialized, "xerces termination but not initialized"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_5lxbrl_5Cntlr_3close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6arelle_5lxbrl_5Cntlr_3close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_5lxbrl_5Cntlr_2close(((struct __pyx_obj_6arelle_5lxbrl_Cntlr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_5lxbrl_5Cntlr_2close(struct __pyx_obj_6arelle_5lxbrl_Cntlr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("close", 0);

  /* "arelle_cython/lxbrl/cntlr.pxi":22
 *     def close(self):
 *         global _xerces_initialized, _xerces_terminated
 *         assert _xerces_initialized, "xerces termination but not initialized"             # <<<<<<<<<<<<<<
 *         assert not _xerces_terminated, "xerces terminated or not started"
 *         if _xerces_initialized and not _xerces_terminated:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(__pyx_v_6arelle_5lxbrl__xerces_initialized != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_xerces_termination_but_not_initi);
      __PYX_ERR(2, 22, __pyx_L1_error)
    }
  }
  #endif

  /* "arelle_cython/lxbrl/cntlr.pxi":23
 *         global _xerces_initialized, _xerces_terminated
 *         assert _xerces_initialized, "xerces termination but not initialized"
 *         assert not _xerces_terminated, "xerces terminated or not started"             # <<<<<<<<<<<<<<
 *         if _xerces_initialized and not _xerces_terminated:
 *             Terminate()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((!(__pyx_v_6arelle_5lxbrl__xerces_terminated != 0)) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_xerces_terminated_or_not_started);
      __PYX_ERR(2, 23, __pyx_L1_error)
    }
  }
  #endif

  /* "arelle_cython/lxbrl/cntlr.pxi":24
 *         assert _xerces_initialized, "xerces termination but not initialized"
 *         assert not _xerces_terminated, "xerces terminated or not started"
 *         if _xerces_initialized and not _xerces_terminated:             # <<<<<<<<<<<<<<
 *             Terminate()
 *             _xerces_terminated = True
 */
  __pyx_t_2 = (__pyx_v_6arelle_5lxbrl__xerces_initialized != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_6arelle_5lxbrl__xerces_terminated != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "arelle_cython/lxbrl/cntlr.pxi":25
 *         assert not _xerces_terminated, "xerces terminated or not started"
 *         if _xerces_initialized and not _xerces_terminated:
 *             Terminate()             # <<<<<<<<<<<<<<
 *             _xerces_terminated = True
 *             _xerces_initialized = False
 */
    xercesc::XMLPlatformUtils::Terminate();

    /* "arelle_cython/lxbrl/cntlr.pxi":26
 *         if _xerces_initialized and not _xerces_terminated:
 *             Terminate()
 *             _xerces_terminated = True             # <<<<<<<<<<<<<<
 *             _xerces_initialized = False
 *         del self._xerces_grammar_pool
 */
    __pyx_v_6arelle_5lxbrl__xerces_terminated = 1;

    /* "arelle_cython/lxbrl/cntlr.pxi":27
 *             Terminate()
 *             _xerces_terminated = True
 *             _xerces_initialized = False             # <<<<<<<<<<<<<<
 *         del self._xerces_grammar_pool
 *         self._xerces_grammar_pool = NULL
 */
    __pyx_v_6arelle_5lxbrl__xerces_initialized = 0;

    /* "arelle_cython/lxbrl/cntlr.pxi":24
 *         assert _xerces_initialized, "xerces termination but not initialized"
 *         assert not _xerces_terminated, "xerces terminated or not started"
 *         if _xerces_initialized and not _xerces_terminated:             # <<<<<<<<<<<<<<
 *             Terminate()
 *             _xerces_terminated = True
 */
  }

  /* "arelle_cython/lxbrl/cntlr.pxi":28
 *             _xerces_terminated = True
 *             _xerces_initialized = False
 *         del self._xerces_grammar_pool             # <<<<<<<<<<<<<<
 *         self._xerces_grammar_pool = NULL
 *         print("xerces closed")
 */
  delete __pyx_v_self->_xerces_grammar_pool;

  /* "arelle_cython/lxbrl/cntlr.pxi":29
 *             _xerces_initialized = False
 *         del self._xerces_grammar_pool
 *         self._xerces_grammar_pool = NULL             # <<<<<<<<<<<<<<
 *         print("xerces closed")
 * 
 */
  __pyx_v_self->_xerces_grammar_pool = NULL;

  /* "arelle_cython/lxbrl/cntlr.pxi":30
 *         del self._xerces_grammar_pool
 *         self._xerces_grammar_pool = NULL
 *         print("xerces closed")             # <<<<<<<<<<<<<<
 * 
 *     def xerces_initialized(self):
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_xerces_closed) < 0) __PYX_ERR(2, 30, __pyx_L1_error)

  /* "arelle_cython/lxbrl/cntlr.pxi":20
 *         self._xerces_grammar_pool = new XMLGrammarPoolImpl(fgMemoryManager)
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         global _xerces_initialized, _xerces_terminated
 *         assert _xerces_initialized, "xerces termination but not initialized"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("arelle.lxbrl.Cntlr.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/lxbrl/cntlr.pxi":32
 *         print("xerces closed")
 * 
 *     def xerces_initialized(self):             # <<<<<<<<<<<<<<
 *         return _xerces_initialized
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_5lxbrl_5Cntlr_5xerces_initialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6arelle_5lxbrl_5Cntlr_5xerces_initialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xerces_initialized (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_5lxbrl_5Cntlr_4xerces_initialized(((struct __pyx_obj_6arelle_5lxbrl_Cntlr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_5lxbrl_5Cntlr_4xerces_initialized(CYTHON_UNUSED struct __pyx_obj_6arelle_5lxbrl_Cntlr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("xerces_initialized", 0);

  /* "arelle_cython/lxbrl/cntlr.pxi":33
 * 
 *     def xerces_initialized(self):
 *         return _xerces_initialized             # <<<<<<<<<<<<<<
 * 
 *     def xerces_terminated(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_6arelle_5lxbrl__xerces_initialized); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "arelle_cython/lxbrl/cntlr.pxi":32
 *         print("xerces closed")
 * 
 *     def xerces_initialized(self):             # <<<<<<<<<<<<<<
 *         return _xerces_initialized
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.lxbrl.Cntlr.xerces_initialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/lxbrl/cntlr.pxi":35
 *         return _xerces_initialized
 * 
 *     def xerces_terminated(self):             # <<<<<<<<<<<<<<
 *         return _xerces_terminated
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_5lxbrl_5Cntlr_7xerces_terminated(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6arelle_5lxbrl_5Cntlr_7xerces_terminated(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xerces_terminated (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_5lxbrl_5Cntlr_6xerces_terminated(((struct __pyx_obj_6arelle_5lxbrl_Cntlr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_5lxbrl_5Cntlr_6xerces_terminated(CYTHON_UNUSED struct __pyx_obj_6arelle_5lxbrl_Cntlr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("xerces_terminated", 0);

  /* "arelle_cython/lxbrl/cntlr.pxi":36
 * 
 *     def xerces_terminated(self):
 *         return _xerces_terminated             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_6arelle_5lxbrl__xerces_terminated); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "arelle_cython/lxbrl/cntlr.pxi":35
 *         return _xerces_initialized
 * 
 *     def xerces_terminated(self):             # <<<<<<<<<<<<<<
 *         return _xerces_terminated
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.lxbrl.Cntlr.xerces_terminated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/lxbrl/identifyXmlFile.pxi":20
 *     bool hasIxNamespace, hasIx11Namespace
 * 
 *     _IdentificationSAX2Handler(void* pyIdentificationResultsPtr) except +:             # <<<<<<<<<<<<<<
 *         this.eltQNames = <XMLCh**>malloc(1000 * sizeof(XMLCh*))
 *         this.eltDepth = 0
 */

 __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler::__pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler(void *__pyx_v_pyIdentificationResultsPtr) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":21
 * 
 *     _IdentificationSAX2Handler(void* pyIdentificationResultsPtr) except +:
 *         this.eltQNames = <XMLCh**>malloc(1000 * sizeof(XMLCh*))             # <<<<<<<<<<<<<<
 *         this.eltDepth = 0
 *         this.pyIdentificationResultsPtr = pyIdentificationResultsPtr
 */
  this->eltQNames = ((__pyx_t_5lxbrl_11xerces_util_XMLCh **)malloc((0x3E8 * (sizeof(__pyx_t_5lxbrl_11xerces_util_XMLCh *)))));

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":22
 *     _IdentificationSAX2Handler(void* pyIdentificationResultsPtr) except +:
 *         this.eltQNames = <XMLCh**>malloc(1000 * sizeof(XMLCh*))
 *         this.eltDepth = 0             # <<<<<<<<<<<<<<
 *         this.pyIdentificationResultsPtr = pyIdentificationResultsPtr
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False
 */
  this->eltDepth = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":23
 *         this.eltQNames = <XMLCh**>malloc(1000 * sizeof(XMLCh*))
 *         this.eltDepth = 0
 *         this.pyIdentificationResultsPtr = pyIdentificationResultsPtr             # <<<<<<<<<<<<<<
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False
 *         this.hasIxNamespace = this.hasIx11Namespace = False
 */
  this->pyIdentificationResultsPtr = __pyx_v_pyIdentificationResultsPtr;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":24
 *         this.eltDepth = 0
 *         this.pyIdentificationResultsPtr = pyIdentificationResultsPtr
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False             # <<<<<<<<<<<<<<
 *         this.hasIxNamespace = this.hasIx11Namespace = False
 *     close():
 */
  this->isXbrl = 0;
  this->isXsd = 0;
  this->isHtml = 0;
  this->isInline = 0;
  this->isIdentified = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":25
 *         this.pyIdentificationResultsPtr = pyIdentificationResultsPtr
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False
 *         this.hasIxNamespace = this.hasIx11Namespace = False             # <<<<<<<<<<<<<<
 *     close():
 *         this.pyIdentificationResultsPtr = NULL
 */
  this->hasIxNamespace = 0;
  this->hasIx11Namespace = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":20
 *     bool hasIxNamespace, hasIx11Namespace
 * 
 *     _IdentificationSAX2Handler(void* pyIdentificationResultsPtr) except +:             # <<<<<<<<<<<<<<
 *         this.eltQNames = <XMLCh**>malloc(1000 * sizeof(XMLCh*))
 *         this.eltDepth = 0
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/identifyXmlFile.pxi":26
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False
 *         this.hasIxNamespace = this.hasIx11Namespace = False
 *     close():             # <<<<<<<<<<<<<<
 *         this.pyIdentificationResultsPtr = NULL
 *         free(this.eltQNames)
 */

PyObject *__pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler::close(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close", 0);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":27
 *         this.hasIxNamespace = this.hasIx11Namespace = False
 *     close():
 *         this.pyIdentificationResultsPtr = NULL             # <<<<<<<<<<<<<<
 *         free(this.eltQNames)
 *         this.eltQNames = NULL
 */
  this->pyIdentificationResultsPtr = NULL;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":28
 *     close():
 *         this.pyIdentificationResultsPtr = NULL
 *         free(this.eltQNames)             # <<<<<<<<<<<<<<
 *         this.eltQNames = NULL
 *     # document handlers
 */
  free(this->eltQNames);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":29
 *         this.pyIdentificationResultsPtr = NULL
 *         free(this.eltQNames)
 *         this.eltQNames = NULL             # <<<<<<<<<<<<<<
 *     # document handlers
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 */
  this->eltQNames = NULL;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":26
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False
 *         this.hasIxNamespace = this.hasIx11Namespace = False
 *     close():             # <<<<<<<<<<<<<<
 *         this.pyIdentificationResultsPtr = NULL
 *         free(this.eltQNames)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/lxbrl/identifyXmlFile.pxi":31
 *         this.eltQNames = NULL
 *     # document handlers
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):             # <<<<<<<<<<<<<<
 *         this.eltQNames[this.eltDepth] = NULL
 *         this.eltDepth -= 1
 */

void __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler::endElement(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_uri, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_localname, CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_qname) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endElement", 0);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":32
 *     # document handlers
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 *         this.eltQNames[this.eltDepth] = NULL             # <<<<<<<<<<<<<<
 *         this.eltDepth -= 1
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):
 */
  (this->eltQNames[this->eltDepth]) = NULL;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":33
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 *         this.eltQNames[this.eltDepth] = NULL
 *         this.eltDepth -= 1             # <<<<<<<<<<<<<<
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):
 *         cdef object pyIdentificationResults
 */
  this->eltDepth = (this->eltDepth - 1);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":31
 *         this.eltQNames = NULL
 *     # document handlers
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):             # <<<<<<<<<<<<<<
 *         this.eltQNames[this.eltDepth] = NULL
 *         this.eltDepth -= 1
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/identifyXmlFile.pxi":34
 *         this.eltQNames[this.eltDepth] = NULL
 *         this.eltDepth -= 1
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):             # <<<<<<<<<<<<<<
 *         cdef object pyIdentificationResults
 *         cdef XMLSize_t i
 */

void __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler::startElement(__pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_uri, __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_localname, __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_qname, xercesc::Attributes const &__pyx_v_attrs) {
  PyObject *__pyx_v_pyIdentificationResults = 0;
  __pyx_t_5lxbrl_11xerces_util_XMLSize_t __pyx_v_i;
  PyObject *__pyx_v_attrValue = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  __pyx_t_5lxbrl_11xerces_util_XMLSize_t __pyx_t_11;
  __pyx_t_5lxbrl_11xerces_util_XMLSize_t __pyx_t_12;
  __Pyx_RefNannySetupContext("startElement", 0);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":40
 *         cdef object attrValue
 * 
 *         print("start {} {}".format(transcode(uri), transcode(localname)))             # <<<<<<<<<<<<<<
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         if compareIString(uri, nsXbrli) == 0:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_start, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_uri)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_localname)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":41
 * 
 *         print("start {} {}".format(transcode(uri), transcode(localname)))
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr             # <<<<<<<<<<<<<<
 *         if compareIString(uri, nsXbrli) == 0:
 *             if compareString(localname, lnXbrl) == 0:
 */
  __pyx_t_1 = ((PyObject *)this->pyIdentificationResultsPtr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_pyIdentificationResults = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":42
 *         print("start {} {}".format(transcode(uri), transcode(localname)))
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         if compareIString(uri, nsXbrli) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnXbrl) == 0:
 *                 this.isXbrl = True
 */
  __pyx_t_8 = ((xercesc::XMLString::compareIString(__pyx_v_uri, __pyx_v_6arelle_5lxbrl_nsXbrli) == 0) != 0);
  if (__pyx_t_8) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":43
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         if compareIString(uri, nsXbrli) == 0:
 *             if compareString(localname, lnXbrl) == 0:             # <<<<<<<<<<<<<<
 *                 this.isXbrl = True
 *                 pyIdentificationResults.type = u"instance"
 */
    __pyx_t_8 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnXbrl) == 0) != 0);
    if (__pyx_t_8) {

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":44
 *         if compareIString(uri, nsXbrli) == 0:
 *             if compareString(localname, lnXbrl) == 0:
 *                 this.isXbrl = True             # <<<<<<<<<<<<<<
 *                 pyIdentificationResults.type = u"instance"
 *         elif compareIString(uri, nsXsd) == 0:
 */
      this->isXbrl = 1;

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":45
 *             if compareString(localname, lnXbrl) == 0:
 *                 this.isXbrl = True
 *                 pyIdentificationResults.type = u"instance"             # <<<<<<<<<<<<<<
 *         elif compareIString(uri, nsXsd) == 0:
 *             if compareString(localname, lnSchema) == 0:
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_n_u_instance) < 0) __PYX_ERR(0, 45, __pyx_L1_error)

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":43
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         if compareIString(uri, nsXbrli) == 0:
 *             if compareString(localname, lnXbrl) == 0:             # <<<<<<<<<<<<<<
 *                 this.isXbrl = True
 *                 pyIdentificationResults.type = u"instance"
 */
    }

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":42
 *         print("start {} {}".format(transcode(uri), transcode(localname)))
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         if compareIString(uri, nsXbrli) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnXbrl) == 0:
 *                 this.isXbrl = True
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":46
 *                 this.isXbrl = True
 *                 pyIdentificationResults.type = u"instance"
 *         elif compareIString(uri, nsXsd) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnSchema) == 0:
 *                 this.isXsd = True
 */
  __pyx_t_8 = ((xercesc::XMLString::compareIString(__pyx_v_uri, __pyx_v_6arelle_5lxbrl_nsXsd) == 0) != 0);
  if (__pyx_t_8) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":47
 *                 pyIdentificationResults.type = u"instance"
 *         elif compareIString(uri, nsXsd) == 0:
 *             if compareString(localname, lnSchema) == 0:             # <<<<<<<<<<<<<<
 *                 this.isXsd = True
 *                 pyIdentificationResults.type = u"schema"
 */
    __pyx_t_8 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnSchema) == 0) != 0);
    if (__pyx_t_8) {

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":48
 *         elif compareIString(uri, nsXsd) == 0:
 *             if compareString(localname, lnSchema) == 0:
 *                 this.isXsd = True             # <<<<<<<<<<<<<<
 *                 pyIdentificationResults.type = u"schema"
 *         elif compareIString(uri, nsXhtml) == 0:
 */
      this->isXsd = 1;

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":49
 *             if compareString(localname, lnSchema) == 0:
 *                 this.isXsd = True
 *                 pyIdentificationResults.type = u"schema"             # <<<<<<<<<<<<<<
 *         elif compareIString(uri, nsXhtml) == 0:
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_n_u_schema) < 0) __PYX_ERR(0, 49, __pyx_L1_error)

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":47
 *                 pyIdentificationResults.type = u"instance"
 *         elif compareIString(uri, nsXsd) == 0:
 *             if compareString(localname, lnSchema) == 0:             # <<<<<<<<<<<<<<
 *                 this.isXsd = True
 *                 pyIdentificationResults.type = u"schema"
 */
    }

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":46
 *                 this.isXbrl = True
 *                 pyIdentificationResults.type = u"instance"
 *         elif compareIString(uri, nsXsd) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnSchema) == 0:
 *                 this.isXsd = True
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":50
 *                 this.isXsd = True
 *                 pyIdentificationResults.type = u"schema"
 *         elif compareIString(uri, nsXhtml) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:
 *                 if this.hasIx11Namespace:
 */
  __pyx_t_8 = ((xercesc::XMLString::compareIString(__pyx_v_uri, __pyx_v_6arelle_5lxbrl_nsXhtml) == 0) != 0);
  if (__pyx_t_8) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":51
 *                 pyIdentificationResults.type = u"schema"
 *         elif compareIString(uri, nsXhtml) == 0:
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:             # <<<<<<<<<<<<<<
 *                 if this.hasIx11Namespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 */
    __pyx_t_9 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnXhtml) == 0) != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_9 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnHtml) == 0) != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_8) {

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":52
 *         elif compareIString(uri, nsXhtml) == 0:
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:
 *                 if this.hasIx11Namespace:             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.append("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")
 */
      __pyx_t_8 = (this->hasIx11Namespace != 0);
      if (__pyx_t_8) {

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":53
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:
 *                 if this.hasIx11Namespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.schemaRefs.append("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")
 *                 elif this.hasIxNamespace:
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_kp_u_inline_XBRL_instance) < 0) __PYX_ERR(0, 53, __pyx_L1_error)

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":54
 *                 if this.hasIx11Namespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.append("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")             # <<<<<<<<<<<<<<
 *                 elif this.hasIxNamespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_schemaRefs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_kp_s_http_www_xbrl_org_2013_inlineXBR); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 54, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":52
 *         elif compareIString(uri, nsXhtml) == 0:
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:
 *                 if this.hasIx11Namespace:             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.append("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")
 */
        goto __pyx_L9;
      }

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":55
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.append("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")
 *                 elif this.hasIxNamespace:             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.append("http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd")
 */
      __pyx_t_8 = (this->hasIxNamespace != 0);
      if (__pyx_t_8) {

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":56
 *                     pyIdentificationResults.schemaRefs.append("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")
 *                 elif this.hasIxNamespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.schemaRefs.append("http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd")
 *                 else:
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_kp_u_inline_XBRL_instance) < 0) __PYX_ERR(0, 56, __pyx_L1_error)

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":57
 *                 elif this.hasIxNamespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.append("http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd")             # <<<<<<<<<<<<<<
 *                 else:
 *                     pyIdentificationResults.type = u"xhtml"
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_schemaRefs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_kp_s_http_www_xbrl_org_2008_inlineXBR); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 57, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":55
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.append("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")
 *                 elif this.hasIxNamespace:             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.append("http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd")
 */
        goto __pyx_L9;
      }

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":59
 *                     pyIdentificationResults.schemaRefs.append("http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd")
 *                 else:
 *                     pyIdentificationResults.type = u"xhtml"             # <<<<<<<<<<<<<<
 *                 this.isHtml = True
 *                 this.isIdentified = True # no need to parse further
 */
      /*else*/ {
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_n_u_xhtml) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
      }
      __pyx_L9:;

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":60
 *                 else:
 *                     pyIdentificationResults.type = u"xhtml"
 *                 this.isHtml = True             # <<<<<<<<<<<<<<
 *                 this.isIdentified = True # no need to parse further
 *         elif compareString(uri, nsLink) == 0:
 */
      this->isHtml = 1;

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":61
 *                     pyIdentificationResults.type = u"xhtml"
 *                 this.isHtml = True
 *                 this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *         elif compareString(uri, nsLink) == 0:
 *             if this.isXbrl or this.isInline:
 */
      this->isIdentified = 1;

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":51
 *                 pyIdentificationResults.type = u"schema"
 *         elif compareIString(uri, nsXhtml) == 0:
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:             # <<<<<<<<<<<<<<
 *                 if this.hasIx11Namespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 */
    }

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":50
 *                 this.isXsd = True
 *                 pyIdentificationResults.type = u"schema"
 *         elif compareIString(uri, nsXhtml) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:
 *                 if this.hasIx11Namespace:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":62
 *                 this.isHtml = True
 *                 this.isIdentified = True # no need to parse further
 *         elif compareString(uri, nsLink) == 0:             # <<<<<<<<<<<<<<
 *             if this.isXbrl or this.isInline:
 *                 if compareString(localname, lnSchemaRef) == 0:
 */
  __pyx_t_8 = ((xercesc::XMLString::compareString(__pyx_v_uri, __pyx_v_6arelle_5lxbrl_nsLink) == 0) != 0);
  if (__pyx_t_8) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":63
 *                 this.isIdentified = True # no need to parse further
 *         elif compareString(uri, nsLink) == 0:
 *             if this.isXbrl or this.isInline:             # <<<<<<<<<<<<<<
 *                 if compareString(localname, lnSchemaRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 */
    __pyx_t_9 = (this->isXbrl != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_9 = (this->isInline != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_8) {

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":64
 *         elif compareString(uri, nsLink) == 0:
 *             if this.isXbrl or this.isInline:
 *                 if compareString(localname, lnSchemaRef) == 0:             # <<<<<<<<<<<<<<
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 */
      __pyx_t_8 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnSchemaRef) == 0) != 0);
      if (__pyx_t_8) {

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":65
 *             if this.isXbrl or this.isInline:
 *                 if compareString(localname, lnSchemaRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)             # <<<<<<<<<<<<<<
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.append(attrValue)
 */
        __pyx_t_1 = __pyx_f_6arelle_5lxbrl_getAttrValue(__pyx_v_attrs, __pyx_v_6arelle_5lxbrl_nsXlink, __pyx_v_6arelle_5lxbrl_lnHref); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_attrValue = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":66
 *                 if compareString(localname, lnSchemaRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:             # <<<<<<<<<<<<<<
 *                         pyIdentificationResults.schemaRefs.append(attrValue)
 *                 elif compareString(localname, lnLinkbaseRef) == 0:
 */
        __pyx_t_8 = (__pyx_v_attrValue != Py_None);
        __pyx_t_9 = (__pyx_t_8 != 0);
        if (__pyx_t_9) {

          /* "arelle_cython/lxbrl/identifyXmlFile.pxi":67
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.append(attrValue)             # <<<<<<<<<<<<<<
 *                 elif compareString(localname, lnLinkbaseRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_schemaRefs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_10 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_v_attrValue); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 67, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "arelle_cython/lxbrl/identifyXmlFile.pxi":66
 *                 if compareString(localname, lnSchemaRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:             # <<<<<<<<<<<<<<
 *                         pyIdentificationResults.schemaRefs.append(attrValue)
 *                 elif compareString(localname, lnLinkbaseRef) == 0:
 */
        }

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":64
 *         elif compareString(uri, nsLink) == 0:
 *             if this.isXbrl or this.isInline:
 *                 if compareString(localname, lnSchemaRef) == 0:             # <<<<<<<<<<<<<<
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 */
        goto __pyx_L13;
      }

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":68
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.append(attrValue)
 *                 elif compareString(localname, lnLinkbaseRef) == 0:             # <<<<<<<<<<<<<<
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 */
      __pyx_t_9 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnLinkbaseRef) == 0) != 0);
      if (__pyx_t_9) {

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":69
 *                         pyIdentificationResults.schemaRefs.append(attrValue)
 *                 elif compareString(localname, lnLinkbaseRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)             # <<<<<<<<<<<<<<
 *                     if attrValue is not None:
 *                         pyIdentificationResults.linkbaseRefs.append(attrValue)
 */
        __pyx_t_1 = __pyx_f_6arelle_5lxbrl_getAttrValue(__pyx_v_attrs, __pyx_v_6arelle_5lxbrl_nsXlink, __pyx_v_6arelle_5lxbrl_lnHref); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_attrValue = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":70
 *                 elif compareString(localname, lnLinkbaseRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:             # <<<<<<<<<<<<<<
 *                         pyIdentificationResults.linkbaseRefs.append(attrValue)
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:
 */
        __pyx_t_9 = (__pyx_v_attrValue != Py_None);
        __pyx_t_8 = (__pyx_t_9 != 0);
        if (__pyx_t_8) {

          /* "arelle_cython/lxbrl/identifyXmlFile.pxi":71
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 *                         pyIdentificationResults.linkbaseRefs.append(attrValue)             # <<<<<<<<<<<<<<
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:
 *                 this.isIdentified = True # no need to parse further
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_linkbaseRefs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_10 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_v_attrValue); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 71, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "arelle_cython/lxbrl/identifyXmlFile.pxi":70
 *                 elif compareString(localname, lnLinkbaseRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:             # <<<<<<<<<<<<<<
 *                         pyIdentificationResults.linkbaseRefs.append(attrValue)
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:
 */
        }

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":68
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.append(attrValue)
 *                 elif compareString(localname, lnLinkbaseRef) == 0:             # <<<<<<<<<<<<<<
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 */
      }
      __pyx_L13:;

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":63
 *                 this.isIdentified = True # no need to parse further
 *         elif compareString(uri, nsLink) == 0:
 *             if this.isXbrl or this.isInline:             # <<<<<<<<<<<<<<
 *                 if compareString(localname, lnSchemaRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 */
      goto __pyx_L10;
    }

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":72
 *                     if attrValue is not None:
 *                         pyIdentificationResults.linkbaseRefs.append(attrValue)
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:             # <<<<<<<<<<<<<<
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"linkbase"
 */
    __pyx_t_9 = ((this->eltDepth == 0) != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_8 = __pyx_t_9;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_9 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnLinkbase) == 0) != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L16_bool_binop_done:;
    if (__pyx_t_8) {

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":73
 *                         pyIdentificationResults.linkbaseRefs.append(attrValue)
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:
 *                 this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *                 pyIdentificationResults.type = u"linkbase"
 *         elif compareIString(uri, nsVer) == 0:
 */
      this->isIdentified = 1;

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":74
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"linkbase"             # <<<<<<<<<<<<<<
 *         elif compareIString(uri, nsVer) == 0:
 *             if compareString(localname, lnReport) == 0:
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_n_u_linkbase) < 0) __PYX_ERR(0, 74, __pyx_L1_error)

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":72
 *                     if attrValue is not None:
 *                         pyIdentificationResults.linkbaseRefs.append(attrValue)
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:             # <<<<<<<<<<<<<<
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"linkbase"
 */
    }
    __pyx_L10:;

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":62
 *                 this.isHtml = True
 *                 this.isIdentified = True # no need to parse further
 *         elif compareString(uri, nsLink) == 0:             # <<<<<<<<<<<<<<
 *             if this.isXbrl or this.isInline:
 *                 if compareString(localname, lnSchemaRef) == 0:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":75
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"linkbase"
 *         elif compareIString(uri, nsVer) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnReport) == 0:
 *                 this.isIdentified = True # no need to parse further
 */
  __pyx_t_8 = ((xercesc::XMLString::compareIString(__pyx_v_uri, __pyx_v_6arelle_5lxbrl_nsVer) == 0) != 0);
  if (__pyx_t_8) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":76
 *                 pyIdentificationResults.type = u"linkbase"
 *         elif compareIString(uri, nsVer) == 0:
 *             if compareString(localname, lnReport) == 0:             # <<<<<<<<<<<<<<
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"versioning report"
 */
    __pyx_t_8 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnReport) == 0) != 0);
    if (__pyx_t_8) {

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":77
 *         elif compareIString(uri, nsVer) == 0:
 *             if compareString(localname, lnReport) == 0:
 *                 this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *                 pyIdentificationResults.type = u"versioning report"
 *             elif this.eltDepth == 0:
 */
      this->isIdentified = 1;

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":78
 *             if compareString(localname, lnReport) == 0:
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"versioning report"             # <<<<<<<<<<<<<<
 *             elif this.eltDepth == 0:
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_kp_u_versioning_report) < 0) __PYX_ERR(0, 78, __pyx_L1_error)

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":76
 *                 pyIdentificationResults.type = u"linkbase"
 *         elif compareIString(uri, nsVer) == 0:
 *             if compareString(localname, lnReport) == 0:             # <<<<<<<<<<<<<<
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"versioning report"
 */
      goto __pyx_L18;
    }

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":79
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"versioning report"
 *             elif this.eltDepth == 0:             # <<<<<<<<<<<<<<
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:
 *                     this.isIdentified = True # no need to parse further
 */
    __pyx_t_8 = ((this->eltDepth == 0) != 0);
    if (__pyx_t_8) {

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":80
 *                 pyIdentificationResults.type = u"versioning report"
 *             elif this.eltDepth == 0:
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:             # <<<<<<<<<<<<<<
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcases index"
 */
      __pyx_t_9 = ((xercesc::XMLString::compareIString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnTestcases) == 0) != 0);
      if (!__pyx_t_9) {
      } else {
        __pyx_t_8 = __pyx_t_9;
        goto __pyx_L20_bool_binop_done;
      }
      __pyx_t_9 = ((xercesc::XMLString::compareIString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnDocumentation) == 0) != 0);
      if (!__pyx_t_9) {
      } else {
        __pyx_t_8 = __pyx_t_9;
        goto __pyx_L20_bool_binop_done;
      }
      __pyx_t_9 = ((xercesc::XMLString::compareIString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnTestSuite) == 0) != 0);
      __pyx_t_8 = __pyx_t_9;
      __pyx_L20_bool_binop_done:;
      if (__pyx_t_8) {

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":81
 *             elif this.eltDepth == 0:
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:
 *                     this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.type = u"testcases index"
 *                 elif compareIString(localname, lnTestcase) == 0 or compareIString(localname, lnTestSet) == 0:
 */
        this->isIdentified = 1;

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":82
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcases index"             # <<<<<<<<<<<<<<
 *                 elif compareIString(localname, lnTestcase) == 0 or compareIString(localname, lnTestSet) == 0:
 *                     this.isIdentified = True # no need to parse further
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_kp_u_testcases_index) < 0) __PYX_ERR(0, 82, __pyx_L1_error)

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":80
 *                 pyIdentificationResults.type = u"versioning report"
 *             elif this.eltDepth == 0:
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:             # <<<<<<<<<<<<<<
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcases index"
 */
        goto __pyx_L19;
      }

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":83
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcases index"
 *                 elif compareIString(localname, lnTestcase) == 0 or compareIString(localname, lnTestSet) == 0:             # <<<<<<<<<<<<<<
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcase"
 */
      __pyx_t_9 = ((xercesc::XMLString::compareIString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnTestcase) == 0) != 0);
      if (!__pyx_t_9) {
      } else {
        __pyx_t_8 = __pyx_t_9;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_9 = ((xercesc::XMLString::compareIString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnTestSet) == 0) != 0);
      __pyx_t_8 = __pyx_t_9;
      __pyx_L23_bool_binop_done:;
      if (__pyx_t_8) {

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":84
 *                     pyIdentificationResults.type = u"testcases index"
 *                 elif compareIString(localname, lnTestcase) == 0 or compareIString(localname, lnTestSet) == 0:
 *                     this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.type = u"testcase"
 *         elif this.eltDepth == 0 and compareString(localname, lnRss) == 0:
 */
        this->isIdentified = 1;

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":85
 *                 elif compareIString(localname, lnTestcase) == 0 or compareIString(localname, lnTestSet) == 0:
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcase"             # <<<<<<<<<<<<<<
 *         elif this.eltDepth == 0 and compareString(localname, lnRss) == 0:
 *             this.isIdentified = True # no need to parse further
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_n_u_testcase) < 0) __PYX_ERR(0, 85, __pyx_L1_error)

        /* "arelle_cython/lxbrl/identifyXmlFile.pxi":83
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcases index"
 *                 elif compareIString(localname, lnTestcase) == 0 or compareIString(localname, lnTestSet) == 0:             # <<<<<<<<<<<<<<
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcase"
 */
      }
      __pyx_L19:;

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":79
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"versioning report"
 *             elif this.eltDepth == 0:             # <<<<<<<<<<<<<<
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:
 *                     this.isIdentified = True # no need to parse further
 */
    }
    __pyx_L18:;

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":75
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"linkbase"
 *         elif compareIString(uri, nsVer) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnReport) == 0:
 *                 this.isIdentified = True # no need to parse further
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":86
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcase"
 *         elif this.eltDepth == 0 and compareString(localname, lnRss) == 0:             # <<<<<<<<<<<<<<
 *             this.isIdentified = True # no need to parse further
 *             pyIdentificationResults.type = u"rss"
 */
  __pyx_t_9 = ((this->eltDepth == 0) != 0);
  if (__pyx_t_9) {
  } else {
    __pyx_t_8 = __pyx_t_9;
    goto __pyx_L25_bool_binop_done;
  }
  __pyx_t_9 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_5lxbrl_lnRss) == 0) != 0);
  __pyx_t_8 = __pyx_t_9;
  __pyx_L25_bool_binop_done:;
  if (__pyx_t_8) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":87
 *                     pyIdentificationResults.type = u"testcase"
 *         elif this.eltDepth == 0 and compareString(localname, lnRss) == 0:
 *             this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *             pyIdentificationResults.type = u"rss"
 *         elif this.isXbrl:
 */
    this->isIdentified = 1;

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":88
 *         elif this.eltDepth == 0 and compareString(localname, lnRss) == 0:
 *             this.isIdentified = True # no need to parse further
 *             pyIdentificationResults.type = u"rss"             # <<<<<<<<<<<<<<
 *         elif this.isXbrl:
 *             this.isIdentified = True # no need to parse further
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_n_u_rss) < 0) __PYX_ERR(0, 88, __pyx_L1_error)

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":86
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcase"
 *         elif this.eltDepth == 0 and compareString(localname, lnRss) == 0:             # <<<<<<<<<<<<<<
 *             this.isIdentified = True # no need to parse further
 *             pyIdentificationResults.type = u"rss"
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":89
 *             this.isIdentified = True # no need to parse further
 *             pyIdentificationResults.type = u"rss"
 *         elif this.isXbrl:             # <<<<<<<<<<<<<<
 *             this.isIdentified = True # no need to parse further
 *         for i in range(attrs.getLength()):
 */
  __pyx_t_8 = (this->isXbrl != 0);
  if (__pyx_t_8) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":90
 *             pyIdentificationResults.type = u"rss"
 *         elif this.isXbrl:
 *             this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *         for i in range(attrs.getLength()):
 *             print("attribute {} = {}".format(i, transcode(attrs.getQName(i))))
 */
    this->isIdentified = 1;

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":89
 *             this.isIdentified = True # no need to parse further
 *             pyIdentificationResults.type = u"rss"
 *         elif this.isXbrl:             # <<<<<<<<<<<<<<
 *             this.isIdentified = True # no need to parse further
 *         for i in range(attrs.getLength()):
 */
  }
  __pyx_L3:;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":91
 *         elif this.isXbrl:
 *             this.isIdentified = True # no need to parse further
 *         for i in range(attrs.getLength()):             # <<<<<<<<<<<<<<
 *             print("attribute {} = {}".format(i, transcode(attrs.getQName(i))))
 *         this.eltDepth += 1
 */
  __pyx_t_11 = __pyx_v_attrs.getLength();
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":92
 *             this.isIdentified = True # no need to parse further
 *         for i in range(attrs.getLength()):
 *             print("attribute {} = {}".format(i, transcode(attrs.getQName(i))))             # <<<<<<<<<<<<<<
 *         this.eltDepth += 1
 *         this.eltQNames[this.eltDepth] = <XMLCh*>qname
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_attribute, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_attrs.getQName(__pyx_v_i))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_7, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_7, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_t_4);
      __pyx_t_7 = 0;
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":93
 *         for i in range(attrs.getLength()):
 *             print("attribute {} = {}".format(i, transcode(attrs.getQName(i))))
 *         this.eltDepth += 1             # <<<<<<<<<<<<<<
 *         this.eltQNames[this.eltDepth] = <XMLCh*>qname
 * 
 */
  this->eltDepth = (this->eltDepth + 1);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":94
 *             print("attribute {} = {}".format(i, transcode(attrs.getQName(i))))
 *         this.eltDepth += 1
 *         this.eltQNames[this.eltDepth] = <XMLCh*>qname             # <<<<<<<<<<<<<<
 * 
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 */
  (this->eltQNames[this->eltDepth]) = ((__pyx_t_5lxbrl_11xerces_util_XMLCh *)__pyx_v_qname);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":34
 *         this.eltQNames[this.eltDepth] = NULL
 *         this.eltDepth -= 1
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):             # <<<<<<<<<<<<<<
 *         cdef object pyIdentificationResults
 *         cdef XMLSize_t i
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("_IdentificationSAX2Handler.startElement", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyIdentificationResults);
  __Pyx_XDECREF(__pyx_v_attrValue);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/identifyXmlFile.pxi":96
 *         this.eltQNames[this.eltDepth] = <XMLCh*>qname
 * 
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):             # <<<<<<<<<<<<<<
 *         if compareString(uri, nsIxbrl) == 0:
 *             this.hasIxNamespace = True
 */

void __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler::startPrefixMapping(CYTHON_UNUSED __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_prefix, __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_uri) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("startPrefixMapping", 0);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":97
 * 
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         if compareString(uri, nsIxbrl) == 0:             # <<<<<<<<<<<<<<
 *             this.hasIxNamespace = True
 *         elif compareString(uri, nsIxbrl11) == 0:
 */
  __pyx_t_1 = ((xercesc::XMLString::compareString(__pyx_v_uri, __pyx_v_6arelle_5lxbrl_nsIxbrl) == 0) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":98
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         if compareString(uri, nsIxbrl) == 0:
 *             this.hasIxNamespace = True             # <<<<<<<<<<<<<<
 *         elif compareString(uri, nsIxbrl11) == 0:
 *             this.hasIx11Namespace = True
 */
    this->hasIxNamespace = 1;

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":97
 * 
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         if compareString(uri, nsIxbrl) == 0:             # <<<<<<<<<<<<<<
 *             this.hasIxNamespace = True
 *         elif compareString(uri, nsIxbrl11) == 0:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":99
 *         if compareString(uri, nsIxbrl) == 0:
 *             this.hasIxNamespace = True
 *         elif compareString(uri, nsIxbrl11) == 0:             # <<<<<<<<<<<<<<
 *             this.hasIx11Namespace = True
 *     # error handlers
 */
  __pyx_t_1 = ((xercesc::XMLString::compareString(__pyx_v_uri, __pyx_v_6arelle_5lxbrl_nsIxbrl11) == 0) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":100
 *             this.hasIxNamespace = True
 *         elif compareString(uri, nsIxbrl11) == 0:
 *             this.hasIx11Namespace = True             # <<<<<<<<<<<<<<
 *     # error handlers
 *     void logError(const SAXParseException& exc, level):
 */
    this->hasIx11Namespace = 1;

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":99
 *         if compareString(uri, nsIxbrl) == 0:
 *             this.hasIxNamespace = True
 *         elif compareString(uri, nsIxbrl11) == 0:             # <<<<<<<<<<<<<<
 *             this.hasIx11Namespace = True
 *     # error handlers
 */
  }
  __pyx_L3:;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":96
 *         this.eltQNames[this.eltDepth] = <XMLCh*>qname
 * 
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):             # <<<<<<<<<<<<<<
 *         if compareString(uri, nsIxbrl) == 0:
 *             this.hasIxNamespace = True
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/identifyXmlFile.pxi":102
 *             this.hasIx11Namespace = True
 *     # error handlers
 *     void logError(const SAXParseException& exc, level):             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* msg = exc.getMessage()
 *         cdef char* msgText
 */

void __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler::logError(xercesc::SAXParseException const &__pyx_v_exc, PyObject *__pyx_v_level) {
  __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v_msg;
  char *__pyx_v_msgText;
  char *__pyx_v_fileName;
  char *__pyx_v_eltQn;
  PyObject *__pyx_v_pyIdentificationResults = 0;
  __pyx_t_5lxbrl_11xerces_util_XMLCh const *__pyx_v__file;
  PyObject *__pyx_v_pyError = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("logError", 0);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":103
 *     # error handlers
 *     void logError(const SAXParseException& exc, level):
 *         cdef const XMLCh* msg = exc.getMessage()             # <<<<<<<<<<<<<<
 *         cdef char* msgText
 *         cdef char* fileName
 */
  __pyx_v_msg = __pyx_v_exc.getMessage();

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":108
 *         cdef char* eltQn
 *         cdef object pyIdentificationResults
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr             # <<<<<<<<<<<<<<
 *         if msg != NULL:
 *             msgText = transcode(msg)
 */
  __pyx_t_1 = ((PyObject *)this->pyIdentificationResultsPtr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_pyIdentificationResults = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":109
 *         cdef object pyIdentificationResults
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             msgText = transcode(msg)
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":110
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         if msg != NULL:
 *             msgText = transcode(msg)             # <<<<<<<<<<<<<<
 *         else:
 *             msgText = b"null"
 */
    __pyx_v_msgText = xercesc::XMLString::transcode(__pyx_v_msg);

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":109
 *         cdef object pyIdentificationResults
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             msgText = transcode(msg)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":112
 *             msgText = transcode(msg)
 *         else:
 *             msgText = b"null"             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:
 */
  /*else*/ {
    __pyx_v_msgText = ((char *)"null");
  }
  __pyx_L3:;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":113
 *         else:
 *             msgText = b"null"
 *         cdef const XMLCh* _file = exc.getSystemId()             # <<<<<<<<<<<<<<
 *         if _file != NULL:
 *             fileName = transcode(_file)
 */
  __pyx_v__file = __pyx_v_exc.getSystemId();

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":114
 *             msgText = b"null"
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             fileName = transcode(_file)
 *         else:
 */
  __pyx_t_2 = ((__pyx_v__file != NULL) != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":115
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:
 *             fileName = transcode(_file)             # <<<<<<<<<<<<<<
 *         else:
 *             fileName = b"null"
 */
    __pyx_v_fileName = xercesc::XMLString::transcode(__pyx_v__file);

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":114
 *             msgText = b"null"
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             fileName = transcode(_file)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":117
 *             fileName = transcode(_file)
 *         else:
 *             fileName = b"null"             # <<<<<<<<<<<<<<
 *         if this.eltQNames[this.eltDepth] != NULL:
 *             eltQn = transcode(this.eltQNames[this.eltDepth])
 */
  /*else*/ {
    __pyx_v_fileName = ((char *)"null");
  }
  __pyx_L4:;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":118
 *         else:
 *             fileName = b"null"
 *         if this.eltQNames[this.eltDepth] != NULL:             # <<<<<<<<<<<<<<
 *             eltQn = transcode(this.eltQNames[this.eltDepth])
 *         else:
 */
  __pyx_t_2 = (((this->eltQNames[this->eltDepth]) != NULL) != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":119
 *             fileName = b"null"
 *         if this.eltQNames[this.eltDepth] != NULL:
 *             eltQn = transcode(this.eltQNames[this.eltDepth])             # <<<<<<<<<<<<<<
 *         else:
 *             eltQn = b""
 */
    __pyx_v_eltQn = xercesc::XMLString::transcode((this->eltQNames[this->eltDepth]));

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":118
 *         else:
 *             fileName = b"null"
 *         if this.eltQNames[this.eltDepth] != NULL:             # <<<<<<<<<<<<<<
 *             eltQn = transcode(this.eltQNames[this.eltDepth])
 *         else:
 */
    goto __pyx_L5;
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":121
 *             eltQn = transcode(this.eltQNames[this.eltDepth])
 *         else:
 *             eltQn = b""             # <<<<<<<<<<<<<<
 *         pyError = {"message": msgText.decode("utf-8"),
 *                    "level": level,
 */
  /*else*/ {
    __pyx_v_eltQn = ((char *)"");
  }
  __pyx_L5:;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":122
 *         else:
 *             eltQn = b""
 *         pyError = {"message": msgText.decode("utf-8"),             # <<<<<<<<<<<<<<
 *                    "level": level,
 *                    "lineno": exc.getLineNumber(),
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v_msgText); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_message, __pyx_t_3) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":123
 *             eltQn = b""
 *         pyError = {"message": msgText.decode("utf-8"),
 *                    "level": level,             # <<<<<<<<<<<<<<
 *                    "lineno": exc.getLineNumber(),
 *                    "colno": exc.getColumnNumber(),
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_level, __pyx_v_level) < 0) __PYX_ERR(0, 122, __pyx_L1_error)

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":124
 *         pyError = {"message": msgText.decode("utf-8"),
 *                    "level": level,
 *                    "lineno": exc.getLineNumber(),             # <<<<<<<<<<<<<<
 *                    "colno": exc.getColumnNumber(),
 *                    "file": fileName.decode("utf-8"),
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_exc.getLineNumber()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_lineno, __pyx_t_3) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":125
 *                    "level": level,
 *                    "lineno": exc.getLineNumber(),
 *                    "colno": exc.getColumnNumber(),             # <<<<<<<<<<<<<<
 *                    "file": fileName.decode("utf-8"),
 *                    "element": eltQn.decode("utf-8")}
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_exc.getColumnNumber()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_colno, __pyx_t_3) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":126
 *                    "lineno": exc.getLineNumber(),
 *                    "colno": exc.getColumnNumber(),
 *                    "file": fileName.decode("utf-8"),             # <<<<<<<<<<<<<<
 *                    "element": eltQn.decode("utf-8")}
 *         pyIdentificationResults.errors.append(pyError)
 */
  __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v_fileName); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_file, __pyx_t_3) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":127
 *                    "colno": exc.getColumnNumber(),
 *                    "file": fileName.decode("utf-8"),
 *                    "element": eltQn.decode("utf-8")}             # <<<<<<<<<<<<<<
 *         pyIdentificationResults.errors.append(pyError)
 *         if msg != NULL:
 */
  __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v_eltQn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_element, __pyx_t_3) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_pyError = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":128
 *                    "file": fileName.decode("utf-8"),
 *                    "element": eltQn.decode("utf-8")}
 *         pyIdentificationResults.errors.append(pyError)             # <<<<<<<<<<<<<<
 *         if msg != NULL:
 *             release(&msgText)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_errors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_v_pyError); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":129
 *                    "element": eltQn.decode("utf-8")}
 *         pyIdentificationResults.errors.append(pyError)
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             release(&msgText)
 *         if _file != NULL:
 */
  __pyx_t_2 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":130
 *         pyIdentificationResults.errors.append(pyError)
 *         if msg != NULL:
 *             release(&msgText)             # <<<<<<<<<<<<<<
 *         if _file != NULL:
 *             release(&fileName)
 */
    xercesc::XMLString::release((&__pyx_v_msgText));

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":129
 *                    "element": eltQn.decode("utf-8")}
 *         pyIdentificationResults.errors.append(pyError)
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             release(&msgText)
 *         if _file != NULL:
 */
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":131
 *         if msg != NULL:
 *             release(&msgText)
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             release(&fileName)
 *         if this.eltQNames[this.eltDepth] != NULL:
 */
  __pyx_t_2 = ((__pyx_v__file != NULL) != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":132
 *             release(&msgText)
 *         if _file != NULL:
 *             release(&fileName)             # <<<<<<<<<<<<<<
 *         if this.eltQNames[this.eltDepth] != NULL:
 *             release(&eltQn)
 */
    xercesc::XMLString::release((&__pyx_v_fileName));

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":131
 *         if msg != NULL:
 *             release(&msgText)
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             release(&fileName)
 *         if this.eltQNames[this.eltDepth] != NULL:
 */
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":133
 *         if _file != NULL:
 *             release(&fileName)
 *         if this.eltQNames[this.eltDepth] != NULL:             # <<<<<<<<<<<<<<
 *             release(&eltQn)
 *     void error(const SAXParseException& exc):
 */
  __pyx_t_2 = (((this->eltQNames[this->eltDepth]) != NULL) != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":134
 *             release(&fileName)
 *         if this.eltQNames[this.eltDepth] != NULL:
 *             release(&eltQn)             # <<<<<<<<<<<<<<
 *     void error(const SAXParseException& exc):
 *         this.logError(exc, u"error")
 */
    xercesc::XMLString::release((&__pyx_v_eltQn));

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":133
 *         if _file != NULL:
 *             release(&fileName)
 *         if this.eltQNames[this.eltDepth] != NULL:             # <<<<<<<<<<<<<<
 *             release(&eltQn)
 *     void error(const SAXParseException& exc):
 */
  }

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":102
 *             this.hasIx11Namespace = True
 *     # error handlers
 *     void logError(const SAXParseException& exc, level):             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* msg = exc.getMessage()
 *         cdef char* msgText
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("_IdentificationSAX2Handler.logError", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyIdentificationResults);
  __Pyx_XDECREF(__pyx_v_pyError);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/identifyXmlFile.pxi":135
 *         if this.eltQNames[this.eltDepth] != NULL:
 *             release(&eltQn)
 *     void error(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         this.logError(exc, u"error")
 *     void fatalError(const SAXParseException& exc):
 */

void __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler::error(xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("error", 0);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":136
 *             release(&eltQn)
 *     void error(const SAXParseException& exc):
 *         this.logError(exc, u"error")             # <<<<<<<<<<<<<<
 *     void fatalError(const SAXParseException& exc):
 *         this.logError(exc, u"fatal")
 */
  this->logError(__pyx_v_exc, __pyx_n_u_error);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":135
 *         if this.eltQNames[this.eltDepth] != NULL:
 *             release(&eltQn)
 *     void error(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         this.logError(exc, u"error")
 *     void fatalError(const SAXParseException& exc):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/identifyXmlFile.pxi":137
 *     void error(const SAXParseException& exc):
 *         this.logError(exc, u"error")
 *     void fatalError(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         this.logError(exc, u"fatal")
 *     void warning(const SAXParseException& exc):
 */

void __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler::fatalError(xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fatalError", 0);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":138
 *         this.logError(exc, u"error")
 *     void fatalError(const SAXParseException& exc):
 *         this.logError(exc, u"fatal")             # <<<<<<<<<<<<<<
 *     void warning(const SAXParseException& exc):
 *         this.logError(exc, u"fatal")
 */
  this->logError(__pyx_v_exc, __pyx_n_u_fatal);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":137
 *     void error(const SAXParseException& exc):
 *         this.logError(exc, u"error")
 *     void fatalError(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         this.logError(exc, u"fatal")
 *     void warning(const SAXParseException& exc):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/identifyXmlFile.pxi":139
 *     void fatalError(const SAXParseException& exc):
 *         this.logError(exc, u"fatal")
 *     void warning(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         this.logError(exc, u"fatal")
 * 
 */

void __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler::warning(xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("warning", 0);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":140
 *         this.logError(exc, u"fatal")
 *     void warning(const SAXParseException& exc):
 *         this.logError(exc, u"fatal")             # <<<<<<<<<<<<<<
 * 
 * def identifyXmlFile( pyFileDesc ):
 */
  this->logError(__pyx_v_exc, __pyx_n_u_fatal);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":139
 *     void fatalError(const SAXParseException& exc):
 *         this.logError(exc, u"fatal")
 *     void warning(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         this.logError(exc, u"fatal")
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/lxbrl/identifyXmlFile.pxi":142
 *         this.logError(exc, u"fatal")
 * 
 * def identifyXmlFile( pyFileDesc ):             # <<<<<<<<<<<<<<
 * 
 *     print("identify trace1")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_5lxbrl_1identifyXmlFile(PyObject *__pyx_self, PyObject *__pyx_v_pyFileDesc); /*proto*/
static PyMethodDef __pyx_mdef_6arelle_5lxbrl_1identifyXmlFile = {"identifyXmlFile", (PyCFunction)__pyx_pw_6arelle_5lxbrl_1identifyXmlFile, METH_O, 0};
static PyObject *__pyx_pw_6arelle_5lxbrl_1identifyXmlFile(PyObject *__pyx_self, PyObject *__pyx_v_pyFileDesc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("identifyXmlFile (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_5lxbrl_identifyXmlFile(__pyx_self, ((PyObject *)__pyx_v_pyFileDesc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_5lxbrl_identifyXmlFile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pyFileDesc) {
  xercesc::SAX2XMLReader *__pyx_v_parser;
  PyObject *__pyx_v_pyIdentificationResults = 0;
  void *__pyx_v_pyIdentificationResultsPtr;
  __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler *__pyx_v_identificationSAX2Handler;
  xercesc::XMLPScanToken *__pyx_v_token;
  bool __pyx_v_result;
  xercesc::InputSource *__pyx_v_inpSrc;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("identifyXmlFile", 0);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":144
 * def identifyXmlFile( pyFileDesc ):
 * 
 *     print("identify trace1")             # <<<<<<<<<<<<<<
 *     print("identify trace2 nsInst {} lnXbrl {}".format(transcode(nsXbrli), transcode(lnXbrl)))
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_identify_trace1) < 0) __PYX_ERR(0, 144, __pyx_L1_error)

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":145
 * 
 *     print("identify trace1")
 *     print("identify trace2 nsInst {} lnXbrl {}".format(transcode(nsXbrli), transcode(lnXbrl)))             # <<<<<<<<<<<<<<
 * 
 *     cdef SAX2XMLReader * parser = createXMLReader()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_identify_trace2_nsInst_lnXbrl, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_6arelle_5lxbrl_nsXbrli)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_6arelle_5lxbrl_lnXbrl)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":147
 *     print("identify trace2 nsInst {} lnXbrl {}".format(transcode(nsXbrli), transcode(lnXbrl)))
 * 
 *     cdef SAX2XMLReader * parser = createXMLReader()             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesLoadSchema, False)
 *     cdef object pyIdentificationResults
 */
  __pyx_v_parser = xercesc::XMLReaderFactory::createXMLReader();

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":148
 * 
 *     cdef SAX2XMLReader * parser = createXMLReader()
 *     parser.setFeature(fgXercesLoadSchema, False)             # <<<<<<<<<<<<<<
 *     cdef object pyIdentificationResults
 *     pyIdentificationResults = attrdict(type=u"unknown XML",
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesLoadSchema, 0);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":150
 *     parser.setFeature(fgXercesLoadSchema, False)
 *     cdef object pyIdentificationResults
 *     pyIdentificationResults = attrdict(type=u"unknown XML",             # <<<<<<<<<<<<<<
 *                                        schemaRefs=[],
 *                                        linkbaseRefs=[],
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_type, __pyx_kp_u_unknown_XML) < 0) __PYX_ERR(0, 150, __pyx_L1_error)

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":151
 *     cdef object pyIdentificationResults
 *     pyIdentificationResults = attrdict(type=u"unknown XML",
 *                                        schemaRefs=[],             # <<<<<<<<<<<<<<
 *                                        linkbaseRefs=[],
 *                                        nonDtsSchemaRefs=[],
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_schemaRefs, __pyx_t_2) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":152
 *     pyIdentificationResults = attrdict(type=u"unknown XML",
 *                                        schemaRefs=[],
 *                                        linkbaseRefs=[],             # <<<<<<<<<<<<<<
 *                                        nonDtsSchemaRefs=[],
 *                                        errors=[])
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_linkbaseRefs, __pyx_t_2) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":153
 *                                        schemaRefs=[],
 *                                        linkbaseRefs=[],
 *                                        nonDtsSchemaRefs=[],             # <<<<<<<<<<<<<<
 *                                        errors=[])
 *     print("pyIdRes {}".format(pyIdentificationResults))
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_nonDtsSchemaRefs, __pyx_t_2) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":154
 *                                        linkbaseRefs=[],
 *                                        nonDtsSchemaRefs=[],
 *                                        errors=[])             # <<<<<<<<<<<<<<
 *     print("pyIdRes {}".format(pyIdentificationResults))
 *     cdef void * pyIdentificationResultsPtr
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_errors, __pyx_t_2) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":150
 *     parser.setFeature(fgXercesLoadSchema, False)
 *     cdef object pyIdentificationResults
 *     pyIdentificationResults = attrdict(type=u"unknown XML",             # <<<<<<<<<<<<<<
 *                                        schemaRefs=[],
 *                                        linkbaseRefs=[],
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6arelle_5lxbrl_attrdict), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pyIdentificationResults = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":155
 *                                        nonDtsSchemaRefs=[],
 *                                        errors=[])
 *     print("pyIdRes {}".format(pyIdentificationResults))             # <<<<<<<<<<<<<<
 *     cdef void * pyIdentificationResultsPtr
 *     pyIdentificationResultsPtr = <void*>pyIdentificationResults
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_pyIdRes, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_pyIdentificationResults); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_pyIdentificationResults};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_pyIdentificationResults};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_pyIdentificationResults);
      __Pyx_GIVEREF(__pyx_v_pyIdentificationResults);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_pyIdentificationResults);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":157
 *     print("pyIdRes {}".format(pyIdentificationResults))
 *     cdef void * pyIdentificationResultsPtr
 *     pyIdentificationResultsPtr = <void*>pyIdentificationResults             # <<<<<<<<<<<<<<
 *     cdef _IdentificationSAX2Handler * identificationSAX2Handler = new _IdentificationSAX2Handler(pyIdentificationResultsPtr)
 *     parser.setErrorHandler(identificationSAX2Handler)
 */
  __pyx_v_pyIdentificationResultsPtr = ((void *)__pyx_v_pyIdentificationResults);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":158
 *     cdef void * pyIdentificationResultsPtr
 *     pyIdentificationResultsPtr = <void*>pyIdentificationResults
 *     cdef _IdentificationSAX2Handler * identificationSAX2Handler = new _IdentificationSAX2Handler(pyIdentificationResultsPtr)             # <<<<<<<<<<<<<<
 *     parser.setErrorHandler(identificationSAX2Handler)
 *     parser.setContentHandler(identificationSAX2Handler)
 */
  try {
    __pyx_t_8 = new __pyx_t_6arelle_5lxbrl__IdentificationSAX2Handler(__pyx_v_pyIdentificationResultsPtr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 158, __pyx_L1_error)
  }
  __pyx_v_identificationSAX2Handler = __pyx_t_8;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":159
 *     pyIdentificationResultsPtr = <void*>pyIdentificationResults
 *     cdef _IdentificationSAX2Handler * identificationSAX2Handler = new _IdentificationSAX2Handler(pyIdentificationResultsPtr)
 *     parser.setErrorHandler(identificationSAX2Handler)             # <<<<<<<<<<<<<<
 *     parser.setContentHandler(identificationSAX2Handler)
 *     parser.setLexicalHandler(identificationSAX2Handler)
 */
  __pyx_v_parser->setErrorHandler(__pyx_v_identificationSAX2Handler);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":160
 *     cdef _IdentificationSAX2Handler * identificationSAX2Handler = new _IdentificationSAX2Handler(pyIdentificationResultsPtr)
 *     parser.setErrorHandler(identificationSAX2Handler)
 *     parser.setContentHandler(identificationSAX2Handler)             # <<<<<<<<<<<<<<
 *     parser.setLexicalHandler(identificationSAX2Handler)
 *     cdef XMLPScanToken* token = new XMLPScanToken()
 */
  __pyx_v_parser->setContentHandler(__pyx_v_identificationSAX2Handler);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":161
 *     parser.setErrorHandler(identificationSAX2Handler)
 *     parser.setContentHandler(identificationSAX2Handler)
 *     parser.setLexicalHandler(identificationSAX2Handler)             # <<<<<<<<<<<<<<
 *     cdef XMLPScanToken* token = new XMLPScanToken()
 *     cdef bool result
 */
  __pyx_v_parser->setLexicalHandler(__pyx_v_identificationSAX2Handler);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":162
 *     parser.setContentHandler(identificationSAX2Handler)
 *     parser.setLexicalHandler(identificationSAX2Handler)
 *     cdef XMLPScanToken* token = new XMLPScanToken()             # <<<<<<<<<<<<<<
 *     cdef bool result
 *     cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 */
  __pyx_v_token = new xercesc::XMLPScanToken();

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":164
 *     cdef XMLPScanToken* token = new XMLPScanToken()
 *     cdef bool result
 *     cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)             # <<<<<<<<<<<<<<
 *     print("B4 handler isXbrl {} isInline {} isIdentified {}".format(identificationSAX2Handler.isXbrl, identificationSAX2Handler.isInline, identificationSAX2Handler.isIdentified))
 *     result = parser.parseFirst(deref( inpSrc ), deref(token) )
 */
  __pyx_v_inpSrc = __pyx_f_6arelle_5lxbrl_fileDescInputSource(__pyx_v_pyFileDesc);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":165
 *     cdef bool result
 *     cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *     print("B4 handler isXbrl {} isInline {} isIdentified {}".format(identificationSAX2Handler.isXbrl, identificationSAX2Handler.isInline, identificationSAX2Handler.isIdentified))             # <<<<<<<<<<<<<<
 *     result = parser.parseFirst(deref( inpSrc ), deref(token) )
 *     while result:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_B4_handler_isXbrl_isInline_isIde, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_identificationSAX2Handler->isXbrl); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_identificationSAX2Handler->isInline); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_identificationSAX2Handler->isIdentified); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_4, __pyx_t_7, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_t_4, __pyx_t_7, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_6, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_6, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_7 = 0;
    __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":166
 *     cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *     print("B4 handler isXbrl {} isInline {} isIdentified {}".format(identificationSAX2Handler.isXbrl, identificationSAX2Handler.isInline, identificationSAX2Handler.isIdentified))
 *     result = parser.parseFirst(deref( inpSrc ), deref(token) )             # <<<<<<<<<<<<<<
 *     while result:
 *         if identificationSAX2Handler.isIdentified:
 */
  __pyx_v_result = __pyx_v_parser->parseFirst((*__pyx_v_inpSrc), (*__pyx_v_token));

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":167
 *     print("B4 handler isXbrl {} isInline {} isIdentified {}".format(identificationSAX2Handler.isXbrl, identificationSAX2Handler.isInline, identificationSAX2Handler.isIdentified))
 *     result = parser.parseFirst(deref( inpSrc ), deref(token) )
 *     while result:             # <<<<<<<<<<<<<<
 *         if identificationSAX2Handler.isIdentified:
 *             parser.parseReset(deref(token))
 */
  while (1) {
    __pyx_t_10 = (__pyx_v_result != 0);
    if (!__pyx_t_10) break;

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":168
 *     result = parser.parseFirst(deref( inpSrc ), deref(token) )
 *     while result:
 *         if identificationSAX2Handler.isIdentified:             # <<<<<<<<<<<<<<
 *             parser.parseReset(deref(token))
 *             token = NULL
 */
    __pyx_t_10 = (__pyx_v_identificationSAX2Handler->isIdentified != 0);
    if (__pyx_t_10) {

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":169
 *     while result:
 *         if identificationSAX2Handler.isIdentified:
 *             parser.parseReset(deref(token))             # <<<<<<<<<<<<<<
 *             token = NULL
 *             break
 */
      __pyx_v_parser->parseReset((*__pyx_v_token));

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":170
 *         if identificationSAX2Handler.isIdentified:
 *             parser.parseReset(deref(token))
 *             token = NULL             # <<<<<<<<<<<<<<
 *             break
 *         result = parser.parseNext(deref(token))
 */
      __pyx_v_token = NULL;

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":171
 *             parser.parseReset(deref(token))
 *             token = NULL
 *             break             # <<<<<<<<<<<<<<
 *         result = parser.parseNext(deref(token))
 *     print("results {} ".format(pyIdentificationResults))
 */
      goto __pyx_L4_break;

      /* "arelle_cython/lxbrl/identifyXmlFile.pxi":168
 *     result = parser.parseFirst(deref( inpSrc ), deref(token) )
 *     while result:
 *         if identificationSAX2Handler.isIdentified:             # <<<<<<<<<<<<<<
 *             parser.parseReset(deref(token))
 *             token = NULL
 */
    }

    /* "arelle_cython/lxbrl/identifyXmlFile.pxi":172
 *             token = NULL
 *             break
 *         result = parser.parseNext(deref(token))             # <<<<<<<<<<<<<<
 *     print("results {} ".format(pyIdentificationResults))
 *     print("handler isXbrl {} isInline {} isIdentified {}".format(identificationSAX2Handler.isXbrl, identificationSAX2Handler.isInline, identificationSAX2Handler.isIdentified))
 */
    __pyx_v_result = __pyx_v_parser->parseNext((*__pyx_v_token));
  }
  __pyx_L4_break:;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":173
 *             break
 *         result = parser.parseNext(deref(token))
 *     print("results {} ".format(pyIdentificationResults))             # <<<<<<<<<<<<<<
 *     print("handler isXbrl {} isInline {} isIdentified {}".format(identificationSAX2Handler.isXbrl, identificationSAX2Handler.isInline, identificationSAX2Handler.isIdentified))
 *     del parser
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_results, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_9) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_pyIdentificationResults); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_v_pyIdentificationResults};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_v_pyIdentificationResults};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_v_pyIdentificationResults);
      __Pyx_GIVEREF(__pyx_v_pyIdentificationResults);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_pyIdentificationResults);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":174
 *         result = parser.parseNext(deref(token))
 *     print("results {} ".format(pyIdentificationResults))
 *     print("handler isXbrl {} isInline {} isIdentified {}".format(identificationSAX2Handler.isXbrl, identificationSAX2Handler.isInline, identificationSAX2Handler.isIdentified))             # <<<<<<<<<<<<<<
 *     del parser
 *     identificationSAX2Handler.close()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_handler_isXbrl_isInline_isIdenti, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_identificationSAX2Handler->isXbrl); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyBool_FromLong(__pyx_v_identificationSAX2Handler->isInline); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_identificationSAX2Handler->isIdentified); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_t_3, __pyx_t_9, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_t_3, __pyx_t_9, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_6, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_6, __pyx_t_7);
    __pyx_t_3 = 0;
    __pyx_t_9 = 0;
    __pyx_t_7 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":175
 *     print("results {} ".format(pyIdentificationResults))
 *     print("handler isXbrl {} isInline {} isIdentified {}".format(identificationSAX2Handler.isXbrl, identificationSAX2Handler.isInline, identificationSAX2Handler.isIdentified))
 *     del parser             # <<<<<<<<<<<<<<
 *     identificationSAX2Handler.close()
 *     del identificationSAX2Handler
 */
  delete __pyx_v_parser;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":176
 *     print("handler isXbrl {} isInline {} isIdentified {}".format(identificationSAX2Handler.isXbrl, identificationSAX2Handler.isInline, identificationSAX2Handler.isIdentified))
 *     del parser
 *     identificationSAX2Handler.close()             # <<<<<<<<<<<<<<
 *     del identificationSAX2Handler
 *     return pyIdentificationResults
 */
  __pyx_t_2 = __pyx_v_identificationSAX2Handler->close(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":177
 *     del parser
 *     identificationSAX2Handler.close()
 *     del identificationSAX2Handler             # <<<<<<<<<<<<<<
 *     return pyIdentificationResults
 * 
 */
  delete __pyx_v_identificationSAX2Handler;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":178
 *     identificationSAX2Handler.close()
 *     del identificationSAX2Handler
 *     return pyIdentificationResults             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyIdentificationResults);
  __pyx_r = __pyx_v_pyIdentificationResults;
  goto __pyx_L0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":142
 *         this.logError(exc, u"fatal")
 * 
 * def identifyXmlFile( pyFileDesc ):             # <<<<<<<<<<<<<<
 * 
 *     print("identify trace1")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("arelle.lxbrl.identifyXmlFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyIdentificationResults);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(3, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6arelle_5lxbrl_attrdict(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6arelle_5lxbrl_attrdict *p;
  PyObject *o = (&PyDict_Type)->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6arelle_5lxbrl_attrdict *)o);
  p->__dict__ = PyDict_New(); if (unlikely(!p->__dict__)) goto bad;return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6arelle_5lxbrl_attrdict(PyObject *o) {
  struct __pyx_obj_6arelle_5lxbrl_attrdict *p = (struct __pyx_obj_6arelle_5lxbrl_attrdict *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  if (p->__dict__) PyDict_Clear(p->__dict__);
  Py_CLEAR(p->__dict__);
  PyObject_GC_Track(o);
  (&PyDict_Type)->tp_dealloc(o);
}

static int __pyx_tp_traverse_6arelle_5lxbrl_attrdict(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6arelle_5lxbrl_attrdict *p = (struct __pyx_obj_6arelle_5lxbrl_attrdict *)o;
  if (!(&PyDict_Type)->tp_traverse); else { e = (&PyDict_Type)->tp_traverse(o,v,a); if (e) return e; }
  if (p->__dict__) {
    e = (*v)(p->__dict__, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6arelle_5lxbrl_attrdict(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6arelle_5lxbrl_attrdict *p = (struct __pyx_obj_6arelle_5lxbrl_attrdict *)o;
  if (!(&PyDict_Type)->tp_clear); else (&PyDict_Type)->tp_clear(o);
  tmp = ((PyObject*)p->__dict__);
  p->__dict__ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx___dict__getter_6arelle_5lxbrl_attrdict(PyObject *o, CYTHON_UNUSED void *x) {
  struct __pyx_obj_6arelle_5lxbrl_attrdict *p = (struct __pyx_obj_6arelle_5lxbrl_attrdict *)o;
  if (unlikely(!p->__dict__)){
    p->__dict__ = PyDict_New();
  }
  Py_XINCREF(p->__dict__);
  return p->__dict__;
}

static PyMethodDef __pyx_methods_6arelle_5lxbrl_attrdict[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6arelle_5lxbrl_attrdict[] = {
  {(char *)"__dict__", __pyx___dict__getter_6arelle_5lxbrl_attrdict, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6arelle_5lxbrl_attrdict = {
  PyVarObject_HEAD_INIT(0, 0)
  "arelle.lxbrl.attrdict", /*tp_name*/
  sizeof(struct __pyx_obj_6arelle_5lxbrl_attrdict), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6arelle_5lxbrl_attrdict, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " utility to simulate an object with named fields from the kwargs ", /*tp_doc*/
  __pyx_tp_traverse_6arelle_5lxbrl_attrdict, /*tp_traverse*/
  __pyx_tp_clear_6arelle_5lxbrl_attrdict, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6arelle_5lxbrl_attrdict, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6arelle_5lxbrl_attrdict, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  offsetof(struct __pyx_obj_6arelle_5lxbrl_attrdict, __dict__), /*tp_dictoffset*/
  __pyx_pw_6arelle_5lxbrl_8attrdict_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6arelle_5lxbrl_attrdict, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6arelle_5lxbrl_Cntlr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6arelle_5lxbrl_Cntlr(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6arelle_5lxbrl_Cntlr[] = {
  {"close", (PyCFunction)__pyx_pw_6arelle_5lxbrl_5Cntlr_3close, METH_NOARGS, 0},
  {"xerces_initialized", (PyCFunction)__pyx_pw_6arelle_5lxbrl_5Cntlr_5xerces_initialized, METH_NOARGS, 0},
  {"xerces_terminated", (PyCFunction)__pyx_pw_6arelle_5lxbrl_5Cntlr_7xerces_terminated, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6arelle_5lxbrl_Cntlr = {
  PyVarObject_HEAD_INIT(0, 0)
  "arelle.lxbrl.Cntlr", /*tp_name*/
  sizeof(struct __pyx_obj_6arelle_5lxbrl_Cntlr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6arelle_5lxbrl_Cntlr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6arelle_5lxbrl_Cntlr, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6arelle_5lxbrl_5Cntlr_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6arelle_5lxbrl_Cntlr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "lxbrl",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_B4_handler_isXbrl_isInline_isIde, __pyx_k_B4_handler_isXbrl_isInline_isIde, sizeof(__pyx_k_B4_handler_isXbrl_isInline_isIde), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_k_Users_hermf_Documents_mvsl_proj, sizeof(__pyx_k_Users_hermf_Documents_mvsl_proj), 0, 0, 1, 0},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arelle_lxbrl, __pyx_k_arelle_lxbrl, sizeof(__pyx_k_arelle_lxbrl), 0, 0, 1, 1},
  {&__pyx_kp_s_attr, __pyx_k_attr, sizeof(__pyx_k_attr), 0, 0, 1, 0},
  {&__pyx_kp_s_attr_is_not_null, __pyx_k_attr_is_not_null, sizeof(__pyx_k_attr_is_not_null), 0, 0, 1, 0},
  {&__pyx_kp_s_attr_is_null, __pyx_k_attr_is_null, sizeof(__pyx_k_attr_is_null), 0, 0, 1, 0},
  {&__pyx_kp_s_attr_val, __pyx_k_attr_val, sizeof(__pyx_k_attr_val), 0, 0, 1, 0},
  {&__pyx_kp_s_attr_val_2, __pyx_k_attr_val_2, sizeof(__pyx_k_attr_val_2), 0, 0, 1, 0},
  {&__pyx_kp_s_attribute, __pyx_k_attribute, sizeof(__pyx_k_attribute), 0, 0, 1, 0},
  {&__pyx_n_s_bytes, __pyx_k_bytes, sizeof(__pyx_k_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_colno, __pyx_k_colno, sizeof(__pyx_k_colno), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_element, __pyx_k_element, sizeof(__pyx_k_element), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_u_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 1, 0, 1},
  {&__pyx_n_s_errors, __pyx_k_errors, sizeof(__pyx_k_errors), 0, 0, 1, 1},
  {&__pyx_n_u_fatal, __pyx_k_fatal, sizeof(__pyx_k_fatal), 0, 1, 0, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filepath, __pyx_k_filepath, sizeof(__pyx_k_filepath), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_kp_s_handler_isXbrl_isInline_isIdenti, __pyx_k_handler_isXbrl_isInline_isIdenti, sizeof(__pyx_k_handler_isXbrl_isInline_isIdenti), 0, 0, 1, 0},
  {&__pyx_kp_s_http_www_xbrl_org_2008_inlineXBR, __pyx_k_http_www_xbrl_org_2008_inlineXBR, sizeof(__pyx_k_http_www_xbrl_org_2008_inlineXBR), 0, 0, 1, 0},
  {&__pyx_kp_s_http_www_xbrl_org_2013_inlineXBR, __pyx_k_http_www_xbrl_org_2013_inlineXBR, sizeof(__pyx_k_http_www_xbrl_org_2013_inlineXBR), 0, 0, 1, 0},
  {&__pyx_n_s_identificationSAX2Handler, __pyx_k_identificationSAX2Handler, sizeof(__pyx_k_identificationSAX2Handler), 0, 0, 1, 1},
  {&__pyx_n_s_identifyXmlFile, __pyx_k_identifyXmlFile, sizeof(__pyx_k_identifyXmlFile), 0, 0, 1, 1},
  {&__pyx_kp_s_identify_trace1, __pyx_k_identify_trace1, sizeof(__pyx_k_identify_trace1), 0, 0, 1, 0},
  {&__pyx_kp_s_identify_trace2_nsInst_lnXbrl, __pyx_k_identify_trace2_nsInst_lnXbrl, sizeof(__pyx_k_identify_trace2_nsInst_lnXbrl), 0, 0, 1, 0},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_kp_u_inline_XBRL_instance, __pyx_k_inline_XBRL_instance, sizeof(__pyx_k_inline_XBRL_instance), 0, 1, 0, 0},
  {&__pyx_n_s_inpSrc, __pyx_k_inpSrc, sizeof(__pyx_k_inpSrc), 0, 0, 1, 1},
  {&__pyx_n_u_instance, __pyx_k_instance, sizeof(__pyx_k_instance), 0, 1, 0, 1},
  {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
  {&__pyx_n_s_lineno, __pyx_k_lineno, sizeof(__pyx_k_lineno), 0, 0, 1, 1},
  {&__pyx_n_u_linkbase, __pyx_k_linkbase, sizeof(__pyx_k_linkbase), 0, 1, 0, 1},
  {&__pyx_n_s_linkbaseRefs, __pyx_k_linkbaseRefs, sizeof(__pyx_k_linkbaseRefs), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 0, 1, 1},
  {&__pyx_n_s_nonDtsSchemaRefs, __pyx_k_nonDtsSchemaRefs, sizeof(__pyx_k_nonDtsSchemaRefs), 0, 0, 1, 1},
  {&__pyx_n_s_parser, __pyx_k_parser, sizeof(__pyx_k_parser), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyFileDesc, __pyx_k_pyFileDesc, sizeof(__pyx_k_pyFileDesc), 0, 0, 1, 1},
  {&__pyx_kp_s_pyIdRes, __pyx_k_pyIdRes, sizeof(__pyx_k_pyIdRes), 0, 0, 1, 0},
  {&__pyx_n_s_pyIdentificationResults, __pyx_k_pyIdentificationResults, sizeof(__pyx_k_pyIdentificationResults), 0, 0, 1, 1},
  {&__pyx_n_s_pyIdentificationResultsPtr, __pyx_k_pyIdentificationResultsPtr, sizeof(__pyx_k_pyIdentificationResultsPtr), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_kp_s_results, __pyx_k_results, sizeof(__pyx_k_results), 0, 0, 1, 0},
  {&__pyx_n_u_rss, __pyx_k_rss, sizeof(__pyx_k_rss), 0, 1, 0, 1},
  {&__pyx_n_u_schema, __pyx_k_schema, sizeof(__pyx_k_schema), 0, 1, 0, 1},
  {&__pyx_n_s_schemaRefs, __pyx_k_schemaRefs, sizeof(__pyx_k_schemaRefs), 0, 0, 1, 1},
  {&__pyx_kp_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_u_testcase, __pyx_k_testcase, sizeof(__pyx_k_testcase), 0, 1, 0, 1},
  {&__pyx_kp_u_testcases_index, __pyx_k_testcases_index, sizeof(__pyx_k_testcases_index), 0, 1, 0, 0},
  {&__pyx_n_s_token, __pyx_k_token, sizeof(__pyx_k_token), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_XML, __pyx_k_unknown_XML, sizeof(__pyx_k_unknown_XML), 0, 1, 0, 0},
  {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {&__pyx_kp_u_versioning_report, __pyx_k_versioning_report, sizeof(__pyx_k_versioning_report), 0, 1, 0, 0},
  {&__pyx_kp_s_xerces_already_initialized, __pyx_k_xerces_already_initialized, sizeof(__pyx_k_xerces_already_initialized), 0, 0, 1, 0},
  {&__pyx_kp_s_xerces_closed, __pyx_k_xerces_closed, sizeof(__pyx_k_xerces_closed), 0, 0, 1, 0},
  {&__pyx_kp_s_xerces_terminated_or_not_started, __pyx_k_xerces_terminated_or_not_started, sizeof(__pyx_k_xerces_terminated_or_not_started), 0, 0, 1, 0},
  {&__pyx_kp_s_xerces_termination_but_not_initi, __pyx_k_xerces_termination_but_not_initi, sizeof(__pyx_k_xerces_termination_but_not_initi), 0, 0, 1, 0},
  {&__pyx_n_u_xhtml, __pyx_k_xhtml, sizeof(__pyx_k_xhtml), 0, 1, 0, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 91, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "arelle_cython/lxbrl/utils.pxi":22
 *     cdef MemBufInputSource* memInpSrc
 *     if "filepath" in pyFileDesc:
 *         byte_s = pyFileDesc["filepath"].encode("utf-8")             # <<<<<<<<<<<<<<
 *         c_s = byte_s
 *         xmlChFile = transcode(c_s)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":122
 *         else:
 *             eltQn = b""
 *         pyError = {"message": msgText.decode("utf-8"),             # <<<<<<<<<<<<<<
 *                    "level": level,
 *                    "lineno": exc.getLineNumber(),
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":126
 *                    "lineno": exc.getLineNumber(),
 *                    "colno": exc.getColumnNumber(),
 *                    "file": fileName.decode("utf-8"),             # <<<<<<<<<<<<<<
 *                    "element": eltQn.decode("utf-8")}
 *         pyIdentificationResults.errors.append(pyError)
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":127
 *                    "colno": exc.getColumnNumber(),
 *                    "file": fileName.decode("utf-8"),
 *                    "element": eltQn.decode("utf-8")}             # <<<<<<<<<<<<<<
 *         pyIdentificationResults.errors.append(pyError)
 *         if msg != NULL:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":142
 *         this.logError(exc, u"fatal")
 * 
 * def identifyXmlFile( pyFileDesc ):             # <<<<<<<<<<<<<<
 * 
 *     print("identify trace1")
 */
  __pyx_tuple__5 = PyTuple_Pack(8, __pyx_n_s_pyFileDesc, __pyx_n_s_parser, __pyx_n_s_pyIdentificationResults, __pyx_n_s_pyIdentificationResultsPtr, __pyx_n_s_identificationSAX2Handler, __pyx_n_s_token, __pyx_n_s_result, __pyx_n_s_inpSrc); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(1, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_n_s_identifyXmlFile, 142, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(4, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initlxbrl(void); /*proto*/
PyMODINIT_FUNC initlxbrl(void)
#else
PyMODINIT_FUNC PyInit_lxbrl(void); /*proto*/
PyMODINIT_FUNC PyInit_lxbrl(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_lxbrl(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(4, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("lxbrl", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(4, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(4, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(4, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(4, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_arelle__lxbrl) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(4, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "arelle.lxbrl")) {
      if (unlikely(PyDict_SetItemString(modules, "arelle.lxbrl", __pyx_m) < 0)) __PYX_ERR(4, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_type_6arelle_5lxbrl_attrdict.tp_base = (&PyDict_Type);
  if (PyType_Ready(&__pyx_type_6arelle_5lxbrl_attrdict) < 0) __PYX_ERR(1, 8, __pyx_L1_error)
  __pyx_type_6arelle_5lxbrl_attrdict.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "attrdict", (PyObject *)&__pyx_type_6arelle_5lxbrl_attrdict) < 0) __PYX_ERR(1, 8, __pyx_L1_error)
  __pyx_ptype_6arelle_5lxbrl_attrdict = &__pyx_type_6arelle_5lxbrl_attrdict;
  if (PyType_Ready(&__pyx_type_6arelle_5lxbrl_Cntlr) < 0) __PYX_ERR(2, 7, __pyx_L1_error)
  __pyx_type_6arelle_5lxbrl_Cntlr.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Cntlr", (PyObject *)&__pyx_type_6arelle_5lxbrl_Cntlr) < 0) __PYX_ERR(2, 7, __pyx_L1_error)
  __pyx_ptype_6arelle_5lxbrl_Cntlr = &__pyx_type_6arelle_5lxbrl_Cntlr;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  #endif

  /* "arelle_cython/lxbrl/cntlr.pxi":5
 * from libcpp cimport bool
 * 
 * cdef bool _xerces_initialized = False, _xerces_terminated = False             # <<<<<<<<<<<<<<
 * 
 * cdef class Cntlr:
 */
  __pyx_v_6arelle_5lxbrl__xerces_initialized = 0;
  __pyx_v_6arelle_5lxbrl__xerces_terminated = 0;

  /* "arelle_cython/lxbrl/identifyXmlFile.pxi":142
 *         this.logError(exc, u"fatal")
 * 
 * def identifyXmlFile( pyFileDesc ):             # <<<<<<<<<<<<<<
 * 
 *     print("identify trace1")
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6arelle_5lxbrl_1identifyXmlFile, NULL, __pyx_n_s_arelle_lxbrl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_identifyXmlFile, __pyx_t_1) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle.lxbrl.pyx":1
 * # cython: c_string_type=unicode, c_string_encoding=utf-8             # <<<<<<<<<<<<<<
 * 
 * # Created on April 7, 2017
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init arelle.lxbrl", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init arelle.lxbrl");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* KeywordStringCheck */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseArgTupleInvalid */
  static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectCallMethod1 */
  static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* append */
  static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* Print */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

/* PrintOne */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
