/* Generated by Cython 0.25.2 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__arelle__arelle_c
#define __PYX_HAVE_API__arelle__arelle_c
#include "xercesc/framework/MemoryManager.hpp"
#include "xercesc/sax/InputSource.hpp"
#include "xercesc/sax/SAXException.hpp"
#include "xercesc/sax/AttributeList.hpp"
#include "xercesc/sax/Locator.hpp"
#include "xercesc/sax/DocumentHandler.hpp"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "xercesc/sax/EntityResolver.hpp"
#include "xercesc/sax/ErrorHandler.hpp"
#include "xercesc/util/PlatformUtils.hpp"
#include "xercesc/util/Hashers.hpp"
#include "xercesc/util/BaseRefVectorOf.hpp"
#include "xercesc/util/RefArrayVectorOf.hpp"
#include "xercesc/util/RefVectorOf.hpp"
#include "xercesc/util/XMLEntityResolver.hpp"
#include "xercesc/util/XMLEnumerator.hpp"
#include "xercesc/util/XMLResourceIdentifier.hpp"
#include "xercesc/util/XMemory.hpp"
#include "xercesc/util/RefHash3KeysIdPool.hpp"
#include "xercesc/util/QName.hpp"
#include "xercesc/util/XMLString.hpp"
#include "xercesc/framework/LocalFileInputSource.hpp"
#include "xercesc/framework/MemBufInputSource.hpp"
#include "xercesc/framework/XMLPScanToken.hpp"
#include "xercesc/framework/psvi/PSVIAttribute.hpp"
#include "xercesc/framework/psvi/PSVIAttributeList.hpp"
#include "xercesc/framework/psvi/PSVIElement.hpp"
#include "xercesc/framework/psvi/PSVIHandler.hpp"
#include "xercesc/framework/psvi/XSAnnotation.hpp"
#include "xercesc/framework/psvi/XSObject.hpp"
#include "xercesc/framework/psvi/XSComplexTypeDefinition.hpp"
#include "xercesc/framework/psvi/XSConstants.hpp"
#include "xercesc/framework/psvi/XSModelGroup.hpp"
#include "xercesc/framework/psvi/XSParticle.hpp"
#include "xercesc/framework/psvi/XSSimpleTypeDefinition.hpp"
#include "xercesc/framework/psvi/XSWildcard.hpp"
#include "xercesc/framework/psvi/XSTypeDefinition.hpp"
#include "xercesc/framework/psvi/XSAttributeDeclaration.hpp"
#include "xercesc/framework/psvi/XSAttributeGroupDefinition.hpp"
#include "xercesc/framework/psvi/XSAttributeUse.hpp"
#include "xercesc/framework/psvi/XSElementDeclaration.hpp"
#include "xercesc/framework/psvi/XSFacet.hpp"
#include "xercesc/framework/psvi/XSModelGroupDefinition.hpp"
#include "xercesc/framework/psvi/XSMultiValueFacet.hpp"
#include "xercesc/framework/psvi/XSNamedMap.hpp"
#include "xercesc/framework/psvi/XSNotationDeclaration.hpp"
#include "xercesc/framework/XMLElementDecl.hpp"
#include "xercesc/framework/XMLGrammarPool.hpp"
#include "xercesc/framework/XMLGrammarPoolImpl.hpp"
#include "xercesc/framework/psvi/XSModel.hpp"
#include "xercesc/framework/psvi/XSNamespaceItem.hpp"
#include "xercesc/framework/psvi/XSValue.hpp"
#include "xercesc/validators/common/Grammar.hpp"
#include "xercesc/validators/schema/SchemaGrammar.hpp"
#include "xercesc/validators/schema/SchemaElementDecl.hpp"
#include "xercesc/sax2/ContentHandler.hpp"
#include "xercesc/sax2/LexicalHandler.hpp"
#include "xercesc/sax2/Attributes.hpp"
#include "xercesc/sax2/SAX2XMLReader.hpp"
#include "/Users/hermf/temp/xerces-c-3.1.4/src/xercesc/parsers/SAX2XMLReaderImpl.hpp"
#include "xercesc/sax2/XMLReaderFactory.hpp"
#include "xercesc/sax2/DefaultHandler.hpp"
#include <string.h>
#include <string>
#include <stdio.h>
#include "xercesc/dom/DOM.hpp"
#include "xercesc/dom/DOMImplementationRegistry.hpp"
#include "xercesc/dom/DOMImplementationLS.hpp"
#include "xercesc/parsers/XercesDOMParser.hpp"
#include "xercesc/util/XMLUni.hpp"
#include <vector>
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "utf8"
#define __Pyx_PyObject_FromString __Pyx_PyUnicode_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "arelle_cython/arelle_c/ModelValue.pxi",
  "arelle_cython/arelle_c/ModelXbrl.pxi",
  "arelle_cython/arelle_c/consts.pxi",
  "arelle_cython/arelle_c/utils.pxi",
  "arelle_cython/arelle_c/Cntlr.pxi",
  "arelle_cython/arelle_c/ModelDocument.pxi",
  "arelle_cython/arelle_c/xerces.pxi",
  "stringsource",
  "arelle_cython/arelle.arelle_c.pyx",
  "type.pxd",
};

/* "xerces_ctypes.pxd":1
 * ctypedef unsigned long long int uint64_t             # <<<<<<<<<<<<<<
 * ctypedef uint64_t  XMLFilePos
 * ctypedef uint64_t  XMLFileLoc
 */
typedef unsigned PY_LONG_LONG __pyx_t_8arelle_c_13xerces_ctypes_uint64_t;

/* "xerces_ctypes.pxd":2
 * ctypedef unsigned long long int uint64_t
 * ctypedef uint64_t  XMLFilePos             # <<<<<<<<<<<<<<
 * ctypedef uint64_t  XMLFileLoc
 * ctypedef unsigned short XMLCh
 */
typedef __pyx_t_8arelle_c_13xerces_ctypes_uint64_t __pyx_t_8arelle_c_13xerces_ctypes_XMLFilePos;

/* "xerces_ctypes.pxd":3
 * ctypedef unsigned long long int uint64_t
 * ctypedef uint64_t  XMLFilePos
 * ctypedef uint64_t  XMLFileLoc             # <<<<<<<<<<<<<<
 * ctypedef unsigned short XMLCh
 * ctypedef unsigned char XMLByte
 */
typedef __pyx_t_8arelle_c_13xerces_ctypes_uint64_t __pyx_t_8arelle_c_13xerces_ctypes_XMLFileLoc;

/* "xerces_ctypes.pxd":4
 * ctypedef uint64_t  XMLFilePos
 * ctypedef uint64_t  XMLFileLoc
 * ctypedef unsigned short XMLCh             # <<<<<<<<<<<<<<
 * ctypedef unsigned char XMLByte
 * ctypedef size_t XMLSize_t
 */
typedef unsigned short __pyx_t_8arelle_c_13xerces_ctypes_XMLCh;

/* "xerces_ctypes.pxd":5
 * ctypedef uint64_t  XMLFileLoc
 * ctypedef unsigned short XMLCh
 * ctypedef unsigned char XMLByte             # <<<<<<<<<<<<<<
 * ctypedef size_t XMLSize_t
 */
typedef unsigned char __pyx_t_8arelle_c_13xerces_ctypes_XMLByte;

/* "xerces_ctypes.pxd":6
 * ctypedef unsigned short XMLCh
 * ctypedef unsigned char XMLByte
 * ctypedef size_t XMLSize_t             # <<<<<<<<<<<<<<
 */
typedef size_t __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t;

/*--- Type declarations ---*/
struct __pyx_obj_6arelle_8arelle_c_attrdict;
struct __pyx_obj_6arelle_8arelle_c_genobj;
struct __pyx_obj_6arelle_8arelle_c_Cntlr;
struct __pyx_obj_6arelle_8arelle_c_QName;
struct __pyx_obj_6arelle_8arelle_c_ModelXbrl;
struct __pyx_obj_6arelle_8arelle_c_ModelDocument;
struct __pyx_obj_6arelle_8arelle_c__Element;

/* "xerces_framework.pxd":7
 * from libcpp cimport bool
 * 
 * ctypedef RefVectorOf[XSAnnotation] XSAnnotationList             # <<<<<<<<<<<<<<
 * ctypedef RefVectorOf[XSAttributeUse] XSAttributeUseList
 * ctypedef RefVectorOf[XSFacet] XSFacetList
 */
typedef xercesc::RefVectorOf<xercesc::XSAnnotation>  __pyx_t_8arelle_c_16xerces_framework_XSAnnotationList;

/* "xerces_framework.pxd":8
 * 
 * ctypedef RefVectorOf[XSAnnotation] XSAnnotationList
 * ctypedef RefVectorOf[XSAttributeUse] XSAttributeUseList             # <<<<<<<<<<<<<<
 * ctypedef RefVectorOf[XSFacet] XSFacetList
 * ctypedef RefVectorOf[XSMultiValueFacet] XSMultiValueFacetList
 */
typedef xercesc::RefVectorOf<xercesc::XSAttributeUse>  __pyx_t_8arelle_c_16xerces_framework_XSAttributeUseList;

/* "xerces_framework.pxd":9
 * ctypedef RefVectorOf[XSAnnotation] XSAnnotationList
 * ctypedef RefVectorOf[XSAttributeUse] XSAttributeUseList
 * ctypedef RefVectorOf[XSFacet] XSFacetList             # <<<<<<<<<<<<<<
 * ctypedef RefVectorOf[XSMultiValueFacet] XSMultiValueFacetList
 * ctypedef RefVectorOf[XSNamespaceItem] XSNamespaceItemList
 */
typedef xercesc::RefVectorOf<xercesc::XSFacet>  __pyx_t_8arelle_c_16xerces_framework_XSFacetList;

/* "xerces_framework.pxd":10
 * ctypedef RefVectorOf[XSAttributeUse] XSAttributeUseList
 * ctypedef RefVectorOf[XSFacet] XSFacetList
 * ctypedef RefVectorOf[XSMultiValueFacet] XSMultiValueFacetList             # <<<<<<<<<<<<<<
 * ctypedef RefVectorOf[XSNamespaceItem] XSNamespaceItemList
 * ctypedef RefVectorOf[XSParticle] XSParticleList
 */
typedef xercesc::RefVectorOf<xercesc::XSMultiValueFacet>  __pyx_t_8arelle_c_16xerces_framework_XSMultiValueFacetList;

/* "xerces_framework.pxd":11
 * ctypedef RefVectorOf[XSFacet] XSFacetList
 * ctypedef RefVectorOf[XSMultiValueFacet] XSMultiValueFacetList
 * ctypedef RefVectorOf[XSNamespaceItem] XSNamespaceItemList             # <<<<<<<<<<<<<<
 * ctypedef RefVectorOf[XSParticle] XSParticleList
 * ctypedef RefVectorOf[XSSimpleTypeDefinition] XSSimpleTypeDefinitionList
 */
typedef xercesc::RefVectorOf<xercesc::XSNamespaceItem>  __pyx_t_8arelle_c_16xerces_framework_XSNamespaceItemList;

/* "xerces_framework.pxd":12
 * ctypedef RefVectorOf[XSMultiValueFacet] XSMultiValueFacetList
 * ctypedef RefVectorOf[XSNamespaceItem] XSNamespaceItemList
 * ctypedef RefVectorOf[XSParticle] XSParticleList             # <<<<<<<<<<<<<<
 * ctypedef RefVectorOf[XSSimpleTypeDefinition] XSSimpleTypeDefinitionList
 * ctypedef RefArrayVectorOf[XMLCh] StringList
 */
typedef xercesc::RefVectorOf<xercesc::XSParticle>  __pyx_t_8arelle_c_16xerces_framework_XSParticleList;

/* "xerces_framework.pxd":13
 * ctypedef RefVectorOf[XSNamespaceItem] XSNamespaceItemList
 * ctypedef RefVectorOf[XSParticle] XSParticleList
 * ctypedef RefVectorOf[XSSimpleTypeDefinition] XSSimpleTypeDefinitionList             # <<<<<<<<<<<<<<
 * ctypedef RefArrayVectorOf[XMLCh] StringList
 * 
 */
typedef xercesc::RefVectorOf<xercesc::XSSimpleTypeDefinition>  __pyx_t_8arelle_c_16xerces_framework_XSSimpleTypeDefinitionList;

/* "xerces_framework.pxd":14
 * ctypedef RefVectorOf[XSParticle] XSParticleList
 * ctypedef RefVectorOf[XSSimpleTypeDefinition] XSSimpleTypeDefinitionList
 * ctypedef RefArrayVectorOf[XMLCh] StringList             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "xercesc/framework/LocalFileInputSource.hpp" namespace "xercesc":
 */
typedef xercesc::RefArrayVectorOf<__pyx_t_8arelle_c_13xerces_ctypes_XMLCh>  __pyx_t_8arelle_c_16xerces_framework_StringList;
struct __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler;
struct __pyx_t_6arelle_8arelle_c_Namespace;
struct __pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler;
struct __pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler;
struct __pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver;
struct __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler;
struct __pyx_t_6arelle_8arelle_c__ContentHandler;
struct __pyx_t_6arelle_8arelle_c__LexicalHandler;
struct __pyx_t_6arelle_8arelle_c__ErrorHandler;
struct __pyx_t_6arelle_8arelle_c_eltDescEntry;
struct __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler;
struct __pyx_t_6arelle_8arelle_c__LXMLSAX2Resolver;
struct __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler : public xercesc::ErrorHandler, public xercesc::LexicalHandler, public xercesc::ContentHandler {
  virtual void characters(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const );
  virtual void endDocument(void);
  virtual void endElement(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void ignorableWhitespace(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const );
  virtual void processingInstruction(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void setDocumentLocator(xercesc::Locator const *const );
  virtual void startDocument(void);
  virtual void startElement(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, xercesc::Attributes const &);
  virtual void startPrefixMapping(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void endPrefixMapping(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void skippedEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void comment(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const );
  virtual void endCDATA(void);
  virtual void endDTD(void);
  virtual void endEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void startCDATA(void);
  virtual void startDTD(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void startEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void elementDecl(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void logError(xercesc::SAXParseException const &, PyObject *);
  virtual void error(xercesc::SAXParseException const &);
  virtual void fatalError(xercesc::SAXParseException const &);
  virtual void warning(xercesc::SAXParseException const &);
  virtual void resetErrors(void);
  virtual ~__pyx_t_6arelle_8arelle_c_TemplateSAX2Handler() { }};

/* "arelle_cython/arelle_c/ModelXbrl.pxi":21
 * from cpython.mem cimport PyMem_Malloc, PyMem_Realloc, PyMem_Free
 * 
 * cdef struct Namespace:             # <<<<<<<<<<<<<<
 *     void* pyNamespaceUri
 *     int   xercesUriId
 */
struct __pyx_t_6arelle_8arelle_c_Namespace {
  void *pyNamespaceUri;
  int xercesUriId;
};
struct __pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler : public __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler {

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":205
 *         sax2xmlRdrImpl.setXMLEntityResolver(modelXbrlEntityResolver)
 * 
 * cdef cppclass ModelXbrlErrorHandler(TemplateSAX2Handler):             # <<<<<<<<<<<<<<
 *     void* _modelXbrl
 *     XMLCh** eltQNames
 */
  void *_modelXbrl;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh **eltQNames;
  unsigned int eltDepth;
   __pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler(void);
  virtual void logError(xercesc::SAXParseException const &, PyObject *);
  virtual void error(xercesc::SAXParseException const &);
  virtual void fatalError(xercesc::SAXParseException const &);
  virtual void warning(xercesc::SAXParseException const &);
  virtual void handlePyError(PyObject *);
  virtual ~__pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler() { }};
struct __pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler : public __pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler {

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":263
 *         pass # implement in subclasses
 * 
 * cdef cppclass ModelXbrlIdentificationSAX2Handler(ModelXbrlErrorHandler):             # <<<<<<<<<<<<<<
 *     void* pyIdentificationResultsPtr
 *     bool isXbrl, isXsd, isHtml, isInline, isIdentified
 */
  void *pyIdentificationResultsPtr;
  bool isXbrl;
  bool isXsd;
  bool isHtml;
  bool isInline;
  bool isIdentified;
  bool hasIxNamespace;
  bool hasIx11Namespace;
   __pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler(void *);
  virtual void close(void);
  virtual void endElement(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void startElement(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, xercesc::Attributes const &);
  virtual void startPrefixMapping(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void handlePyError(PyObject *);
  virtual ~__pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler() { }};
struct __pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver : public xercesc::XMLEntityResolver {

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":374
 *         pyIdentificationResults.errors.append(pyError)
 * 
 * cdef cppclass ModelXbrlEntityResolver(XMLEntityResolver):             # <<<<<<<<<<<<<<
 *     void* modelXbrlPtr
 * 
 */
  void *modelXbrlPtr;
   __pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver(void *);
  virtual PyObject *close(void);
  virtual xercesc::InputSource *resolveEntity(xercesc::XMLResourceIdentifier *);
  virtual ~__pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver() { }};
struct __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler : public __pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler {

  /* "arelle_cython/arelle_c/ModelDocument.pxi":58
 * 
 * 
 * cdef cppclass ModelDocumentSAX2Handler(ModelXbrlErrorHandler):             # <<<<<<<<<<<<<<
 *     void* modelXbrlPtr
 *     void* modelDocumentPtr
 */
  void *modelXbrlPtr;
  void *modelDocumentPtr;
  xercesc::Locator *saxLocator;
   __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler(void *);
  virtual void setModelDocument(void *);
  virtual void close(void);
  virtual void setDocumentLocator(xercesc::Locator const *const );
  virtual void handlePyError(PyObject *);
  virtual ~__pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler() { }};
struct __pyx_t_6arelle_8arelle_c__ContentHandler : public xercesc::ContentHandler {

  /* "arelle_cython/arelle_c/xerces.pxi":202
 * cdef char* lastParsedQName = NULL
 * 
 * cdef cppclass _ContentHandler(ContentHandler):             # <<<<<<<<<<<<<<
 *     int classVar
 * 
 */
  int classVar;
   __pyx_t_6arelle_8arelle_c__ContentHandler(int);
  virtual void characters(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const );
  virtual void endDocument(void);
  virtual void endElement(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void ignorableWhitespace(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const );
  virtual void processingInstruction(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void setDocumentLocator(xercesc::Locator const *const );
  virtual void startDocument(void);
  virtual void startElement(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, xercesc::Attributes const &);
  virtual void startPrefixMapping(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void endPrefixMapping(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void skippedEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual ~__pyx_t_6arelle_8arelle_c__ContentHandler() { }};
struct __pyx_t_6arelle_8arelle_c__LexicalHandler : public xercesc::LexicalHandler {

  /* "arelle_cython/arelle_c/xerces.pxi":268
 *         print("skippedEntity: {}".format(transcode(name)))
 * 
 * cdef cppclass _LexicalHandler(LexicalHandler):             # <<<<<<<<<<<<<<
 *     int classVar
 * 
 */
  int classVar;
   __pyx_t_6arelle_8arelle_c__LexicalHandler(int);
  virtual void comment(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const );
  virtual void endCDATA(void);
  virtual void endDTD(void);
  virtual void endEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void startCDATA(void);
  virtual void startDTD(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void startEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void elementDecl(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual ~__pyx_t_6arelle_8arelle_c__LexicalHandler() { }};
struct __pyx_t_6arelle_8arelle_c__ErrorHandler : public xercesc::ErrorHandler {

  /* "arelle_cython/arelle_c/xerces.pxi":292
 *         print("elementDecl")
 * 
 * cdef cppclass _ErrorHandler(ErrorHandler):             # <<<<<<<<<<<<<<
 *     _ErrorHandler() except +:
 *         print("_ErrorHandler initialization")
 */
   __pyx_t_6arelle_8arelle_c__ErrorHandler(void);
  virtual void error(xercesc::SAXParseException const &);
  virtual void fatalError(xercesc::SAXParseException const &);
  virtual void warning(xercesc::SAXParseException const &);
  virtual void resetErrors(void);
  virtual ~__pyx_t_6arelle_8arelle_c__ErrorHandler() { }};

/* "arelle_cython/arelle_c/xerces.pxi":319
 *         print("resetErrors")
 * 
 * cdef struct eltDescEntry:             # <<<<<<<<<<<<<<
 *     XMLCh* lastElementQname
 *     char* lastEltPyQname
 */
struct __pyx_t_6arelle_8arelle_c_eltDescEntry {
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *lastElementQname;
  char *lastEltPyQname;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *lastChars;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t lastLength;
};
struct __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler : public xercesc::ErrorHandler, public xercesc::LexicalHandler, public xercesc::ContentHandler {

  /* "arelle_cython/arelle_c/xerces.pxi":327
 * cdef char* EMPTYSTR = b""
 * 
 * cdef cppclass _LXMLSAX2Handler(ErrorHandler, LexicalHandler, ContentHandler):             # <<<<<<<<<<<<<<
 *     #Attributes& lastElementAttrs
 *     unsigned int eltDepth
 */
  unsigned int eltDepth;
  struct __pyx_t_6arelle_8arelle_c_eltDescEntry *eltDescs;
  void *pyRootDictPtr;
   __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler(void *);
  virtual PyObject *close(void);
  virtual void characters(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const );
  virtual void endDocument(void);
  virtual void endElement(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void ignorableWhitespace(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const );
  virtual void processingInstruction(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void setDocumentLocator(xercesc::Locator const *const );
  virtual void startDocument(void);
  virtual void startElement(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, xercesc::Attributes const &);
  virtual void startPrefixMapping(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void endPrefixMapping(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void skippedEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void comment(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const );
  virtual void endCDATA(void);
  virtual void endDTD(void);
  virtual void endEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void startCDATA(void);
  virtual void startDTD(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void startEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void elementDecl(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *);
  virtual void error(xercesc::SAXParseException const &);
  virtual void fatalError(xercesc::SAXParseException const &);
  virtual void warning(xercesc::SAXParseException const &);
  virtual void resetErrors(void);
  virtual ~__pyx_t_6arelle_8arelle_c__LXMLSAX2Handler() { }};
struct __pyx_t_6arelle_8arelle_c__LXMLSAX2Resolver : public xercesc::EntityResolver {
  virtual xercesc::InputSource *resolveEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *const , __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *const );
  virtual ~__pyx_t_6arelle_8arelle_c__LXMLSAX2Resolver() { }};

/* "arelle_cython/arelle_c/utils.pxi":8
 * from libcpp.string cimport string
 * 
 * cdef class attrdict(dict):             # <<<<<<<<<<<<<<
 *     """ utility to simulate an dictionary with named fields from the kwargs """
 *     cdef dict __dict__
 */
struct __pyx_obj_6arelle_8arelle_c_attrdict {
  PyDictObject __pyx_base;
  PyObject *__dict__;
};


/* "arelle_cython/arelle_c/utils.pxi":15
 *         self.__dict__ = self
 * 
 * cdef class genobj:             # <<<<<<<<<<<<<<
 *     """ utility to simulate an generic object with named fields from the kwargs """
 *     cdef dict __dict__
 */
struct __pyx_obj_6arelle_8arelle_c_genobj {
  PyObject_HEAD
  PyObject *__dict__;
};


/* "arelle_cython/arelle_c/Cntlr.pxi":9
 * 
 * 
 * cdef class Cntlr:             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
struct __pyx_obj_6arelle_8arelle_c_Cntlr {
  PyObject_HEAD
};


/* "arelle_cython/arelle_c/ModelValue.pxi":4
 * from cpython.object cimport PyObject, PyObject_Hash, PyObject_Length
 * 
 * cdef class QName:             # <<<<<<<<<<<<<<
 *     cdef long qnameValueHash
 *     cdef readonly unicode namespaceURI
 */
struct __pyx_obj_6arelle_8arelle_c_QName {
  PyObject_HEAD
  long qnameValueHash;
  PyObject *namespaceURI;
  PyObject *prefix;
  PyObject *localName;
};


/* "arelle_cython/arelle_c/ModelXbrl.pxi":25
 *     int   xercesUriId
 * 
 * cdef class ModelXbrl:             # <<<<<<<<<<<<<<
 *     cdef readonly object modelManager
 *     cdef readonly object cntlr
 */
struct __pyx_obj_6arelle_8arelle_c_ModelXbrl {
  PyObject_HEAD
  struct __pyx_vtabstruct_6arelle_8arelle_c_ModelXbrl *__pyx_vtab;
  PyObject *modelManager;
  PyObject *cntlr;
  PyObject *urlDocs;
  PyObject *mappedUrls;
  xercesc::SAX2XMLReader *sax2_parser;
  xercesc::XercesDOMParser *dom_parser;
  std::vector<struct __pyx_t_6arelle_8arelle_c_Namespace *>  namespaces;
  PyObject *internedStrings;
};


/* "arelle_cython/arelle_c/ModelDocument.pxi":4
 * from arelle_c.xerces_uni cimport fgXercesSchemaExternalSchemaLocation
 * 
 * cdef class ModelDocument:             # <<<<<<<<<<<<<<
 *     cdef readonly ModelXbrl modelXbrl
 *     cdef readonly int type
 */
struct __pyx_obj_6arelle_8arelle_c_ModelDocument {
  PyObject_HEAD
  struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *modelXbrl;
  int type;
  PyObject *url;
  PyObject *filepath;
  bool isGrammarLoadedIntoModel;
  PyObject *targetNamespace;
  PyObject *targetNamespacePrefix;
  PyObject *xmlRootElement;
};


/* "arelle_cython/arelle_c/xerces.pxi":60
 *     print("size {} {}".format(sizeof(pyListTest), pyListTest))
 * 
 * cdef class _Element:             # <<<<<<<<<<<<<<
 *     cdef DOMNode* _c_node
 *     property tag:
 */
struct __pyx_obj_6arelle_8arelle_c__Element {
  PyObject_HEAD
  xercesc::DOMNode *_c_node;
};



/* "arelle_cython/arelle_c/ModelXbrl.pxi":25
 *     int   xercesUriId
 * 
 * cdef class ModelXbrl:             # <<<<<<<<<<<<<<
 *     cdef readonly object modelManager
 *     cdef readonly object cntlr
 */

struct __pyx_vtabstruct_6arelle_8arelle_c_ModelXbrl {
  PyObject *(*internString)(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6arelle_8arelle_c_ModelXbrl *__pyx_vtabptr_6arelle_8arelle_c_ModelXbrl;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod2.proto */
static PyObject* __Pyx_PyObject_CallMethod2(PyObject* obj, PyObject* method_name, PyObject* arg1, PyObject* arg2);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_xercesc_3a__3a_XMLResourceIdentifier_3a__3a_ResourceIdentifierType(xercesc::XMLResourceIdentifier::ResourceIdentifierType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_6arelle_8arelle_c_9ModelXbrl_internString(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self, PyObject *__pyx_v_str, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'arelle_c.xerces_ctypes' */

/* Module declarations from 'arelle_c.xerces_framework_memory_manager' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'arelle_c.xerces_sax' */

/* Module declarations from 'arelle_c.xerces_util' */

/* Module declarations from 'arelle_c.xerces_framework' */

/* Module declarations from 'arelle_c.xerces_validators' */

/* Module declarations from 'arelle_c.xerces_sax2' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'arelle_c.xerces_dom' */

/* Module declarations from 'arelle_c.xerces_parsers' */

/* Module declarations from 'arelle_c.xerces_uni' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'arelle.arelle_c' */
static PyTypeObject *__pyx_ptype_6arelle_8arelle_c_attrdict = 0;
static PyTypeObject *__pyx_ptype_6arelle_8arelle_c_genobj = 0;
static PyTypeObject *__pyx_ptype_6arelle_8arelle_c_Cntlr = 0;
static PyTypeObject *__pyx_ptype_6arelle_8arelle_c_QName = 0;
static PyTypeObject *__pyx_ptype_6arelle_8arelle_c_ModelXbrl = 0;
static PyTypeObject *__pyx_ptype_6arelle_8arelle_c_ModelDocument = 0;
static PyTypeObject *__pyx_ptype_6arelle_8arelle_c__Element = 0;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_nsXsd;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_nsXbrli;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_nsLink;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_nsXlink;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_nsXhtml;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_nsIxbrl;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_nsIxbrl11;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_nsVer;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_nsRegistry;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_nsNoNamespace;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnXbrl;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnLinkbase;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnSchema;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnXhtml;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnHtml;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnLinkbaseRef;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnSchemaRef;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnRoleRef;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnArcroleRef;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnHref;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnReport;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnRss;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnTestcases;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnDocumentation;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnTestSuite;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnTestcase;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnTestSet;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnRegistry;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnPtvl;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnFacts;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_lnTargetNamespace;
static __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_6arelle_8arelle_c_xmlnsPrefix;
static PyObject *__pyx_v_6arelle_8arelle_c_schemaLocationsListForLinkbases = 0;
static bool __pyx_v_6arelle_8arelle_c__xerces_initialized;
static bool __pyx_v_6arelle_8arelle_c__xerces_terminated;
static xercesc::XMLGrammarPool *__pyx_v_6arelle_8arelle_c_xerces_grammar_pool;
static bool __pyx_v_6arelle_8arelle_c__initialized;
static bool __pyx_v_6arelle_8arelle_c__terminated;
static void *__pyx_v_6arelle_8arelle_c_pyListTestPtr;
static PyObject *__pyx_v_6arelle_8arelle_c__list = 0;
static char *__pyx_v_6arelle_8arelle_c_lastParsedQName;
static char *__pyx_v_6arelle_8arelle_c_EMPTYSTR;
static PyObject *__pyx_f_6arelle_8arelle_c_initialize_constants(void); /*proto*/
static xercesc::InputSource *__pyx_f_6arelle_8arelle_c_fileDescInputSource(PyObject *); /*proto*/
static PyObject *__pyx_f_6arelle_8arelle_c_getAttrValue(xercesc::Attributes const &, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *); /*proto*/
static PyObject *__pyx_f_6arelle_8arelle_c__element(xercesc::DOMNode *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "arelle.arelle_c"
int __pyx_module_is_main_arelle__arelle_c = 0;

/* Implementation of 'arelle.arelle_c' */
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_s[] = "s";
static const char __pyx_k__3[] = "{{{}}}{}";
static const char __pyx_k__4[] = "";
static const char __pyx_k__5[] = ":";
static const char __pyx_k__8[] = "#";
static const char __pyx_k_eq[] = "__eq__";
static const char __pyx_k_ns[] = "ns";
static const char __pyx_k__10[] = " ";
static const char __pyx_k__15[] = "{";
static const char __pyx_k__16[] = "}";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_c_s[] = "c_s";
static const char __pyx_k_doc[] = "doc";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_rss[] = "rss";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_tag[] = "tag {}";
static const char __pyx_k_url[] = "url";
static const char __pyx_k_done[] = "done";
static const char __pyx_k_fasb[] = "fasb";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_null[] = "null";
static const char __pyx_k_root[] = "root";
static const char __pyx_k_size[] = "size {} {}";
static const char __pyx_k_test[] = "test";
static const char __pyx_k_text[] = "@text";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_ERROR[] = "ERROR";
static const char __pyx_k_bTrue[] = "bTrue";
static const char __pyx_k_bytes[] = "bytes";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_cntlr[] = "cntlr";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_nsNbr[] = "nsNbr";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_std_s[] = "std_s";
static const char __pyx_k_token[] = "token";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_xhtml[] = "xhtml";
static const char __pyx_k_SIMPLE[] = "SIMPLE";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_byte_s[] = "byte_s";
static const char __pyx_k_column[] = "column";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_endDTD[] = "endDTD";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_ignore[] = "ignore";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_inpSrc[] = "inpSrc";
static const char __pyx_k_ns_URI[] = "ns URI {}";
static const char __pyx_k_parser[] = "parser";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_schema[] = "schema";
static const char __pyx_k_test_2[] = "__test__";
static const char __pyx_k_trace1[] = "trace1 {}";
static const char __pyx_k_trace2[] = "trace2 {}";
static const char __pyx_k_trace3[] = "trace3";
static const char __pyx_k_trace4[] = "trace4";
static const char __pyx_k_trace5[] = "trace5";
static const char __pyx_k_trace6[] = "trace6";
static const char __pyx_k_trace7[] = "trace7";
static const char __pyx_k_trace8[] = "trace8";
static const char __pyx_k_type_2[] = "   type {}";
static const char __pyx_k_type_3[] = "type {} {} {}";
static const char __pyx_k_COMPLEX[] = "COMPLEX";
static const char __pyx_k_WARNING[] = "WARNING";
static const char __pyx_k_comment[] = "comment {}";
static const char __pyx_k_domImpl[] = "domImpl";
static const char __pyx_k_element[] = "element";
static const char __pyx_k_ignore2[] = "ignore2";
static const char __pyx_k_message[] = "message";
static const char __pyx_k_trace10[] = "trace10";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_xsModel[] = "xsModel";
static const char __pyx_k_CRITICAL[] = "CRITICAL";
static const char __pyx_k_UTF_16LE[] = "UTF_16LE";
static const char __pyx_k_classVar[] = "classVar {}";
static const char __pyx_k_eltdescs[] = "eltdescs {}";
static const char __pyx_k_endCDATA[] = "endCDATA";
static const char __pyx_k_filepath[] = "filepath";
static const char __pyx_k_fromfile[] = "fromfile";
static const char __pyx_k_instFile[] = "instFile";
static const char __pyx_k_instance[] = "instance";
static const char __pyx_k_linkbase[] = "linkbase";
static const char __pyx_k_loc_name[] = "loc name {}";
static const char __pyx_k_no_types[] = "no types";
static const char __pyx_k_not_null[] = "not null";
static const char __pyx_k_startDTD[] = "startDTD";
static const char __pyx_k_targetNS[] = "targetNS";
static const char __pyx_k_testcase[] = "testcase";
static const char __pyx_k_testsax2[] = "testsax2";
static const char __pyx_k_trace1_2[] = "trace1";
static const char __pyx_k_trace2_2[] = "trace2";
static const char __pyx_k_txmyFile[] = "txmyFile";
static const char __pyx_k_validate[] = "validate";
static const char __pyx_k_xbrl_org[] = "xbrl.org";
static const char __pyx_k_abcdefghi[] = "abcdefghi";
static const char __pyx_k_element_2[] = "element {} {}";
static const char __pyx_k_localName[] = "localName";
static const char __pyx_k_modelXbrl[] = "modelXbrl";
static const char __pyx_k_nameSpace[] = "nameSpace";
static const char __pyx_k_namespace[] = "namespace {}";
static const char __pyx_k_partition[] = "partition";
static const char __pyx_k_terminate[] = "terminate";
static const char __pyx_k_xmlChFile[] = "xmlChFile";
static const char __pyx_k_xsElement[] = "xsElement";
static const char __pyx_k_xsObjects[] = "xsObjects";
static const char __pyx_k_annotation[] = "annotation={}";
static const char __pyx_k_classVar_2[] = "classVar";
static const char __pyx_k_endElement[] = "endElement";
static const char __pyx_k_fromstring[] = "fromstring";
static const char __pyx_k_initialize[] = "initialize";
static const char __pyx_k_namespaces[] = "namespaces";
static const char __pyx_k_pyFileDesc[] = "pyFileDesc";
static const char __pyx_k_pyListTest[] = "pyListTest";
static const char __pyx_k_pyRootDict[] = "pyRootDict";
static const char __pyx_k_pyRootList[] = "pyRootList {}";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_schemaRefs[] = "schemaRefs";
static const char __pyx_k_setdefault[] = "setdefault";
static const char __pyx_k_startCDATA[] = "startCDATA";
static const char __pyx_k_testschema[] = "testschema";
static const char __pyx_k_www_w3_org[] = "www.w3.org";
static const char __pyx_k_OrderedDict[] = "OrderedDict";
static const char __pyx_k_adoptBuffer[] = "adoptBuffer";
static const char __pyx_k_annotations[] = "annotations";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_elementDecl[] = "elementDecl";
static const char __pyx_k_endDocument[] = "endDocument";
static const char __pyx_k_grammarPool[] = "grammarPool";
static const char __pyx_k_instDocFile[] = "instDocFile";
static const char __pyx_k_no_elements[] = "no elements";
static const char __pyx_k_parse_first[] = "parse first {}";
static const char __pyx_k_resetErrors[] = "resetErrors";
static const char __pyx_k_startEntity[] = "startEntity";
static const char __pyx_k_unknown_XML[] = "unknown XML";
static const char __pyx_k_annotation_2[] = "    annotation{} ={}";
static const char __pyx_k_annotation_3[] = "    annotation={}";
static const char __pyx_k_annotation_4[] = "annotation";
static const char __pyx_k_errorHandler[] = "errorHandler";
static const char __pyx_k_implFeatures[] = "implFeatures";
static const char __pyx_k_internString[] = "internString";
static const char __pyx_k_linkbaseRefs[] = "linkbaseRefs";
static const char __pyx_k_modelManager[] = "modelManager";
static const char __pyx_k_namespaceURI[] = "namespaceURI";
static const char __pyx_k_null_grammar[] = "null grammar";
static const char __pyx_k_object_count[] = "object {} count {}";
static const char __pyx_k_arelle_xerces[] = "arelle:xerces";
static const char __pyx_k_internStrings[] = "internStrings";
static const char __pyx_k_namespaceItem[] = "namespaceItem";
static const char __pyx_k_namespace_doc[] = "namespace doc {}";
static const char __pyx_k_pyRootDictPtr[] = "pyRootDictPtr";
static const char __pyx_k_schemaGrammar[] = "schemaGrammar";
static const char __pyx_k_skippedEntity[] = "skippedEntity: {}";
static const char __pyx_k_startDocument[] = "startDocument";
static const char __pyx_k_testschemaDOM[] = "testschemaDOM";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_annotationText[] = "annotationText";
static const char __pyx_k_contentHandler[] = "contentHandler";
static const char __pyx_k_endEntity_name[] = "endEntity name: {}";
static const char __pyx_k_implFeatures_2[] = "_implFeatures";
static const char __pyx_k_lexicalHandler[] = "lexicalHandler";
static const char __pyx_k_lxmlSaxHandler[] = "lxmlSaxHandler";
static const char __pyx_k_namespaceItems[] = "namespaceItems";
static const char __pyx_k_namespacesSize[] = "namespacesSize";
static const char __pyx_k_openSax2Parser[] = "openSax2Parser";
static const char __pyx_k_qnameValueHash[] = "qnameValueHash";
static const char __pyx_k_schemaLocation[] = "schemaLocation";
static const char __pyx_k_updatedXSModel[] = "updatedXSModel";
static const char __pyx_k_arelle_arelle_c[] = "arelle.arelle_c";
static const char __pyx_k_doneParsedToken[] = "doneParsedToken {}";
static const char __pyx_k_lastParsedToken[] = "lastParsedToken {}";
static const char __pyx_k_lxmlSaxResolver[] = "lxmlSaxResolver";
static const char __pyx_k_modelWasChanged[] = "modelWasChanged";
static const char __pyx_k_namespaces_size[] = "namespaces size {}";
static const char __pyx_k_revectored_file[] = "  revectored file {}";
static const char __pyx_k_targetNamespace[] = "targetNamespace";
static const char __pyx_k_testcases_index[] = "testcases index";
static const char __pyx_k_xsModel_is_null[] = "xsModel is null";
static const char __pyx_k_input_string_len[] = "input string len {}";
static const char __pyx_k_nonDtsSchemaRefs[] = "nonDtsSchemaRefs";
static const char __pyx_k_parsing_instance[] = "parsing instance";
static const char __pyx_k_target_namespace[] = "target namespace {}";
static const char __pyx_k_transcoded_value[] = "transcoded value {}";
static const char __pyx_k_xsTypeDefinition[] = "xsTypeDefinition";
static const char __pyx_k_hello_from_Cython[] = "hello from Cython";
static const char __pyx_k_loadGrammar_start[] = "loadGrammar start";
static const char __pyx_k_trace2_domImpl_is[] = "trace2 domImpl is {}";
static const char __pyx_k_versioning_report[] = "versioning report";
static const char __pyx_k_annotation_is_NULL[] = "annotation {} is NULL";
static const char __pyx_k_namespace_doc_null[] = "namespace doc null";
static const char __pyx_k_namespace_elements[] = "namespace {} {} elements";
static const char __pyx_k_ignorableWhitespace[] = "ignorableWhitespace";
static const char __pyx_k_schemaLocationsList[] = "schemaLocationsList";
static const char __pyx_k_testsax2incremental[] = "testsax2incremental";
static const char __pyx_k_xmlChSchemaLocation[] = "xmlChSchemaLocation";
static const char __pyx_k_LXMLSAX2Handler_done[] = "_LXMLSAX2Handler done";
static const char __pyx_k_annotation_is_NULL_2[] = "annotation is NULL";
static const char __pyx_k_characters_len_value[] = "characters len: {} value: {}";
static const char __pyx_k_inline_XBRL_instance[] = "inline XBRL instance";
static const char __pyx_k_lastParsedToken_null[] = "lastParsedToken null";
static const char __pyx_k_nameSpaceDocLocation[] = "nameSpaceDocLocation";
static const char __pyx_k_null_annotation_text[] = "null annotation text";
static const char __pyx_k_loadGrammar_completed[] = "loadGrammar completed";
static const char __pyx_k_namespace_annotations[] = "namespace {} annotations {}";
static const char __pyx_k_namespace_no_elements[] = "namespace {} no elements";
static const char __pyx_k_resolveEntity_pub_sys[] = "resolveEntity pub {} sys {}";
static const char __pyx_k_targetNamespacePrefix[] = "targetNamespacePrefix";
static const char __pyx_k_xerces_resolve_entity[] = "xerces_resolve_entity";
static const char __pyx_k_null_annotation_string[] = "    null annotation string {}";
static const char __pyx_k_endPrefixMapping_prefix[] = "endPrefixMapping prefix: {}";
static const char __pyx_k_error_msg_line_col_file[] = "error msg={} line={} col={} file={}";
static const char __pyx_k_fatal_error_msg_line_col[] = "fatal error msg={} line={} col={}";
static const char __pyx_k_null_annotation_string_2[] = "    null annotation string";
static const char __pyx_k_LXMLSAX2Handler_destructor[] = "_LXMLSAX2Handler destructor";
static const char __pyx_k_http_www_w3_org_1999_xlink[] = "http://www.w3.org/1999/xlink";
static const char __pyx_k_http_xbrl_org_2008_generic[] = "http://xbrl.org/2008/generic";
static const char __pyx_k_load_schema_grammar_ns_doc[] = "load schema grammar ns {} doc {}";
static const char __pyx_k_namespaceDocumentLocations[] = "namespaceDocumentLocations";
static const char __pyx_k_xerces_already_initialized[] = "xerces already initialized";
static const char __pyx_k_ErrorHandler_initialization[] = "_ErrorHandler initialization";
static const char __pyx_k_ContentHandler_initialization[] = "_ContentHandler initialization {}";
static const char __pyx_k_LexicalHandler_initialization[] = "_LexicalHandler initialization {}";
static const char __pyx_k_namespace_locations_list_null[] = "namespace locations list null";
static const char __pyx_k_startPrefixMapping_prefix_uri[] = "startPrefixMapping prefix: {} uri: {}";
static const char __pyx_k_LXMLSAX2Handler_initialization[] = "_LXMLSAX2Handler initialization";
static const char __pyx_k_conversions_strlen_c1_c2_s1_s2[] = "conversions strlen {} c1 {} c2 {} s1 {} s2 {}";
static const char __pyx_k_in_memory_no_filename_provided[] = "(in memory, no filename provided, no xml base or relative hrefs possible)";
static const char __pyx_k_setDocumentLocator_pubId_sysId[] = "setDocumentLocator pubId: {} sysId: {} ";
static const char __pyx_k_Users_hermf_Documents_mvsl_proj[] = "/Users/hermf/Documents/mvsl/projects/Arelle/ArelleProject/src-cython/arelle_cython/arelle_c/xerces.pxi";
static const char __pyx_k_error_msg_line_col_file_elt_val[] = "error msg={} line={} col={} file={} elt={} val={}";
static const char __pyx_k_http_www_xbrl_org_2003_linkbase[] = "http://www.xbrl.org/2003/linkbase";
static const char __pyx_k_skipping_load_schema_grammar_ns[] = "skipping load schema grammar ns {} doc {}";
static const char __pyx_k_arelle_loadSchemaGrammarNull_sch[] = "arelle:loadSchemaGrammarNull schema grammar not loaded, null results";
static const char __pyx_k_arelle_loadSchemaNamespaceConfli[] = "arelle:loadSchemaNamespaceConflict schema grammar namespace {} discovery namespace {}";
static const char __pyx_k_http_www_xbrl_org_2003_xbrl_link[] = "http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd";
static const char __pyx_k_http_www_xbrl_org_2003_xlink_200[] = "http://www.xbrl.org/2003/xlink-2003-12-31.xsd";
static const char __pyx_k_http_www_xbrl_org_2008_generic_l[] = "http://www.xbrl.org/2008/generic-link.xsd";
static const char __pyx_k_http_www_xbrl_org_2008_inlineXBR[] = "http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd";
static const char __pyx_k_http_www_xbrl_org_2013_inlineXBR[] = "http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd";
static const char __pyx_k_initialized_flag_terminated_flag[] = "initialized flag {} terminated flag {}";
static const char __pyx_k_processingInstruction_target_dat[] = "processingInstruction target: {} data: {}";
static const char __pyx_k_setupSAX2parser_DOM_parser_is_al[] = "setupSAX2parser: DOM parser is already set up";
static const char __pyx_k_startElement_trace1_localname_ra[] = "startElement trace1 localname raw {}";
static const char __pyx_k_startElement_uri_localname_qname[] = "startElement uri: {} localname: {} qname: {} attrs: {}";
static const char __pyx_k_xerces_terminated_or_not_started[] = "xerces terminated or not started";
static const char __pyx_k_xerces_termination_but_not_initi[] = "xerces termination but not initialized";
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_n_s_COMPLEX;
static PyObject *__pyx_n_u_CRITICAL;
static PyObject *__pyx_kp_s_ContentHandler_initialization;
static PyObject *__pyx_n_u_ERROR;
static PyObject *__pyx_kp_s_ErrorHandler_initialization;
static PyObject *__pyx_kp_s_LXMLSAX2Handler_destructor;
static PyObject *__pyx_kp_s_LXMLSAX2Handler_done;
static PyObject *__pyx_kp_s_LXMLSAX2Handler_initialization;
static PyObject *__pyx_kp_s_LexicalHandler_initialization;
static PyObject *__pyx_n_s_OrderedDict;
static PyObject *__pyx_n_s_SIMPLE;
static PyObject *__pyx_n_s_UTF_16LE;
static PyObject *__pyx_kp_s_Users_hermf_Documents_mvsl_proj;
static PyObject *__pyx_n_u_WARNING;
static PyObject *__pyx_kp_s__10;
static PyObject *__pyx_kp_b__15;
static PyObject *__pyx_kp_b__16;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_kp_s__4;
static PyObject *__pyx_kp_s__5;
static PyObject *__pyx_kp_s__8;
static PyObject *__pyx_n_s_abcdefghi;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_adoptBuffer;
static PyObject *__pyx_kp_s_annotation;
static PyObject *__pyx_n_s_annotationText;
static PyObject *__pyx_kp_s_annotation_2;
static PyObject *__pyx_kp_s_annotation_3;
static PyObject *__pyx_n_s_annotation_4;
static PyObject *__pyx_kp_s_annotation_is_NULL;
static PyObject *__pyx_kp_s_annotation_is_NULL_2;
static PyObject *__pyx_n_s_annotations;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arelle_arelle_c;
static PyObject *__pyx_kp_s_arelle_loadSchemaGrammarNull_sch;
static PyObject *__pyx_kp_s_arelle_loadSchemaNamespaceConfli;
static PyObject *__pyx_kp_s_arelle_xerces;
static PyObject *__pyx_n_s_bTrue;
static PyObject *__pyx_n_s_byte_s;
static PyObject *__pyx_n_s_bytes;
static PyObject *__pyx_n_s_c_s;
static PyObject *__pyx_kp_s_characters_len_value;
static PyObject *__pyx_kp_s_classVar;
static PyObject *__pyx_n_s_classVar_2;
static PyObject *__pyx_n_s_clear;
static PyObject *__pyx_n_s_cntlr;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_column;
static PyObject *__pyx_kp_s_comment;
static PyObject *__pyx_n_s_contentHandler;
static PyObject *__pyx_kp_s_conversions_strlen_c1_c2_s1_s2;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_domImpl;
static PyObject *__pyx_n_s_done;
static PyObject *__pyx_kp_s_doneParsedToken;
static PyObject *__pyx_n_s_element;
static PyObject *__pyx_n_s_elementDecl;
static PyObject *__pyx_kp_s_element_2;
static PyObject *__pyx_kp_s_eltdescs;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_endCDATA;
static PyObject *__pyx_n_s_endDTD;
static PyObject *__pyx_n_s_endDocument;
static PyObject *__pyx_n_s_endElement;
static PyObject *__pyx_kp_s_endEntity_name;
static PyObject *__pyx_kp_s_endPrefixMapping_prefix;
static PyObject *__pyx_n_s_eq;
static PyObject *__pyx_n_s_errorHandler;
static PyObject *__pyx_kp_s_error_msg_line_col_file;
static PyObject *__pyx_kp_s_error_msg_line_col_file_elt_val;
static PyObject *__pyx_n_s_errors;
static PyObject *__pyx_n_s_fasb;
static PyObject *__pyx_kp_s_fatal_error_msg_line_col;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filepath;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fromfile;
static PyObject *__pyx_n_s_fromstring;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_grammarPool;
static PyObject *__pyx_kp_s_hello_from_Cython;
static PyObject *__pyx_kp_s_http_www_w3_org_1999_xlink;
static PyObject *__pyx_kp_s_http_www_xbrl_org_2003_linkbase;
static PyObject *__pyx_kp_s_http_www_xbrl_org_2003_xbrl_link;
static PyObject *__pyx_kp_s_http_www_xbrl_org_2003_xlink_200;
static PyObject *__pyx_kp_s_http_www_xbrl_org_2008_generic_l;
static PyObject *__pyx_kp_s_http_www_xbrl_org_2008_inlineXBR;
static PyObject *__pyx_kp_s_http_www_xbrl_org_2013_inlineXBR;
static PyObject *__pyx_kp_s_http_xbrl_org_2008_generic;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_ignorableWhitespace;
static PyObject *__pyx_n_s_ignore;
static PyObject *__pyx_n_s_ignore2;
static PyObject *__pyx_n_s_implFeatures;
static PyObject *__pyx_n_s_implFeatures_2;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_kp_b_in_memory_no_filename_provided;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_initialize;
static PyObject *__pyx_kp_s_initialized_flag_terminated_flag;
static PyObject *__pyx_kp_u_inline_XBRL_instance;
static PyObject *__pyx_n_s_inpSrc;
static PyObject *__pyx_kp_s_input_string_len;
static PyObject *__pyx_n_s_instDocFile;
static PyObject *__pyx_n_s_instFile;
static PyObject *__pyx_n_u_instance;
static PyObject *__pyx_n_s_internString;
static PyObject *__pyx_n_s_internStrings;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_kp_s_lastParsedToken;
static PyObject *__pyx_kp_s_lastParsedToken_null;
static PyObject *__pyx_n_s_level;
static PyObject *__pyx_n_s_lexicalHandler;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_u_linkbase;
static PyObject *__pyx_n_s_linkbaseRefs;
static PyObject *__pyx_kp_s_loadGrammar_completed;
static PyObject *__pyx_kp_s_loadGrammar_start;
static PyObject *__pyx_kp_s_load_schema_grammar_ns_doc;
static PyObject *__pyx_kp_s_loc_name;
static PyObject *__pyx_n_s_localName;
static PyObject *__pyx_n_s_log;
static PyObject *__pyx_n_s_lxmlSaxHandler;
static PyObject *__pyx_n_s_lxmlSaxResolver;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_message;
static PyObject *__pyx_n_s_modelManager;
static PyObject *__pyx_n_s_modelWasChanged;
static PyObject *__pyx_n_s_modelXbrl;
static PyObject *__pyx_n_s_nameSpace;
static PyObject *__pyx_n_s_nameSpaceDocLocation;
static PyObject *__pyx_kp_s_namespace;
static PyObject *__pyx_n_s_namespaceDocumentLocations;
static PyObject *__pyx_n_s_namespaceItem;
static PyObject *__pyx_n_s_namespaceItems;
static PyObject *__pyx_n_s_namespaceURI;
static PyObject *__pyx_kp_s_namespace_annotations;
static PyObject *__pyx_kp_s_namespace_doc;
static PyObject *__pyx_kp_s_namespace_doc_null;
static PyObject *__pyx_kp_s_namespace_elements;
static PyObject *__pyx_kp_s_namespace_locations_list_null;
static PyObject *__pyx_kp_s_namespace_no_elements;
static PyObject *__pyx_n_s_namespaces;
static PyObject *__pyx_n_s_namespacesSize;
static PyObject *__pyx_kp_s_namespaces_size;
static PyObject *__pyx_kp_s_no_elements;
static PyObject *__pyx_kp_s_no_types;
static PyObject *__pyx_n_s_nonDtsSchemaRefs;
static PyObject *__pyx_kp_s_not_null;
static PyObject *__pyx_n_s_ns;
static PyObject *__pyx_n_s_nsNbr;
static PyObject *__pyx_kp_s_ns_URI;
static PyObject *__pyx_n_s_null;
static PyObject *__pyx_kp_s_null_annotation_string;
static PyObject *__pyx_kp_s_null_annotation_string_2;
static PyObject *__pyx_kp_s_null_annotation_text;
static PyObject *__pyx_kp_s_null_grammar;
static PyObject *__pyx_kp_s_object_count;
static PyObject *__pyx_n_s_openSax2Parser;
static PyObject *__pyx_kp_s_parse_first;
static PyObject *__pyx_n_s_parser;
static PyObject *__pyx_kp_s_parsing_instance;
static PyObject *__pyx_n_s_partition;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_kp_s_processingInstruction_target_dat;
static PyObject *__pyx_n_s_pyFileDesc;
static PyObject *__pyx_n_s_pyListTest;
static PyObject *__pyx_n_s_pyRootDict;
static PyObject *__pyx_n_s_pyRootDictPtr;
static PyObject *__pyx_kp_s_pyRootList;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qnameValueHash;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_resetErrors;
static PyObject *__pyx_kp_s_resolveEntity_pub_sys;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_kp_s_revectored_file;
static PyObject *__pyx_n_s_root;
static PyObject *__pyx_n_u_rss;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_u_schema;
static PyObject *__pyx_n_s_schemaGrammar;
static PyObject *__pyx_n_s_schemaLocation;
static PyObject *__pyx_n_s_schemaLocationsList;
static PyObject *__pyx_n_s_schemaRefs;
static PyObject *__pyx_kp_s_setDocumentLocator_pubId_sysId;
static PyObject *__pyx_n_s_setdefault;
static PyObject *__pyx_kp_s_setupSAX2parser_DOM_parser_is_al;
static PyObject *__pyx_kp_s_size;
static PyObject *__pyx_kp_s_skippedEntity;
static PyObject *__pyx_kp_s_skipping_load_schema_grammar_ns;
static PyObject *__pyx_n_s_startCDATA;
static PyObject *__pyx_n_s_startDTD;
static PyObject *__pyx_n_s_startDocument;
static PyObject *__pyx_kp_s_startElement_trace1_localname_ra;
static PyObject *__pyx_kp_s_startElement_uri_localname_qname;
static PyObject *__pyx_n_s_startEntity;
static PyObject *__pyx_kp_s_startPrefixMapping_prefix_uri;
static PyObject *__pyx_n_s_std_s;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_kp_s_tag;
static PyObject *__pyx_n_s_targetNS;
static PyObject *__pyx_n_s_targetNamespace;
static PyObject *__pyx_n_s_targetNamespacePrefix;
static PyObject *__pyx_kp_s_target_namespace;
static PyObject *__pyx_n_s_terminate;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_test_2;
static PyObject *__pyx_n_u_testcase;
static PyObject *__pyx_kp_u_testcases_index;
static PyObject *__pyx_n_s_testsax2;
static PyObject *__pyx_n_s_testsax2incremental;
static PyObject *__pyx_n_s_testschema;
static PyObject *__pyx_n_s_testschemaDOM;
static PyObject *__pyx_kp_b_text;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_token;
static PyObject *__pyx_kp_s_trace1;
static PyObject *__pyx_n_s_trace10;
static PyObject *__pyx_n_s_trace1_2;
static PyObject *__pyx_kp_s_trace2;
static PyObject *__pyx_n_s_trace2_2;
static PyObject *__pyx_kp_s_trace2_domImpl_is;
static PyObject *__pyx_n_s_trace3;
static PyObject *__pyx_n_s_trace4;
static PyObject *__pyx_n_s_trace5;
static PyObject *__pyx_n_s_trace6;
static PyObject *__pyx_n_s_trace7;
static PyObject *__pyx_n_s_trace8;
static PyObject *__pyx_kp_s_transcoded_value;
static PyObject *__pyx_n_s_txmyFile;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_kp_s_type_2;
static PyObject *__pyx_kp_s_type_3;
static PyObject *__pyx_kp_u_unknown_XML;
static PyObject *__pyx_n_s_updatedXSModel;
static PyObject *__pyx_n_s_url;
static PyObject *__pyx_kp_s_utf_8;
static PyObject *__pyx_n_s_validate;
static PyObject *__pyx_kp_u_versioning_report;
static PyObject *__pyx_n_s_warning;
static PyObject *__pyx_kp_s_www_w3_org;
static PyObject *__pyx_kp_s_xbrl_org;
static PyObject *__pyx_kp_s_xerces_already_initialized;
static PyObject *__pyx_n_s_xerces_resolve_entity;
static PyObject *__pyx_kp_s_xerces_terminated_or_not_started;
static PyObject *__pyx_kp_s_xerces_termination_but_not_initi;
static PyObject *__pyx_n_u_xhtml;
static PyObject *__pyx_n_s_xmlChFile;
static PyObject *__pyx_n_s_xmlChSchemaLocation;
static PyObject *__pyx_n_s_xsElement;
static PyObject *__pyx_n_s_xsModel;
static PyObject *__pyx_kp_s_xsModel_is_null;
static PyObject *__pyx_n_s_xsObjects;
static PyObject *__pyx_n_s_xsTypeDefinition;
static int __pyx_pf_6arelle_8arelle_c_8attrdict___init__(struct __pyx_obj_6arelle_8arelle_c_attrdict *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static int __pyx_pf_6arelle_8arelle_c_6genobj___init__(struct __pyx_obj_6arelle_8arelle_c_genobj *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_6genobj_2__repr__(struct __pyx_obj_6arelle_8arelle_c_genobj *__pyx_v_self); /* proto */
static int __pyx_pf_6arelle_8arelle_c_5Cntlr___init__(CYTHON_UNUSED struct __pyx_obj_6arelle_8arelle_c_Cntlr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_5Cntlr_2close(CYTHON_UNUSED struct __pyx_obj_6arelle_8arelle_c_Cntlr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_5Cntlr_4xerces_initialized(CYTHON_UNUSED struct __pyx_obj_6arelle_8arelle_c_Cntlr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_5Cntlr_6xerces_terminated(CYTHON_UNUSED struct __pyx_obj_6arelle_8arelle_c_Cntlr *__pyx_v_self); /* proto */
static int __pyx_pf_6arelle_8arelle_c_5QName___init__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self, PyObject *__pyx_v_namespaceURI, PyObject *__pyx_v_prefix, PyObject *__pyx_v_localName); /* proto */
static Py_hash_t __pyx_pf_6arelle_8arelle_c_5QName_2__hash__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_13clarkNotation___get__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_4__repr__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_6__str__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_8__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_op); /* proto */
static int __pyx_pf_6arelle_8arelle_c_5QName_10__bool__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_12namespaceURI___get__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_6prefix___get__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_9localName___get__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self); /* proto */
static int __pyx_pf_6arelle_8arelle_c_9ModelXbrl___init__(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self, PyObject *__pyx_v_modelManager); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_2close(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_4internString(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self, PyObject *__pyx_v_str); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_6identifyXmlFile(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self, PyObject *__pyx_v_pyFileDesc); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_8loadSchemaGrammar(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_10openSax2Parser(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_12modelManager___get__(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_5cntlr___get__(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_7urlDocs___get__(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_10mappedUrls___get__(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self); /* proto */
static int __pyx_pf_6arelle_8arelle_c_13ModelDocument___init__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_modelXbrl, int __pyx_v_type, PyObject *__pyx_v_url, PyObject *__pyx_v_filepath); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_2loadSchema(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, PyObject *__pyx_v_pyFileDesc); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_4loadXml(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, PyObject *__pyx_v_pyFileDesc, PyObject *__pyx_v_schemaLocationsList); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_9modelXbrl___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_4type___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_3url___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_8filepath___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_24isGrammarLoadedIntoModel___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self); /* proto */
static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_24isGrammarLoadedIntoModel_2__set__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_15targetNamespace___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self); /* proto */
static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_15targetNamespace_2__set__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_15targetNamespace_4__del__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self); /* proto */
static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_2__set__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_4__del__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_14xmlRootElement___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self); /* proto */
static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_2__set__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_4__del__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_initialize(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_2terminate(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_4test(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_3tag___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_3foo___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_9localName___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_12namespaceURI___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_9clarkName___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_4text___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_7rawtext___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_14timeconversion___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_4tail___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element___getitem__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_2getchildren(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_4lenchildren(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_6fromstring(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_8fromfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_10testschema(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_12testschemaDOM(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_14testsax2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_16testsax2incremental(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_ignore, PyObject *__pyx_v_instDocFile, CYTHON_UNUSED PyObject *__pyx_v_ignore2); /* proto */
static PyObject *__pyx_pf_6arelle_8arelle_c_18validate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_txmyFile, PyObject *__pyx_v_instFile, PyObject *__pyx_v_schemaLocation); /* proto */
static PyObject *__pyx_tp_new_6arelle_8arelle_c_attrdict(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6arelle_8arelle_c_genobj(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6arelle_8arelle_c_Cntlr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6arelle_8arelle_c_QName(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6arelle_8arelle_c_ModelXbrl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6arelle_8arelle_c_ModelDocument(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6arelle_8arelle_c__Element(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;

/* "arelle_cython/arelle_c/consts.pxi":42
 * cdef object schemaLocationsListForLinkbases
 * 
 * cdef initialize_constants():             # <<<<<<<<<<<<<<
 *     global nsXsd, nsXbrli, nsLink, nsXlink, nsXhtml, nsIxbrl, nsIxbrl11, nsVer, nsRegistry, nsNoNamespace
 *     nsXsd = transcode("http://www.w3.org/2001/XMLSchema")
 */

static PyObject *__pyx_f_6arelle_8arelle_c_initialize_constants(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("initialize_constants", 0);

  /* "arelle_cython/arelle_c/consts.pxi":44
 * cdef initialize_constants():
 *     global nsXsd, nsXbrli, nsLink, nsXlink, nsXhtml, nsIxbrl, nsIxbrl11, nsVer, nsRegistry, nsNoNamespace
 *     nsXsd = transcode("http://www.w3.org/2001/XMLSchema")             # <<<<<<<<<<<<<<
 *     nsXbrli = transcode("http://www.xbrl.org/2003/instance")
 *     nsLink = transcode("http://www.xbrl.org/2003/linkbase")
 */
  __pyx_v_6arelle_8arelle_c_nsXsd = xercesc::XMLString::transcode(((char const *)"http://www.w3.org/2001/XMLSchema"));

  /* "arelle_cython/arelle_c/consts.pxi":45
 *     global nsXsd, nsXbrli, nsLink, nsXlink, nsXhtml, nsIxbrl, nsIxbrl11, nsVer, nsRegistry, nsNoNamespace
 *     nsXsd = transcode("http://www.w3.org/2001/XMLSchema")
 *     nsXbrli = transcode("http://www.xbrl.org/2003/instance")             # <<<<<<<<<<<<<<
 *     nsLink = transcode("http://www.xbrl.org/2003/linkbase")
 *     nsXlink = transcode("http://www.w3.org/1999/xlink")
 */
  __pyx_v_6arelle_8arelle_c_nsXbrli = xercesc::XMLString::transcode(((char const *)"http://www.xbrl.org/2003/instance"));

  /* "arelle_cython/arelle_c/consts.pxi":46
 *     nsXsd = transcode("http://www.w3.org/2001/XMLSchema")
 *     nsXbrli = transcode("http://www.xbrl.org/2003/instance")
 *     nsLink = transcode("http://www.xbrl.org/2003/linkbase")             # <<<<<<<<<<<<<<
 *     nsXlink = transcode("http://www.w3.org/1999/xlink")
 *     nsXhtml = transcode("http://www.w3.org/1999/xhtml")
 */
  __pyx_v_6arelle_8arelle_c_nsLink = xercesc::XMLString::transcode(((char const *)"http://www.xbrl.org/2003/linkbase"));

  /* "arelle_cython/arelle_c/consts.pxi":47
 *     nsXbrli = transcode("http://www.xbrl.org/2003/instance")
 *     nsLink = transcode("http://www.xbrl.org/2003/linkbase")
 *     nsXlink = transcode("http://www.w3.org/1999/xlink")             # <<<<<<<<<<<<<<
 *     nsXhtml = transcode("http://www.w3.org/1999/xhtml")
 *     nsIxbrl = transcode("http://www.xbrl.org/2008/inlineXBRL")
 */
  __pyx_v_6arelle_8arelle_c_nsXlink = xercesc::XMLString::transcode(((char const *)"http://www.w3.org/1999/xlink"));

  /* "arelle_cython/arelle_c/consts.pxi":48
 *     nsLink = transcode("http://www.xbrl.org/2003/linkbase")
 *     nsXlink = transcode("http://www.w3.org/1999/xlink")
 *     nsXhtml = transcode("http://www.w3.org/1999/xhtml")             # <<<<<<<<<<<<<<
 *     nsIxbrl = transcode("http://www.xbrl.org/2008/inlineXBRL")
 *     nsIxbrl11 = transcode("http://www.xbrl.org/2013/inlineXBRL")
 */
  __pyx_v_6arelle_8arelle_c_nsXhtml = xercesc::XMLString::transcode(((char const *)"http://www.w3.org/1999/xhtml"));

  /* "arelle_cython/arelle_c/consts.pxi":49
 *     nsXlink = transcode("http://www.w3.org/1999/xlink")
 *     nsXhtml = transcode("http://www.w3.org/1999/xhtml")
 *     nsIxbrl = transcode("http://www.xbrl.org/2008/inlineXBRL")             # <<<<<<<<<<<<<<
 *     nsIxbrl11 = transcode("http://www.xbrl.org/2013/inlineXBRL")
 *     nsVer = transcode("http://xbrl.org/2013/versioning-base")
 */
  __pyx_v_6arelle_8arelle_c_nsIxbrl = xercesc::XMLString::transcode(((char const *)"http://www.xbrl.org/2008/inlineXBRL"));

  /* "arelle_cython/arelle_c/consts.pxi":50
 *     nsXhtml = transcode("http://www.w3.org/1999/xhtml")
 *     nsIxbrl = transcode("http://www.xbrl.org/2008/inlineXBRL")
 *     nsIxbrl11 = transcode("http://www.xbrl.org/2013/inlineXBRL")             # <<<<<<<<<<<<<<
 *     nsVer = transcode("http://xbrl.org/2013/versioning-base")
 *     nsRegistry = transcode("http://xbrl.org/2008/registry")
 */
  __pyx_v_6arelle_8arelle_c_nsIxbrl11 = xercesc::XMLString::transcode(((char const *)"http://www.xbrl.org/2013/inlineXBRL"));

  /* "arelle_cython/arelle_c/consts.pxi":51
 *     nsIxbrl = transcode("http://www.xbrl.org/2008/inlineXBRL")
 *     nsIxbrl11 = transcode("http://www.xbrl.org/2013/inlineXBRL")
 *     nsVer = transcode("http://xbrl.org/2013/versioning-base")             # <<<<<<<<<<<<<<
 *     nsRegistry = transcode("http://xbrl.org/2008/registry")
 *     nsNoNamespace = transcode("")
 */
  __pyx_v_6arelle_8arelle_c_nsVer = xercesc::XMLString::transcode(((char const *)"http://xbrl.org/2013/versioning-base"));

  /* "arelle_cython/arelle_c/consts.pxi":52
 *     nsIxbrl11 = transcode("http://www.xbrl.org/2013/inlineXBRL")
 *     nsVer = transcode("http://xbrl.org/2013/versioning-base")
 *     nsRegistry = transcode("http://xbrl.org/2008/registry")             # <<<<<<<<<<<<<<
 *     nsNoNamespace = transcode("")
 * 
 */
  __pyx_v_6arelle_8arelle_c_nsRegistry = xercesc::XMLString::transcode(((char const *)"http://xbrl.org/2008/registry"));

  /* "arelle_cython/arelle_c/consts.pxi":53
 *     nsVer = transcode("http://xbrl.org/2013/versioning-base")
 *     nsRegistry = transcode("http://xbrl.org/2008/registry")
 *     nsNoNamespace = transcode("")             # <<<<<<<<<<<<<<
 * 
 *     global lnXbrl, lnLinkbase, lnSchema, lnXhtml, lnHtml, lnLinkbaseRef, lnSchemaRef, lnHref, lnReport, lnRss, \
 */
  __pyx_v_6arelle_8arelle_c_nsNoNamespace = xercesc::XMLString::transcode(((char const *)""));

  /* "arelle_cython/arelle_c/consts.pxi":58
 *             lnTestcases, lnDocumentation, lnTestSuite, lnTestcase, lnTestSet, lnRegistry, lnPtvl, lnFacts, \
 *             lnTargetNamespace, lnRoleRef, lnArcroleRef
 *     lnXbrl = transcode("xbrl")             # <<<<<<<<<<<<<<
 *     lnLinkbase = transcode("linkbase")
 *     lnSchema = transcode("schema")
 */
  __pyx_v_6arelle_8arelle_c_lnXbrl = xercesc::XMLString::transcode(((char const *)"xbrl"));

  /* "arelle_cython/arelle_c/consts.pxi":59
 *             lnTargetNamespace, lnRoleRef, lnArcroleRef
 *     lnXbrl = transcode("xbrl")
 *     lnLinkbase = transcode("linkbase")             # <<<<<<<<<<<<<<
 *     lnSchema = transcode("schema")
 *     lnXhtml = transcode("xhtml")
 */
  __pyx_v_6arelle_8arelle_c_lnLinkbase = xercesc::XMLString::transcode(((char const *)"linkbase"));

  /* "arelle_cython/arelle_c/consts.pxi":60
 *     lnXbrl = transcode("xbrl")
 *     lnLinkbase = transcode("linkbase")
 *     lnSchema = transcode("schema")             # <<<<<<<<<<<<<<
 *     lnXhtml = transcode("xhtml")
 *     lnHtml = transcode("html")
 */
  __pyx_v_6arelle_8arelle_c_lnSchema = xercesc::XMLString::transcode(((char const *)"schema"));

  /* "arelle_cython/arelle_c/consts.pxi":61
 *     lnLinkbase = transcode("linkbase")
 *     lnSchema = transcode("schema")
 *     lnXhtml = transcode("xhtml")             # <<<<<<<<<<<<<<
 *     lnHtml = transcode("html")
 *     lnLinkbaseRef = transcode("linkbaseRef")
 */
  __pyx_v_6arelle_8arelle_c_lnXhtml = xercesc::XMLString::transcode(((char const *)"xhtml"));

  /* "arelle_cython/arelle_c/consts.pxi":62
 *     lnSchema = transcode("schema")
 *     lnXhtml = transcode("xhtml")
 *     lnHtml = transcode("html")             # <<<<<<<<<<<<<<
 *     lnLinkbaseRef = transcode("linkbaseRef")
 *     lnSchemaRef = transcode("schemaRef")
 */
  __pyx_v_6arelle_8arelle_c_lnHtml = xercesc::XMLString::transcode(((char const *)"html"));

  /* "arelle_cython/arelle_c/consts.pxi":63
 *     lnXhtml = transcode("xhtml")
 *     lnHtml = transcode("html")
 *     lnLinkbaseRef = transcode("linkbaseRef")             # <<<<<<<<<<<<<<
 *     lnSchemaRef = transcode("schemaRef")
 *     lnRoleRef = transcode("roleRef")
 */
  __pyx_v_6arelle_8arelle_c_lnLinkbaseRef = xercesc::XMLString::transcode(((char const *)"linkbaseRef"));

  /* "arelle_cython/arelle_c/consts.pxi":64
 *     lnHtml = transcode("html")
 *     lnLinkbaseRef = transcode("linkbaseRef")
 *     lnSchemaRef = transcode("schemaRef")             # <<<<<<<<<<<<<<
 *     lnRoleRef = transcode("roleRef")
 *     lnArcroleRef = transcode("arcroleRef")
 */
  __pyx_v_6arelle_8arelle_c_lnSchemaRef = xercesc::XMLString::transcode(((char const *)"schemaRef"));

  /* "arelle_cython/arelle_c/consts.pxi":65
 *     lnLinkbaseRef = transcode("linkbaseRef")
 *     lnSchemaRef = transcode("schemaRef")
 *     lnRoleRef = transcode("roleRef")             # <<<<<<<<<<<<<<
 *     lnArcroleRef = transcode("arcroleRef")
 *     lnHref = transcode("href")
 */
  __pyx_v_6arelle_8arelle_c_lnRoleRef = xercesc::XMLString::transcode(((char const *)"roleRef"));

  /* "arelle_cython/arelle_c/consts.pxi":66
 *     lnSchemaRef = transcode("schemaRef")
 *     lnRoleRef = transcode("roleRef")
 *     lnArcroleRef = transcode("arcroleRef")             # <<<<<<<<<<<<<<
 *     lnHref = transcode("href")
 *     lnReport = transcode("report")
 */
  __pyx_v_6arelle_8arelle_c_lnArcroleRef = xercesc::XMLString::transcode(((char const *)"arcroleRef"));

  /* "arelle_cython/arelle_c/consts.pxi":67
 *     lnRoleRef = transcode("roleRef")
 *     lnArcroleRef = transcode("arcroleRef")
 *     lnHref = transcode("href")             # <<<<<<<<<<<<<<
 *     lnReport = transcode("report")
 *     lnRss = transcode("rss")
 */
  __pyx_v_6arelle_8arelle_c_lnHref = xercesc::XMLString::transcode(((char const *)"href"));

  /* "arelle_cython/arelle_c/consts.pxi":68
 *     lnArcroleRef = transcode("arcroleRef")
 *     lnHref = transcode("href")
 *     lnReport = transcode("report")             # <<<<<<<<<<<<<<
 *     lnRss = transcode("rss")
 *     lnTestcases = transcode("testcases")
 */
  __pyx_v_6arelle_8arelle_c_lnReport = xercesc::XMLString::transcode(((char const *)"report"));

  /* "arelle_cython/arelle_c/consts.pxi":69
 *     lnHref = transcode("href")
 *     lnReport = transcode("report")
 *     lnRss = transcode("rss")             # <<<<<<<<<<<<<<
 *     lnTestcases = transcode("testcases")
 *     lnDocumentation = transcode("documentation")
 */
  __pyx_v_6arelle_8arelle_c_lnRss = xercesc::XMLString::transcode(((char const *)"rss"));

  /* "arelle_cython/arelle_c/consts.pxi":70
 *     lnReport = transcode("report")
 *     lnRss = transcode("rss")
 *     lnTestcases = transcode("testcases")             # <<<<<<<<<<<<<<
 *     lnDocumentation = transcode("documentation")
 *     lnTestSuite = transcode("testSuite")
 */
  __pyx_v_6arelle_8arelle_c_lnTestcases = xercesc::XMLString::transcode(((char const *)"testcases"));

  /* "arelle_cython/arelle_c/consts.pxi":71
 *     lnRss = transcode("rss")
 *     lnTestcases = transcode("testcases")
 *     lnDocumentation = transcode("documentation")             # <<<<<<<<<<<<<<
 *     lnTestSuite = transcode("testSuite")
 *     lnTestcase = transcode("testcase")
 */
  __pyx_v_6arelle_8arelle_c_lnDocumentation = xercesc::XMLString::transcode(((char const *)"documentation"));

  /* "arelle_cython/arelle_c/consts.pxi":72
 *     lnTestcases = transcode("testcases")
 *     lnDocumentation = transcode("documentation")
 *     lnTestSuite = transcode("testSuite")             # <<<<<<<<<<<<<<
 *     lnTestcase = transcode("testcase")
 *     lnTestSet = transcode("testSet")
 */
  __pyx_v_6arelle_8arelle_c_lnTestSuite = xercesc::XMLString::transcode(((char const *)"testSuite"));

  /* "arelle_cython/arelle_c/consts.pxi":73
 *     lnDocumentation = transcode("documentation")
 *     lnTestSuite = transcode("testSuite")
 *     lnTestcase = transcode("testcase")             # <<<<<<<<<<<<<<
 *     lnTestSet = transcode("testSet")
 *     lnRegistry = transcode("registry")
 */
  __pyx_v_6arelle_8arelle_c_lnTestcase = xercesc::XMLString::transcode(((char const *)"testcase"));

  /* "arelle_cython/arelle_c/consts.pxi":74
 *     lnTestSuite = transcode("testSuite")
 *     lnTestcase = transcode("testcase")
 *     lnTestSet = transcode("testSet")             # <<<<<<<<<<<<<<
 *     lnRegistry = transcode("registry")
 *     lnPtvl = transcode("ptvl")
 */
  __pyx_v_6arelle_8arelle_c_lnTestSet = xercesc::XMLString::transcode(((char const *)"testSet"));

  /* "arelle_cython/arelle_c/consts.pxi":75
 *     lnTestcase = transcode("testcase")
 *     lnTestSet = transcode("testSet")
 *     lnRegistry = transcode("registry")             # <<<<<<<<<<<<<<
 *     lnPtvl = transcode("ptvl")
 *     lnFacts = transcode("facts")
 */
  __pyx_v_6arelle_8arelle_c_lnRegistry = xercesc::XMLString::transcode(((char const *)"registry"));

  /* "arelle_cython/arelle_c/consts.pxi":76
 *     lnTestSet = transcode("testSet")
 *     lnRegistry = transcode("registry")
 *     lnPtvl = transcode("ptvl")             # <<<<<<<<<<<<<<
 *     lnFacts = transcode("facts")
 *     lnTargetNamespace = transcode("targetNamespace")
 */
  __pyx_v_6arelle_8arelle_c_lnPtvl = xercesc::XMLString::transcode(((char const *)"ptvl"));

  /* "arelle_cython/arelle_c/consts.pxi":77
 *     lnRegistry = transcode("registry")
 *     lnPtvl = transcode("ptvl")
 *     lnFacts = transcode("facts")             # <<<<<<<<<<<<<<
 *     lnTargetNamespace = transcode("targetNamespace")
 * 
 */
  __pyx_v_6arelle_8arelle_c_lnFacts = xercesc::XMLString::transcode(((char const *)"facts"));

  /* "arelle_cython/arelle_c/consts.pxi":78
 *     lnPtvl = transcode("ptvl")
 *     lnFacts = transcode("facts")
 *     lnTargetNamespace = transcode("targetNamespace")             # <<<<<<<<<<<<<<
 * 
 *     global xmlnsPrefix
 */
  __pyx_v_6arelle_8arelle_c_lnTargetNamespace = xercesc::XMLString::transcode(((char const *)"targetNamespace"));

  /* "arelle_cython/arelle_c/consts.pxi":81
 * 
 *     global xmlnsPrefix
 *     xmlnsPrefix = transcode("xmlns:")             # <<<<<<<<<<<<<<
 * 
 *     global schemaLocationsListForLinkbases
 */
  __pyx_v_6arelle_8arelle_c_xmlnsPrefix = xercesc::XMLString::transcode(((char const *)"xmlns:"));

  /* "arelle_cython/arelle_c/consts.pxi":84
 * 
 *     global schemaLocationsListForLinkbases
 *     schemaLocationsListForLinkbases = [             # <<<<<<<<<<<<<<
 *         "http://www.xbrl.org/2003/linkbase", "http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd",
 *         "http://www.w3.org/1999/xlink", "http://www.xbrl.org/2003/xlink-2003-12-31.xsd",
 */
  __pyx_t_1 = PyList_New(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_http_www_xbrl_org_2003_linkbase);
  __Pyx_GIVEREF(__pyx_kp_s_http_www_xbrl_org_2003_linkbase);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_http_www_xbrl_org_2003_linkbase);
  __Pyx_INCREF(__pyx_kp_s_http_www_xbrl_org_2003_xbrl_link);
  __Pyx_GIVEREF(__pyx_kp_s_http_www_xbrl_org_2003_xbrl_link);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_s_http_www_xbrl_org_2003_xbrl_link);
  __Pyx_INCREF(__pyx_kp_s_http_www_w3_org_1999_xlink);
  __Pyx_GIVEREF(__pyx_kp_s_http_www_w3_org_1999_xlink);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_kp_s_http_www_w3_org_1999_xlink);
  __Pyx_INCREF(__pyx_kp_s_http_www_xbrl_org_2003_xlink_200);
  __Pyx_GIVEREF(__pyx_kp_s_http_www_xbrl_org_2003_xlink_200);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_kp_s_http_www_xbrl_org_2003_xlink_200);
  __Pyx_INCREF(__pyx_kp_s_http_xbrl_org_2008_generic);
  __Pyx_GIVEREF(__pyx_kp_s_http_xbrl_org_2008_generic);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_kp_s_http_xbrl_org_2008_generic);
  __Pyx_INCREF(__pyx_kp_s_http_www_xbrl_org_2008_generic_l);
  __Pyx_GIVEREF(__pyx_kp_s_http_www_xbrl_org_2008_generic_l);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_kp_s_http_www_xbrl_org_2008_generic_l);
  __Pyx_XGOTREF(__pyx_v_6arelle_8arelle_c_schemaLocationsListForLinkbases);
  __Pyx_DECREF_SET(__pyx_v_6arelle_8arelle_c_schemaLocationsListForLinkbases, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/consts.pxi":42
 * cdef object schemaLocationsListForLinkbases
 * 
 * cdef initialize_constants():             # <<<<<<<<<<<<<<
 *     global nsXsd, nsXbrli, nsLink, nsXlink, nsXhtml, nsIxbrl, nsIxbrl11, nsVer, nsRegistry, nsNoNamespace
 *     nsXsd = transcode("http://www.w3.org/2001/XMLSchema")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c.initialize_constants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/utils.pxi":11
 *     """ utility to simulate an dictionary with named fields from the kwargs """
 *     cdef dict __dict__
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         dict.__init__(self, *args, **kwargs)
 *         self.__dict__ = self
 */

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_8attrdict_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_8attrdict_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8attrdict___init__(((struct __pyx_obj_6arelle_8arelle_c_attrdict *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_8attrdict___init__(struct __pyx_obj_6arelle_8arelle_c_attrdict *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "arelle_cython/arelle_c/utils.pxi":12
 *     cdef dict __dict__
 *     def __init__(self, *args, **kwargs):
 *         dict.__init__(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 *         self.__dict__ = self
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)(&PyDict_Type)), __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/utils.pxi":13
 *     def __init__(self, *args, **kwargs):
 *         dict.__init__(self, *args, **kwargs)
 *         self.__dict__ = self             # <<<<<<<<<<<<<<
 * 
 * cdef class genobj:
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_self->__dict__);
  __Pyx_DECREF(__pyx_v_self->__dict__);
  __pyx_v_self->__dict__ = ((PyObject*)__pyx_v_self);

  /* "arelle_cython/arelle_c/utils.pxi":11
 *     """ utility to simulate an dictionary with named fields from the kwargs """
 *     cdef dict __dict__
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         dict.__init__(self, *args, **kwargs)
 *         self.__dict__ = self
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("arelle.arelle_c.attrdict.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/utils.pxi":18
 *     """ utility to simulate an generic object with named fields from the kwargs """
 *     cdef dict __dict__
 *     def __init__(self, **kwargs):             # <<<<<<<<<<<<<<
 *         self.__dict__ = kwargs
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_6genobj_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_6genobj_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_6genobj___init__(((struct __pyx_obj_6arelle_8arelle_c_genobj *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_6genobj___init__(struct __pyx_obj_6arelle_8arelle_c_genobj *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "arelle_cython/arelle_c/utils.pxi":19
 *     cdef dict __dict__
 *     def __init__(self, **kwargs):
 *         self.__dict__ = kwargs             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return str(self.__dict__)
 */
  __Pyx_INCREF(__pyx_v_kwargs);
  __Pyx_GIVEREF(__pyx_v_kwargs);
  __Pyx_GOTREF(__pyx_v_self->__dict__);
  __Pyx_DECREF(__pyx_v_self->__dict__);
  __pyx_v_self->__dict__ = __pyx_v_kwargs;

  /* "arelle_cython/arelle_c/utils.pxi":18
 *     """ utility to simulate an generic object with named fields from the kwargs """
 *     cdef dict __dict__
 *     def __init__(self, **kwargs):             # <<<<<<<<<<<<<<
 *         self.__dict__ = kwargs
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/utils.pxi":20
 *     def __init__(self, **kwargs):
 *         self.__dict__ = kwargs
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return str(self.__dict__)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_6genobj_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_6genobj_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_6genobj_2__repr__(((struct __pyx_obj_6arelle_8arelle_c_genobj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_6genobj_2__repr__(struct __pyx_obj_6arelle_8arelle_c_genobj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "arelle_cython/arelle_c/utils.pxi":21
 *         self.__dict__ = kwargs
 *     def __repr__(self):
 *         return str(self.__dict__)             # <<<<<<<<<<<<<<
 * 
 * cdef InputSource* fileDescInputSource( pyFileDesc ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->__dict__);
  __Pyx_GIVEREF(__pyx_v_self->__dict__);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->__dict__);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/utils.pxi":20
 *     def __init__(self, **kwargs):
 *         self.__dict__ = kwargs
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return str(self.__dict__)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("arelle.arelle_c.genobj.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/utils.pxi":23
 *         return str(self.__dict__)
 * 
 * cdef InputSource* fileDescInputSource( pyFileDesc ):             # <<<<<<<<<<<<<<
 *     cdef const char* c_s
 *     #cdef string std_s
 */

static xercesc::InputSource *__pyx_f_6arelle_8arelle_c_fileDescInputSource(PyObject *__pyx_v_pyFileDesc) {
  char const *__pyx_v_c_s;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_xmlChFile;
  xercesc::InputSource *__pyx_v_inpSrc;
  bool __pyx_v_adoptBuffer;
  PyObject *__pyx_v_b_str = 0;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLByte *__pyx_v_xmlByteStr;
  PyObject *__pyx_v_byte_s = NULL;
  xercesc::InputSource *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char const *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("fileDescInputSource", 0);

  /* "arelle_cython/arelle_c/utils.pxi":28
 *     cdef XMLCh* xmlChFile
 *     cdef XMLCh* xmlChUrl
 *     cdef InputSource* inpSrc = NULL             # <<<<<<<<<<<<<<
 *     cdef bool adoptBuffer
 *     cdef bytes b_str
 */
  __pyx_v_inpSrc = NULL;

  /* "arelle_cython/arelle_c/utils.pxi":32
 *     cdef bytes b_str
 *     cdef XMLByte* xmlByteStr
 *     if hasattr(pyFileDesc, "bytes"):             # <<<<<<<<<<<<<<
 *         b_str = pyFileDesc.bytes
 *         c_s = b_str # fast operation, pointer is tied to life time of python bytes string in fileDesc object
 */
  __pyx_t_1 = PyObject_HasAttr(__pyx_v_pyFileDesc, __pyx_n_s_bytes); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(3, 32, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/utils.pxi":33
 *     cdef XMLByte* xmlByteStr
 *     if hasattr(pyFileDesc, "bytes"):
 *         b_str = pyFileDesc.bytes             # <<<<<<<<<<<<<<
 *         c_s = b_str # fast operation, pointer is tied to life time of python bytes string in fileDesc object
 *         xmlByteStr = <XMLByte*>c_s # avoid copying byte content to another buffer and depend on fileDesc lifetime for contents
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyFileDesc, __pyx_n_s_bytes); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(3, 33, __pyx_L1_error)
    __pyx_v_b_str = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "arelle_cython/arelle_c/utils.pxi":34
 *     if hasattr(pyFileDesc, "bytes"):
 *         b_str = pyFileDesc.bytes
 *         c_s = b_str # fast operation, pointer is tied to life time of python bytes string in fileDesc object             # <<<<<<<<<<<<<<
 *         xmlByteStr = <XMLByte*>c_s # avoid copying byte content to another buffer and depend on fileDesc lifetime for contents
 *         if hasattr(pyFileDesc, "filepath"):
 */
    __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_b_str); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(3, 34, __pyx_L1_error)
    __pyx_v_c_s = __pyx_t_4;

    /* "arelle_cython/arelle_c/utils.pxi":35
 *         b_str = pyFileDesc.bytes
 *         c_s = b_str # fast operation, pointer is tied to life time of python bytes string in fileDesc object
 *         xmlByteStr = <XMLByte*>c_s # avoid copying byte content to another buffer and depend on fileDesc lifetime for contents             # <<<<<<<<<<<<<<
 *         if hasattr(pyFileDesc, "filepath"):
 *             byte_s = pyFileDesc.filepath.encode("utf-8")
 */
    __pyx_v_xmlByteStr = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLByte *)__pyx_v_c_s);

    /* "arelle_cython/arelle_c/utils.pxi":36
 *         c_s = b_str # fast operation, pointer is tied to life time of python bytes string in fileDesc object
 *         xmlByteStr = <XMLByte*>c_s # avoid copying byte content to another buffer and depend on fileDesc lifetime for contents
 *         if hasattr(pyFileDesc, "filepath"):             # <<<<<<<<<<<<<<
 *             byte_s = pyFileDesc.filepath.encode("utf-8")
 *         else:
 */
    __pyx_t_2 = PyObject_HasAttr(__pyx_v_pyFileDesc, __pyx_n_s_filepath); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(3, 36, __pyx_L1_error)
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "arelle_cython/arelle_c/utils.pxi":37
 *         xmlByteStr = <XMLByte*>c_s # avoid copying byte content to another buffer and depend on fileDesc lifetime for contents
 *         if hasattr(pyFileDesc, "filepath"):
 *             byte_s = pyFileDesc.filepath.encode("utf-8")             # <<<<<<<<<<<<<<
 *         else:
 *             byte_s = b"(in memory, no filename provided, no xml base or relative hrefs possible)"
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyFileDesc, __pyx_n_s_filepath); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_byte_s = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "arelle_cython/arelle_c/utils.pxi":36
 *         c_s = b_str # fast operation, pointer is tied to life time of python bytes string in fileDesc object
 *         xmlByteStr = <XMLByte*>c_s # avoid copying byte content to another buffer and depend on fileDesc lifetime for contents
 *         if hasattr(pyFileDesc, "filepath"):             # <<<<<<<<<<<<<<
 *             byte_s = pyFileDesc.filepath.encode("utf-8")
 *         else:
 */
      goto __pyx_L4;
    }

    /* "arelle_cython/arelle_c/utils.pxi":39
 *             byte_s = pyFileDesc.filepath.encode("utf-8")
 *         else:
 *             byte_s = b"(in memory, no filename provided, no xml base or relative hrefs possible)"             # <<<<<<<<<<<<<<
 *         c_s = byte_s
 *         xmlChFile = transcode(c_s)
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_kp_b_in_memory_no_filename_provided);
      __pyx_v_byte_s = __pyx_kp_b_in_memory_no_filename_provided;
    }
    __pyx_L4:;

    /* "arelle_cython/arelle_c/utils.pxi":40
 *         else:
 *             byte_s = b"(in memory, no filename provided, no xml base or relative hrefs possible)"
 *         c_s = byte_s             # <<<<<<<<<<<<<<
 *         xmlChFile = transcode(c_s)
 *         adoptBuffer = False
 */
    __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_byte_s); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(3, 40, __pyx_L1_error)
    __pyx_v_c_s = __pyx_t_4;

    /* "arelle_cython/arelle_c/utils.pxi":41
 *             byte_s = b"(in memory, no filename provided, no xml base or relative hrefs possible)"
 *         c_s = byte_s
 *         xmlChFile = transcode(c_s)             # <<<<<<<<<<<<<<
 *         adoptBuffer = False
 *         inpSrc = ( new MemBufInputSource( xmlByteStr, len(b_str), xmlChFile, adoptBuffer ))
 */
    __pyx_v_xmlChFile = xercesc::XMLString::transcode(__pyx_v_c_s);

    /* "arelle_cython/arelle_c/utils.pxi":42
 *         c_s = byte_s
 *         xmlChFile = transcode(c_s)
 *         adoptBuffer = False             # <<<<<<<<<<<<<<
 *         inpSrc = ( new MemBufInputSource( xmlByteStr, len(b_str), xmlChFile, adoptBuffer ))
 *         release(&xmlChFile)
 */
    __pyx_v_adoptBuffer = 0;

    /* "arelle_cython/arelle_c/utils.pxi":43
 *         xmlChFile = transcode(c_s)
 *         adoptBuffer = False
 *         inpSrc = ( new MemBufInputSource( xmlByteStr, len(b_str), xmlChFile, adoptBuffer ))             # <<<<<<<<<<<<<<
 *         release(&xmlChFile)
 *     elif hasattr(pyFileDesc, "filepath"):
 */
    if (unlikely(__pyx_v_b_str == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(3, 43, __pyx_L1_error)
    }
    __pyx_t_6 = PyBytes_GET_SIZE(__pyx_v_b_str); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(3, 43, __pyx_L1_error)
    __pyx_v_inpSrc = new xercesc::MemBufInputSource(__pyx_v_xmlByteStr, __pyx_t_6, __pyx_v_xmlChFile, __pyx_v_adoptBuffer);

    /* "arelle_cython/arelle_c/utils.pxi":44
 *         adoptBuffer = False
 *         inpSrc = ( new MemBufInputSource( xmlByteStr, len(b_str), xmlChFile, adoptBuffer ))
 *         release(&xmlChFile)             # <<<<<<<<<<<<<<
 *     elif hasattr(pyFileDesc, "filepath"):
 *         byte_s = pyFileDesc.filepath.encode("utf-8")
 */
    xercesc::XMLString::release((&__pyx_v_xmlChFile));

    /* "arelle_cython/arelle_c/utils.pxi":32
 *     cdef bytes b_str
 *     cdef XMLByte* xmlByteStr
 *     if hasattr(pyFileDesc, "bytes"):             # <<<<<<<<<<<<<<
 *         b_str = pyFileDesc.bytes
 *         c_s = b_str # fast operation, pointer is tied to life time of python bytes string in fileDesc object
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/utils.pxi":45
 *         inpSrc = ( new MemBufInputSource( xmlByteStr, len(b_str), xmlChFile, adoptBuffer ))
 *         release(&xmlChFile)
 *     elif hasattr(pyFileDesc, "filepath"):             # <<<<<<<<<<<<<<
 *         byte_s = pyFileDesc.filepath.encode("utf-8")
 *         c_s = byte_s
 */
  __pyx_t_1 = PyObject_HasAttr(__pyx_v_pyFileDesc, __pyx_n_s_filepath); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(3, 45, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/utils.pxi":46
 *         release(&xmlChFile)
 *     elif hasattr(pyFileDesc, "filepath"):
 *         byte_s = pyFileDesc.filepath.encode("utf-8")             # <<<<<<<<<<<<<<
 *         c_s = byte_s
 *         xmlChFile = transcode(c_s)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyFileDesc, __pyx_n_s_filepath); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_byte_s = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "arelle_cython/arelle_c/utils.pxi":47
 *     elif hasattr(pyFileDesc, "filepath"):
 *         byte_s = pyFileDesc.filepath.encode("utf-8")
 *         c_s = byte_s             # <<<<<<<<<<<<<<
 *         xmlChFile = transcode(c_s)
 *         inpSrc = ( new LocalFileInputSource( xmlChFile ))
 */
    __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_byte_s); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(3, 47, __pyx_L1_error)
    __pyx_v_c_s = __pyx_t_4;

    /* "arelle_cython/arelle_c/utils.pxi":48
 *         byte_s = pyFileDesc.filepath.encode("utf-8")
 *         c_s = byte_s
 *         xmlChFile = transcode(c_s)             # <<<<<<<<<<<<<<
 *         inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *         release(&xmlChFile)
 */
    __pyx_v_xmlChFile = xercesc::XMLString::transcode(__pyx_v_c_s);

    /* "arelle_cython/arelle_c/utils.pxi":49
 *         c_s = byte_s
 *         xmlChFile = transcode(c_s)
 *         inpSrc = ( new LocalFileInputSource( xmlChFile ))             # <<<<<<<<<<<<<<
 *         release(&xmlChFile)
 *     byte_s = None
 */
    __pyx_v_inpSrc = new xercesc::LocalFileInputSource(__pyx_v_xmlChFile);

    /* "arelle_cython/arelle_c/utils.pxi":50
 *         xmlChFile = transcode(c_s)
 *         inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *         release(&xmlChFile)             # <<<<<<<<<<<<<<
 *     byte_s = None
 *     return inpSrc
 */
    xercesc::XMLString::release((&__pyx_v_xmlChFile));

    /* "arelle_cython/arelle_c/utils.pxi":45
 *         inpSrc = ( new MemBufInputSource( xmlByteStr, len(b_str), xmlChFile, adoptBuffer ))
 *         release(&xmlChFile)
 *     elif hasattr(pyFileDesc, "filepath"):             # <<<<<<<<<<<<<<
 *         byte_s = pyFileDesc.filepath.encode("utf-8")
 *         c_s = byte_s
 */
  }
  __pyx_L3:;

  /* "arelle_cython/arelle_c/utils.pxi":51
 *         inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *         release(&xmlChFile)
 *     byte_s = None             # <<<<<<<<<<<<<<
 *     return inpSrc
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_XDECREF_SET(__pyx_v_byte_s, Py_None);

  /* "arelle_cython/arelle_c/utils.pxi":52
 *         release(&xmlChFile)
 *     byte_s = None
 *     return inpSrc             # <<<<<<<<<<<<<<
 * 
 * cdef cppclass TemplateSAX2Handler(ErrorHandler, LexicalHandler, ContentHandler):
 */
  __pyx_r = __pyx_v_inpSrc;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/utils.pxi":23
 *         return str(self.__dict__)
 * 
 * cdef InputSource* fileDescInputSource( pyFileDesc ):             # <<<<<<<<<<<<<<
 *     cdef const char* c_s
 *     #cdef string std_s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("arelle.arelle_c.fileDescInputSource", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_b_str);
  __Pyx_XDECREF(__pyx_v_byte_s);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/utils.pxi":56
 * cdef cppclass TemplateSAX2Handler(ErrorHandler, LexicalHandler, ContentHandler):
 *     # document handlers
 *     void characters(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         pass # needed if any analyzed element contents were to be significant
 *     void endDocument():
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::characters(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_chars, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const __pyx_v_length) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("characters", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":58
 *     void characters(const XMLCh* chars, const XMLSize_t length):
 *         pass # needed if any analyzed element contents were to be significant
 *     void endDocument():             # <<<<<<<<<<<<<<
 *         pass
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::endDocument(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endDocument", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":60
 *     void endDocument():
 *         pass
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):             # <<<<<<<<<<<<<<
 *         pass
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::endElement(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_uri, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_localname, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_qname) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endElement", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":62
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 *         pass
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         pass
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::ignorableWhitespace(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_chars, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const __pyx_v_length) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ignorableWhitespace", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":64
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):
 *         pass
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):             # <<<<<<<<<<<<<<
 *         pass
 *     void setDocumentLocator(const Locator* const locator):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::processingInstruction(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_target, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_data) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("processingInstruction", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":66
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):
 *         pass
 *     void setDocumentLocator(const Locator* const locator):             # <<<<<<<<<<<<<<
 *         pass
 *     void startDocument():
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::setDocumentLocator(CYTHON_UNUSED xercesc::Locator const *const __pyx_v_locator) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDocumentLocator", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":68
 *     void setDocumentLocator(const Locator* const locator):
 *         pass
 *     void startDocument():             # <<<<<<<<<<<<<<
 *         pass
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::startDocument(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startDocument", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":70
 *     void startDocument():
 *         pass
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):             # <<<<<<<<<<<<<<
 *         pass
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::startElement(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_uri, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_localname, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_qname, CYTHON_UNUSED xercesc::Attributes const &__pyx_v_attrs) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startElement", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":72
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):
 *         pass
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):             # <<<<<<<<<<<<<<
 *         pass
 *     void endPrefixMapping(const XMLCh* prefix):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::startPrefixMapping(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_prefix, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_uri) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startPrefixMapping", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":74
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         pass
 *     void endPrefixMapping(const XMLCh* prefix):             # <<<<<<<<<<<<<<
 *         pass
 *     void skippedEntity(const XMLCh* name):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::endPrefixMapping(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_prefix) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endPrefixMapping", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":76
 *     void endPrefixMapping(const XMLCh* prefix):
 *         pass
 *     void skippedEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         pass
 *     void comment(const XMLCh* chars, const XMLSize_t length):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::skippedEntity(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skippedEntity", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":78
 *     void skippedEntity(const XMLCh* name):
 *         pass
 *     void comment(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         pass
 *     void endCDATA():
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::comment(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_chars, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const __pyx_v_length) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("comment", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":80
 *     void comment(const XMLCh* chars, const XMLSize_t length):
 *         pass
 *     void endCDATA():             # <<<<<<<<<<<<<<
 *         pass
 *     void endDTD():
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::endCDATA(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endCDATA", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":82
 *     void endCDATA():
 *         pass
 *     void endDTD():             # <<<<<<<<<<<<<<
 *         pass #print("endDTD")
 *     void endEntity(const XMLCh* name):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::endDTD(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endDTD", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":84
 *     void endDTD():
 *         pass #print("endDTD")
 *     void endEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         pass #print("endEntity name: {}".format(transcode(name)))
 *     void startCDATA():
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::endEntity(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endEntity", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":86
 *     void endEntity(const XMLCh* name):
 *         pass #print("endEntity name: {}".format(transcode(name)))
 *     void startCDATA():             # <<<<<<<<<<<<<<
 *         pass #print("startCDATA")
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::startCDATA(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startCDATA", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":88
 *     void startCDATA():
 *         pass #print("startCDATA")
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):             # <<<<<<<<<<<<<<
 *         pass #print("startDTD")
 *     void startEntity(const XMLCh* name):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::startDTD(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_publicId, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_systemId) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startDTD", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":90
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):
 *         pass #print("startDTD")
 *     void startEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         pass #print("startEntity")
 *     void elementDecl(const XMLCh* name, const XMLCh* model):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::startEntity(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startEntity", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":92
 *     void startEntity(const XMLCh* name):
 *         pass #print("startEntity")
 *     void elementDecl(const XMLCh* name, const XMLCh* model):             # <<<<<<<<<<<<<<
 *         pass #print("elementDecl")
 *     # error handlers
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::elementDecl(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_model) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("elementDecl", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":95
 *         pass #print("elementDecl")
 *     # error handlers
 *     void logError(const SAXParseException& exc, level):             # <<<<<<<<<<<<<<
 *         pass
 *     void error(const SAXParseException& exc):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::logError(CYTHON_UNUSED xercesc::SAXParseException const &__pyx_v_exc, CYTHON_UNUSED PyObject *__pyx_v_level) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logError", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":97
 *     void logError(const SAXParseException& exc, level):
 *         pass
 *     void error(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         pass
 *     void fatalError(const SAXParseException& exc):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::error(CYTHON_UNUSED xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("error", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":99
 *     void error(const SAXParseException& exc):
 *         pass
 *     void fatalError(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         pass
 *     void warning(const SAXParseException& exc):
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::fatalError(CYTHON_UNUSED xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fatalError", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":101
 *     void fatalError(const SAXParseException& exc):
 *         pass
 *     void warning(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         pass
 *     void resetErrors():
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::warning(CYTHON_UNUSED xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("warning", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":103
 *     void warning(const SAXParseException& exc):
 *         pass
 *     void resetErrors():             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

void __pyx_t_6arelle_8arelle_c_TemplateSAX2Handler::resetErrors(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resetErrors", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/utils.pxi":106
 *         pass
 * 
 * cdef getAttrValue(const Attributes& attrs, XMLCh* uri, XMLCh* localName):             # <<<<<<<<<<<<<<
 *     cdef object _pyValue
 *     cdef const XMLCh* _XmlValue = attrs.getValue(uri, localName)
 */

static PyObject *__pyx_f_6arelle_8arelle_c_getAttrValue(xercesc::Attributes const &__pyx_v_attrs, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_uri, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_localName) {
  PyObject *__pyx_v__pyValue = 0;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v__XmlValue;
  char *__pyx_v__charValue;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getAttrValue", 0);

  /* "arelle_cython/arelle_c/utils.pxi":108
 * cdef getAttrValue(const Attributes& attrs, XMLCh* uri, XMLCh* localName):
 *     cdef object _pyValue
 *     cdef const XMLCh* _XmlValue = attrs.getValue(uri, localName)             # <<<<<<<<<<<<<<
 *     cdef char* _charValue
 *     if _XmlValue == NULL:
 */
  __pyx_v__XmlValue = __pyx_v_attrs.getValue(__pyx_v_uri, __pyx_v_localName);

  /* "arelle_cython/arelle_c/utils.pxi":110
 *     cdef const XMLCh* _XmlValue = attrs.getValue(uri, localName)
 *     cdef char* _charValue
 *     if _XmlValue == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     _charValue = transcode(_XmlValue)
 */
  __pyx_t_1 = ((__pyx_v__XmlValue == NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/utils.pxi":111
 *     cdef char* _charValue
 *     if _XmlValue == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     _charValue = transcode(_XmlValue)
 *     _pyValue = _charValue
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/utils.pxi":110
 *     cdef const XMLCh* _XmlValue = attrs.getValue(uri, localName)
 *     cdef char* _charValue
 *     if _XmlValue == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     _charValue = transcode(_XmlValue)
 */
  }

  /* "arelle_cython/arelle_c/utils.pxi":112
 *     if _XmlValue == NULL:
 *         return None
 *     _charValue = transcode(_XmlValue)             # <<<<<<<<<<<<<<
 *     _pyValue = _charValue
 *     release(&_charValue)
 */
  __pyx_v__charValue = xercesc::XMLString::transcode(__pyx_v__XmlValue);

  /* "arelle_cython/arelle_c/utils.pxi":113
 *         return None
 *     _charValue = transcode(_XmlValue)
 *     _pyValue = _charValue             # <<<<<<<<<<<<<<
 *     release(&_charValue)
 *     return _pyValue
 */
  __pyx_t_2 = __Pyx_PyUnicode_FromString(__pyx_v__charValue); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__pyValue = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/utils.pxi":114
 *     _charValue = transcode(_XmlValue)
 *     _pyValue = _charValue
 *     release(&_charValue)             # <<<<<<<<<<<<<<
 *     return _pyValue
 */
  xercesc::XMLString::release((&__pyx_v__charValue));

  /* "arelle_cython/arelle_c/utils.pxi":115
 *     _pyValue = _charValue
 *     release(&_charValue)
 *     return _pyValue             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v__pyValue);
  __pyx_r = __pyx_v__pyValue;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/utils.pxi":106
 *         pass
 * 
 * cdef getAttrValue(const Attributes& attrs, XMLCh* uri, XMLCh* localName):             # <<<<<<<<<<<<<<
 *     cdef object _pyValue
 *     cdef const XMLCh* _XmlValue = attrs.getValue(uri, localName)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("arelle.arelle_c.getAttrValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__pyValue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/Cntlr.pxi":11
 * cdef class Cntlr:
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         global _xerces_initialized, _xerces_terminated, xerces_grammar_pool
 *         assert not _xerces_initialized, "xerces already initialized" # can only be one per instance
 */

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_5Cntlr_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_5Cntlr_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5Cntlr___init__(((struct __pyx_obj_6arelle_8arelle_c_Cntlr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_5Cntlr___init__(CYTHON_UNUSED struct __pyx_obj_6arelle_8arelle_c_Cntlr *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "arelle_cython/arelle_c/Cntlr.pxi":13
 *     def __init__(self):
 *         global _xerces_initialized, _xerces_terminated, xerces_grammar_pool
 *         assert not _xerces_initialized, "xerces already initialized" # can only be one per instance             # <<<<<<<<<<<<<<
 *         if not _xerces_initialized:
 *             Initialize()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((!(__pyx_v_6arelle_8arelle_c__xerces_initialized != 0)) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_xerces_already_initialized);
      __PYX_ERR(4, 13, __pyx_L1_error)
    }
  }
  #endif

  /* "arelle_cython/arelle_c/Cntlr.pxi":14
 *         global _xerces_initialized, _xerces_terminated, xerces_grammar_pool
 *         assert not _xerces_initialized, "xerces already initialized" # can only be one per instance
 *         if not _xerces_initialized:             # <<<<<<<<<<<<<<
 *             Initialize()
 *             _xerces_initialized = True
 */
  __pyx_t_1 = ((!(__pyx_v_6arelle_8arelle_c__xerces_initialized != 0)) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/Cntlr.pxi":15
 *         assert not _xerces_initialized, "xerces already initialized" # can only be one per instance
 *         if not _xerces_initialized:
 *             Initialize()             # <<<<<<<<<<<<<<
 *             _xerces_initialized = True
 *             initialize_constants()
 */
    xercesc::XMLPlatformUtils::Initialize();

    /* "arelle_cython/arelle_c/Cntlr.pxi":16
 *         if not _xerces_initialized:
 *             Initialize()
 *             _xerces_initialized = True             # <<<<<<<<<<<<<<
 *             initialize_constants()
 *         xerces_grammar_pool = new XMLGrammarPoolImpl(fgMemoryManager)
 */
    __pyx_v_6arelle_8arelle_c__xerces_initialized = 1;

    /* "arelle_cython/arelle_c/Cntlr.pxi":17
 *             Initialize()
 *             _xerces_initialized = True
 *             initialize_constants()             # <<<<<<<<<<<<<<
 *         xerces_grammar_pool = new XMLGrammarPoolImpl(fgMemoryManager)
 * 
 */
    __pyx_t_2 = __pyx_f_6arelle_8arelle_c_initialize_constants(); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 17, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "arelle_cython/arelle_c/Cntlr.pxi":14
 *         global _xerces_initialized, _xerces_terminated, xerces_grammar_pool
 *         assert not _xerces_initialized, "xerces already initialized" # can only be one per instance
 *         if not _xerces_initialized:             # <<<<<<<<<<<<<<
 *             Initialize()
 *             _xerces_initialized = True
 */
  }

  /* "arelle_cython/arelle_c/Cntlr.pxi":18
 *             _xerces_initialized = True
 *             initialize_constants()
 *         xerces_grammar_pool = new XMLGrammarPoolImpl(fgMemoryManager)             # <<<<<<<<<<<<<<
 * 
 *     def close(self):
 */
  __pyx_v_6arelle_8arelle_c_xerces_grammar_pool = new xercesc::XMLGrammarPoolImpl(xercesc::XMLPlatformUtils::fgMemoryManager);

  /* "arelle_cython/arelle_c/Cntlr.pxi":11
 * cdef class Cntlr:
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         global _xerces_initialized, _xerces_terminated, xerces_grammar_pool
 *         assert not _xerces_initialized, "xerces already initialized" # can only be one per instance
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("arelle.arelle_c.Cntlr.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/Cntlr.pxi":20
 *         xerces_grammar_pool = new XMLGrammarPoolImpl(fgMemoryManager)
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         global _xerces_initialized, _xerces_terminated, xerces_grammar_pool
 *         assert _xerces_initialized, "xerces termination but not initialized"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_5Cntlr_3close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_5Cntlr_3close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5Cntlr_2close(((struct __pyx_obj_6arelle_8arelle_c_Cntlr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_5Cntlr_2close(CYTHON_UNUSED struct __pyx_obj_6arelle_8arelle_c_Cntlr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("close", 0);

  /* "arelle_cython/arelle_c/Cntlr.pxi":22
 *     def close(self):
 *         global _xerces_initialized, _xerces_terminated, xerces_grammar_pool
 *         assert _xerces_initialized, "xerces termination but not initialized"             # <<<<<<<<<<<<<<
 *         assert not _xerces_terminated, "xerces terminated or not started"
 *         if _xerces_initialized and not _xerces_terminated:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(__pyx_v_6arelle_8arelle_c__xerces_initialized != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_xerces_termination_but_not_initi);
      __PYX_ERR(4, 22, __pyx_L1_error)
    }
  }
  #endif

  /* "arelle_cython/arelle_c/Cntlr.pxi":23
 *         global _xerces_initialized, _xerces_terminated, xerces_grammar_pool
 *         assert _xerces_initialized, "xerces termination but not initialized"
 *         assert not _xerces_terminated, "xerces terminated or not started"             # <<<<<<<<<<<<<<
 *         if _xerces_initialized and not _xerces_terminated:
 *             Terminate()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((!(__pyx_v_6arelle_8arelle_c__xerces_terminated != 0)) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_xerces_terminated_or_not_started);
      __PYX_ERR(4, 23, __pyx_L1_error)
    }
  }
  #endif

  /* "arelle_cython/arelle_c/Cntlr.pxi":24
 *         assert _xerces_initialized, "xerces termination but not initialized"
 *         assert not _xerces_terminated, "xerces terminated or not started"
 *         if _xerces_initialized and not _xerces_terminated:             # <<<<<<<<<<<<<<
 *             Terminate()
 *             _xerces_terminated = True
 */
  __pyx_t_2 = (__pyx_v_6arelle_8arelle_c__xerces_initialized != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_6arelle_8arelle_c__xerces_terminated != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/Cntlr.pxi":25
 *         assert not _xerces_terminated, "xerces terminated or not started"
 *         if _xerces_initialized and not _xerces_terminated:
 *             Terminate()             # <<<<<<<<<<<<<<
 *             _xerces_terminated = True
 *             _xerces_initialized = False
 */
    xercesc::XMLPlatformUtils::Terminate();

    /* "arelle_cython/arelle_c/Cntlr.pxi":26
 *         if _xerces_initialized and not _xerces_terminated:
 *             Terminate()
 *             _xerces_terminated = True             # <<<<<<<<<<<<<<
 *             _xerces_initialized = False
 *         del xerces_grammar_pool
 */
    __pyx_v_6arelle_8arelle_c__xerces_terminated = 1;

    /* "arelle_cython/arelle_c/Cntlr.pxi":27
 *             Terminate()
 *             _xerces_terminated = True
 *             _xerces_initialized = False             # <<<<<<<<<<<<<<
 *         del xerces_grammar_pool
 *         xerces_grammar_pool = NULL
 */
    __pyx_v_6arelle_8arelle_c__xerces_initialized = 0;

    /* "arelle_cython/arelle_c/Cntlr.pxi":24
 *         assert _xerces_initialized, "xerces termination but not initialized"
 *         assert not _xerces_terminated, "xerces terminated or not started"
 *         if _xerces_initialized and not _xerces_terminated:             # <<<<<<<<<<<<<<
 *             Terminate()
 *             _xerces_terminated = True
 */
  }

  /* "arelle_cython/arelle_c/Cntlr.pxi":28
 *             _xerces_terminated = True
 *             _xerces_initialized = False
 *         del xerces_grammar_pool             # <<<<<<<<<<<<<<
 *         xerces_grammar_pool = NULL
 * 
 */
  delete __pyx_v_6arelle_8arelle_c_xerces_grammar_pool;

  /* "arelle_cython/arelle_c/Cntlr.pxi":29
 *             _xerces_initialized = False
 *         del xerces_grammar_pool
 *         xerces_grammar_pool = NULL             # <<<<<<<<<<<<<<
 * 
 *     def xerces_initialized(self):
 */
  __pyx_v_6arelle_8arelle_c_xerces_grammar_pool = NULL;

  /* "arelle_cython/arelle_c/Cntlr.pxi":20
 *         xerces_grammar_pool = new XMLGrammarPoolImpl(fgMemoryManager)
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         global _xerces_initialized, _xerces_terminated, xerces_grammar_pool
 *         assert _xerces_initialized, "xerces termination but not initialized"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("arelle.arelle_c.Cntlr.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/Cntlr.pxi":31
 *         xerces_grammar_pool = NULL
 * 
 *     def xerces_initialized(self):             # <<<<<<<<<<<<<<
 *         return _xerces_initialized
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_5Cntlr_5xerces_initialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_5Cntlr_5xerces_initialized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xerces_initialized (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5Cntlr_4xerces_initialized(((struct __pyx_obj_6arelle_8arelle_c_Cntlr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_5Cntlr_4xerces_initialized(CYTHON_UNUSED struct __pyx_obj_6arelle_8arelle_c_Cntlr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("xerces_initialized", 0);

  /* "arelle_cython/arelle_c/Cntlr.pxi":32
 * 
 *     def xerces_initialized(self):
 *         return _xerces_initialized             # <<<<<<<<<<<<<<
 * 
 *     def xerces_terminated(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_6arelle_8arelle_c__xerces_initialized); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/Cntlr.pxi":31
 *         xerces_grammar_pool = NULL
 * 
 *     def xerces_initialized(self):             # <<<<<<<<<<<<<<
 *         return _xerces_initialized
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c.Cntlr.xerces_initialized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/Cntlr.pxi":34
 *         return _xerces_initialized
 * 
 *     def xerces_terminated(self):             # <<<<<<<<<<<<<<
 *         return _xerces_terminated
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_5Cntlr_7xerces_terminated(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_5Cntlr_7xerces_terminated(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xerces_terminated (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5Cntlr_6xerces_terminated(((struct __pyx_obj_6arelle_8arelle_c_Cntlr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_5Cntlr_6xerces_terminated(CYTHON_UNUSED struct __pyx_obj_6arelle_8arelle_c_Cntlr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("xerces_terminated", 0);

  /* "arelle_cython/arelle_c/Cntlr.pxi":35
 * 
 *     def xerces_terminated(self):
 *         return _xerces_terminated             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_6arelle_8arelle_c__xerces_terminated); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/Cntlr.pxi":34
 *         return _xerces_initialized
 * 
 *     def xerces_terminated(self):             # <<<<<<<<<<<<<<
 *         return _xerces_terminated
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c.Cntlr.xerces_terminated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelValue.pxi":11
 * 
 *     # prefix and namespaceURI should be dts-interned to preserve memory space, automatic when creating from xerces
 *     def __init__(self, unicode namespaceURI, unicode prefix, unicode localName):             # <<<<<<<<<<<<<<
 *         self.namespaceURI = namespaceURI
 *         self.prefix = prefix
 */

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_5QName_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_5QName_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_namespaceURI = 0;
  PyObject *__pyx_v_prefix = 0;
  PyObject *__pyx_v_localName = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_namespaceURI,&__pyx_n_s_prefix,&__pyx_n_s_localName,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_namespaceURI)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(0, 11, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_localName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(0, 11, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 11, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_namespaceURI = ((PyObject*)values[0]);
    __pyx_v_prefix = ((PyObject*)values[1]);
    __pyx_v_localName = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 11, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("arelle.arelle_c.QName.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_namespaceURI), (&PyUnicode_Type), 1, "namespaceURI", 1))) __PYX_ERR(0, 11, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_prefix), (&PyUnicode_Type), 1, "prefix", 1))) __PYX_ERR(0, 11, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_localName), (&PyUnicode_Type), 1, "localName", 1))) __PYX_ERR(0, 11, __pyx_L1_error)
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5QName___init__(((struct __pyx_obj_6arelle_8arelle_c_QName *)__pyx_v_self), __pyx_v_namespaceURI, __pyx_v_prefix, __pyx_v_localName);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_5QName___init__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self, PyObject *__pyx_v_namespaceURI, PyObject *__pyx_v_prefix, PyObject *__pyx_v_localName) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "arelle_cython/arelle_c/ModelValue.pxi":12
 *     # prefix and namespaceURI should be dts-interned to preserve memory space, automatic when creating from xerces
 *     def __init__(self, unicode namespaceURI, unicode prefix, unicode localName):
 *         self.namespaceURI = namespaceURI             # <<<<<<<<<<<<<<
 *         self.prefix = prefix
 *         self.localName = localName
 */
  __Pyx_INCREF(__pyx_v_namespaceURI);
  __Pyx_GIVEREF(__pyx_v_namespaceURI);
  __Pyx_GOTREF(__pyx_v_self->namespaceURI);
  __Pyx_DECREF(__pyx_v_self->namespaceURI);
  __pyx_v_self->namespaceURI = __pyx_v_namespaceURI;

  /* "arelle_cython/arelle_c/ModelValue.pxi":13
 *     def __init__(self, unicode namespaceURI, unicode prefix, unicode localName):
 *         self.namespaceURI = namespaceURI
 *         self.prefix = prefix             # <<<<<<<<<<<<<<
 *         self.localName = localName
 *         self.qnameValueHash = PyObject_Hash( (namespaceURI, localName) )
 */
  __Pyx_INCREF(__pyx_v_prefix);
  __Pyx_GIVEREF(__pyx_v_prefix);
  __Pyx_GOTREF(__pyx_v_self->prefix);
  __Pyx_DECREF(__pyx_v_self->prefix);
  __pyx_v_self->prefix = __pyx_v_prefix;

  /* "arelle_cython/arelle_c/ModelValue.pxi":14
 *         self.namespaceURI = namespaceURI
 *         self.prefix = prefix
 *         self.localName = localName             # <<<<<<<<<<<<<<
 *         self.qnameValueHash = PyObject_Hash( (namespaceURI, localName) )
 *     def __hash__(self):
 */
  __Pyx_INCREF(__pyx_v_localName);
  __Pyx_GIVEREF(__pyx_v_localName);
  __Pyx_GOTREF(__pyx_v_self->localName);
  __Pyx_DECREF(__pyx_v_self->localName);
  __pyx_v_self->localName = __pyx_v_localName;

  /* "arelle_cython/arelle_c/ModelValue.pxi":15
 *         self.prefix = prefix
 *         self.localName = localName
 *         self.qnameValueHash = PyObject_Hash( (namespaceURI, localName) )             # <<<<<<<<<<<<<<
 *     def __hash__(self):
 *         return self.qnameValueHash
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_namespaceURI);
  __Pyx_GIVEREF(__pyx_v_namespaceURI);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_namespaceURI);
  __Pyx_INCREF(__pyx_v_localName);
  __Pyx_GIVEREF(__pyx_v_localName);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_localName);
  __pyx_t_2 = PyObject_Hash(__pyx_t_1); if (unlikely(__pyx_t_2 == -1L && PyErr_Occurred())) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->qnameValueHash = __pyx_t_2;

  /* "arelle_cython/arelle_c/ModelValue.pxi":11
 * 
 *     # prefix and namespaceURI should be dts-interned to preserve memory space, automatic when creating from xerces
 *     def __init__(self, unicode namespaceURI, unicode prefix, unicode localName):             # <<<<<<<<<<<<<<
 *         self.namespaceURI = namespaceURI
 *         self.prefix = prefix
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c.QName.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelValue.pxi":16
 *         self.localName = localName
 *         self.qnameValueHash = PyObject_Hash( (namespaceURI, localName) )
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return self.qnameValueHash
 *     @property
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6arelle_8arelle_c_5QName_3__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6arelle_8arelle_c_5QName_3__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5QName_2__hash__(((struct __pyx_obj_6arelle_8arelle_c_QName *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6arelle_8arelle_c_5QName_2__hash__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "arelle_cython/arelle_c/ModelValue.pxi":17
 *         self.qnameValueHash = PyObject_Hash( (namespaceURI, localName) )
 *     def __hash__(self):
 *         return self.qnameValueHash             # <<<<<<<<<<<<<<
 *     @property
 *     def clarkNotation(self):
 */
  __pyx_r = __pyx_v_self->qnameValueHash;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/ModelValue.pxi":16
 *         self.localName = localName
 *         self.qnameValueHash = PyObject_Hash( (namespaceURI, localName) )
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return self.qnameValueHash
 *     @property
 */

  /* function exit code */
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelValue.pxi":19
 *         return self.qnameValueHash
 *     @property
 *     def clarkNotation(self):             # <<<<<<<<<<<<<<
 *         if self.namespaceURI:
 *             return '{{{}}}{}'.format(self.namespaceURI, self.localName)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_13clarkNotation_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_13clarkNotation_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5QName_13clarkNotation___get__(((struct __pyx_obj_6arelle_8arelle_c_QName *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_13clarkNotation___get__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "arelle_cython/arelle_c/ModelValue.pxi":20
 *     @property
 *     def clarkNotation(self):
 *         if self.namespaceURI:             # <<<<<<<<<<<<<<
 *             return '{{{}}}{}'.format(self.namespaceURI, self.localName)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->namespaceURI != Py_None) && (__Pyx_PyUnicode_IS_TRUE(__pyx_v_self->namespaceURI) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelValue.pxi":21
 *     def clarkNotation(self):
 *         if self.namespaceURI:
 *             return '{{{}}}{}'.format(self.namespaceURI, self.localName)             # <<<<<<<<<<<<<<
 *         else:
 *             return self.localName
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s__3, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self->namespaceURI, __pyx_v_self->localName};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_self->namespaceURI, __pyx_v_self->localName};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 21, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_self->namespaceURI);
      __Pyx_GIVEREF(__pyx_v_self->namespaceURI);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_self->namespaceURI);
      __Pyx_INCREF(__pyx_v_self->localName);
      __Pyx_GIVEREF(__pyx_v_self->localName);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_self->localName);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/ModelValue.pxi":20
 *     @property
 *     def clarkNotation(self):
 *         if self.namespaceURI:             # <<<<<<<<<<<<<<
 *             return '{{{}}}{}'.format(self.namespaceURI, self.localName)
 *         else:
 */
  }

  /* "arelle_cython/arelle_c/ModelValue.pxi":23
 *             return '{{{}}}{}'.format(self.namespaceURI, self.localName)
 *         else:
 *             return self.localName             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.__str__()
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->localName);
    __pyx_r = __pyx_v_self->localName;
    goto __pyx_L0;
  }

  /* "arelle_cython/arelle_c/ModelValue.pxi":19
 *         return self.qnameValueHash
 *     @property
 *     def clarkNotation(self):             # <<<<<<<<<<<<<<
 *         if self.namespaceURI:
 *             return '{{{}}}{}'.format(self.namespaceURI, self.localName)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("arelle.arelle_c.QName.clarkNotation.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelValue.pxi":24
 *         else:
 *             return self.localName
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 *     def __str__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5QName_4__repr__(((struct __pyx_obj_6arelle_8arelle_c_QName *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_4__repr__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "arelle_cython/arelle_c/ModelValue.pxi":25
 *             return self.localName
 *     def __repr__(self):
 *         return self.__str__()             # <<<<<<<<<<<<<<
 *     def __str__(self):
 *         if self.prefix and self.prefix != '':
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/ModelValue.pxi":24
 *         else:
 *             return self.localName
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 *     def __str__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("arelle.arelle_c.QName.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelValue.pxi":26
 *     def __repr__(self):
 *         return self.__str__()
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         if self.prefix and self.prefix != '':
 *             return self.prefix + ':' + self.localName
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_7__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_7__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5QName_6__str__(((struct __pyx_obj_6arelle_8arelle_c_QName *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_6__str__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "arelle_cython/arelle_c/ModelValue.pxi":27
 *         return self.__str__()
 *     def __str__(self):
 *         if self.prefix and self.prefix != '':             # <<<<<<<<<<<<<<
 *             return self.prefix + ':' + self.localName
 *         else:
 */
  __pyx_t_2 = (__pyx_v_self->prefix != Py_None) && (__Pyx_PyUnicode_IS_TRUE(__pyx_v_self->prefix) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->prefix, __pyx_kp_s__4, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 27, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelValue.pxi":28
 *     def __str__(self):
 *         if self.prefix and self.prefix != '':
 *             return self.prefix + ':' + self.localName             # <<<<<<<<<<<<<<
 *         else:
 *             return self.localName
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_self->prefix, __pyx_kp_s__5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyUnicode_ConcatSafe(__pyx_t_4, __pyx_v_self->localName); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/ModelValue.pxi":27
 *         return self.__str__()
 *     def __str__(self):
 *         if self.prefix and self.prefix != '':             # <<<<<<<<<<<<<<
 *             return self.prefix + ':' + self.localName
 *         else:
 */
  }

  /* "arelle_cython/arelle_c/ModelValue.pxi":30
 *             return self.prefix + ':' + self.localName
 *         else:
 *             return self.localName             # <<<<<<<<<<<<<<
 *     def __richcmp__(self, other, op):
 *         if op == 0: # lt
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->localName);
    __pyx_r = __pyx_v_self->localName;
    goto __pyx_L0;
  }

  /* "arelle_cython/arelle_c/ModelValue.pxi":26
 *     def __repr__(self):
 *         return self.__str__()
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         if self.prefix and self.prefix != '':
 *             return self.prefix + ':' + self.localName
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("arelle.arelle_c.QName.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelValue.pxi":31
 *         else:
 *             return self.localName
 *     def __richcmp__(self, other, op):             # <<<<<<<<<<<<<<
 *         if op == 0: # lt
 *             return (self.namespaceURI is None and other.namespaceURI) or \
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op) {
  PyObject *__pyx_v_op = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_op = __Pyx_PyInt_From_int(__pyx_arg_op); if (unlikely(!__pyx_v_op)) __PYX_ERR(0, 31, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_op);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("arelle.arelle_c.QName.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5QName_8__richcmp__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_op));

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_op);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_8__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "arelle_cython/arelle_c/ModelValue.pxi":32
 *             return self.localName
 *     def __richcmp__(self, other, op):
 *         if op == 0: # lt             # <<<<<<<<<<<<<<
 *             return (self.namespaceURI is None and other.namespaceURI) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_op, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/ModelValue.pxi":33
 *     def __richcmp__(self, other, op):
 *         if op == 0: # lt
 *             return (self.namespaceURI is None and other.namespaceURI) or \             # <<<<<<<<<<<<<<
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName < other.localName)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = (__pyx_t_3 == Py_None);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_2) {
      goto __pyx_L5_next_or;
    } else {
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 33, __pyx_L1_error)
    if (!__pyx_t_2) {
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_1 = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_L5_next_or:;

    /* "arelle_cython/arelle_c/ModelValue.pxi":34
 *         if op == 0: # lt
 *             return (self.namespaceURI is None and other.namespaceURI) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \             # <<<<<<<<<<<<<<
 *                     (self.namespaceURI == other.namespaceURI and self.localName < other.localName)
 *         elif op == 1: # le
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_2) {
      goto __pyx_L7_next_or;
    } else {
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_2) {
      goto __pyx_L7_next_or;
    } else {
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 34, __pyx_L1_error)
    if (!__pyx_t_2) {
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_L7_next_or:;

    /* "arelle_cython/arelle_c/ModelValue.pxi":35
 *             return (self.namespaceURI is None and other.namespaceURI) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName < other.localName)             # <<<<<<<<<<<<<<
 *         elif op == 1: # le
 *             return (self.namespaceURI is None and other.namespaceURI) or \
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 35, __pyx_L1_error)
    if (__pyx_t_2) {
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_1 = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_localName); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_localName); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = __pyx_t_5;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_L4_bool_binop_done:;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/ModelValue.pxi":32
 *             return self.localName
 *     def __richcmp__(self, other, op):
 *         if op == 0: # lt             # <<<<<<<<<<<<<<
 *             return (self.namespaceURI is None and other.namespaceURI) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \
 */
  }

  /* "arelle_cython/arelle_c/ModelValue.pxi":36
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName < other.localName)
 *         elif op == 1: # le             # <<<<<<<<<<<<<<
 *             return (self.namespaceURI is None and other.namespaceURI) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_op, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/ModelValue.pxi":37
 *                     (self.namespaceURI == other.namespaceURI and self.localName < other.localName)
 *         elif op == 1: # le
 *             return (self.namespaceURI is None and other.namespaceURI) or \             # <<<<<<<<<<<<<<
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName <= other.localName)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = (__pyx_t_5 == Py_None);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_2) {
      goto __pyx_L12_next_or;
    } else {
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 37, __pyx_L1_error)
    if (!__pyx_t_2) {
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_L12_next_or:;

    /* "arelle_cython/arelle_c/ModelValue.pxi":38
 *         elif op == 1: # le
 *             return (self.namespaceURI is None and other.namespaceURI) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \             # <<<<<<<<<<<<<<
 *                     (self.namespaceURI == other.namespaceURI and self.localName <= other.localName)
 *         elif op == 2: # eq
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_2) {
      goto __pyx_L14_next_or;
    } else {
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_2) {
      goto __pyx_L14_next_or;
    } else {
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 38, __pyx_L1_error)
    if (!__pyx_t_2) {
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_1 = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_L14_next_or:;

    /* "arelle_cython/arelle_c/ModelValue.pxi":39
 *             return (self.namespaceURI is None and other.namespaceURI) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName <= other.localName)             # <<<<<<<<<<<<<<
 *         elif op == 2: # eq
 *             try:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 39, __pyx_L1_error)
    if (__pyx_t_2) {
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_localName); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_localName); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_L11_bool_binop_done:;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/ModelValue.pxi":36
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName < other.localName)
 *         elif op == 1: # le             # <<<<<<<<<<<<<<
 *             return (self.namespaceURI is None and other.namespaceURI) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \
 */
  }

  /* "arelle_cython/arelle_c/ModelValue.pxi":40
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName <= other.localName)
 *         elif op == 2: # eq             # <<<<<<<<<<<<<<
 *             try:
 *                 return (self.qnameValueHash == other.qnameValueHash and
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_op, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/ModelValue.pxi":41
 *                     (self.namespaceURI == other.namespaceURI and self.localName <= other.localName)
 *         elif op == 2: # eq
 *             try:             # <<<<<<<<<<<<<<
 *                 return (self.qnameValueHash == other.qnameValueHash and
 *                         self.localName == other.localName and self.namespaceURI == other.namespaceURI)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "arelle_cython/arelle_c/ModelValue.pxi":42
 *         elif op == 2: # eq
 *             try:
 *                 return (self.qnameValueHash == other.qnameValueHash and             # <<<<<<<<<<<<<<
 *                         self.localName == other.localName and self.namespaceURI == other.namespaceURI)
 *             except AttributeError:
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_qnameValueHash); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 42, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_qnameValueHash); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 42, __pyx_L18_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 42, __pyx_L18_error)
        if (__pyx_t_2) {
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else {
          __Pyx_INCREF(__pyx_t_5);
          __pyx_t_1 = __pyx_t_5;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L26_bool_binop_done;
        }

        /* "arelle_cython/arelle_c/ModelValue.pxi":43
 *             try:
 *                 return (self.qnameValueHash == other.qnameValueHash and
 *                         self.localName == other.localName and self.namespaceURI == other.namespaceURI)             # <<<<<<<<<<<<<<
 *             except AttributeError:
 *                 return False
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_localName); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 43, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_localName); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 43, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 43, __pyx_L18_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 43, __pyx_L18_error)
        if (__pyx_t_2) {
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(__pyx_t_3);
          __pyx_t_1 = __pyx_t_3;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L26_bool_binop_done;
        }
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 43, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 43, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 43, __pyx_L18_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_INCREF(__pyx_t_5);
        __pyx_t_1 = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_L26_bool_binop_done:;
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L22_try_return;

        /* "arelle_cython/arelle_c/ModelValue.pxi":41
 *                     (self.namespaceURI == other.namespaceURI and self.localName <= other.localName)
 *         elif op == 2: # eq
 *             try:             # <<<<<<<<<<<<<<
 *                 return (self.qnameValueHash == other.qnameValueHash and
 *                         self.localName == other.localName and self.namespaceURI == other.namespaceURI)
 */
      }
      __pyx_L18_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "arelle_cython/arelle_c/ModelValue.pxi":44
 *                 return (self.qnameValueHash == other.qnameValueHash and
 *                         self.localName == other.localName and self.namespaceURI == other.namespaceURI)
 *             except AttributeError:             # <<<<<<<<<<<<<<
 *                 return False
 *         elif op == 3: # ne
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("arelle.arelle_c.QName.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 44, __pyx_L20_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_4);

        /* "arelle_cython/arelle_c/ModelValue.pxi":45
 *                         self.localName == other.localName and self.namespaceURI == other.namespaceURI)
 *             except AttributeError:
 *                 return False             # <<<<<<<<<<<<<<
 *         elif op == 3: # ne
 *             return not self.__eq__(other)
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L21_except_return;
      }
      goto __pyx_L20_except_error;
      __pyx_L20_except_error:;

      /* "arelle_cython/arelle_c/ModelValue.pxi":41
 *                     (self.namespaceURI == other.namespaceURI and self.localName <= other.localName)
 *         elif op == 2: # eq
 *             try:             # <<<<<<<<<<<<<<
 *                 return (self.qnameValueHash == other.qnameValueHash and
 *                         self.localName == other.localName and self.namespaceURI == other.namespaceURI)
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L22_try_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
      __pyx_L21_except_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      goto __pyx_L0;
    }

    /* "arelle_cython/arelle_c/ModelValue.pxi":40
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI < other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName <= other.localName)
 *         elif op == 2: # eq             # <<<<<<<<<<<<<<
 *             try:
 *                 return (self.qnameValueHash == other.qnameValueHash and
 */
  }

  /* "arelle_cython/arelle_c/ModelValue.pxi":46
 *             except AttributeError:
 *                 return False
 *         elif op == 3: # ne             # <<<<<<<<<<<<<<
 *             return not self.__eq__(other)
 *         elif op == 4: # gt
 */
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_op, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/ModelValue.pxi":47
 *                 return False
 *         elif op == 3: # ne
 *             return not self.__eq__(other)             # <<<<<<<<<<<<<<
 *         elif op == 4: # gt
 *             return (self.namespaceURI and other.namespaceURI is None) or \
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_eq); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_other); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_other};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_other};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_INCREF(__pyx_v_other);
        __Pyx_GIVEREF(__pyx_v_other);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_other);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/ModelValue.pxi":46
 *             except AttributeError:
 *                 return False
 *         elif op == 3: # ne             # <<<<<<<<<<<<<<
 *             return not self.__eq__(other)
 *         elif op == 4: # gt
 */
  }

  /* "arelle_cython/arelle_c/ModelValue.pxi":48
 *         elif op == 3: # ne
 *             return not self.__eq__(other)
 *         elif op == 4: # gt             # <<<<<<<<<<<<<<
 *             return (self.namespaceURI and other.namespaceURI is None) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI > other.namespaceURI) or \
 */
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_op, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/ModelValue.pxi":49
 *             return not self.__eq__(other)
 *         elif op == 4: # gt
 *             return (self.namespaceURI and other.namespaceURI is None) or \             # <<<<<<<<<<<<<<
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI > other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName > other.localName)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_2) {
      goto __pyx_L32_next_or;
    } else {
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = (__pyx_t_5 == Py_None);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_2) {
    } else {
      __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L31_bool_binop_done;
    }
    __pyx_L32_next_or:;

    /* "arelle_cython/arelle_c/ModelValue.pxi":50
 *         elif op == 4: # gt
 *             return (self.namespaceURI and other.namespaceURI is None) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI > other.namespaceURI) or \             # <<<<<<<<<<<<<<
 *                     (self.namespaceURI == other.namespaceURI and self.localName > other.localName)
 *         elif op == 5: # ge
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_2) {
      goto __pyx_L34_next_or;
    } else {
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!__pyx_t_2) {
      goto __pyx_L34_next_or;
    } else {
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 50, __pyx_L1_error)
    if (!__pyx_t_2) {
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L31_bool_binop_done;
    }
    __pyx_L34_next_or:;

    /* "arelle_cython/arelle_c/ModelValue.pxi":51
 *             return (self.namespaceURI and other.namespaceURI is None) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI > other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName > other.localName)             # <<<<<<<<<<<<<<
 *         elif op == 5: # ge
 *             return (self.namespaceURI and other.namespaceURI is None) or \
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 51, __pyx_L1_error)
    if (__pyx_t_2) {
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_4 = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L31_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_localName); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_localName); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_L31_bool_binop_done:;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/ModelValue.pxi":48
 *         elif op == 3: # ne
 *             return not self.__eq__(other)
 *         elif op == 4: # gt             # <<<<<<<<<<<<<<
 *             return (self.namespaceURI and other.namespaceURI is None) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI > other.namespaceURI) or \
 */
  }

  /* "arelle_cython/arelle_c/ModelValue.pxi":52
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI > other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName > other.localName)
 *         elif op == 5: # ge             # <<<<<<<<<<<<<<
 *             return (self.namespaceURI and other.namespaceURI is None) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI > other.namespaceURI) or \
 */
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_op, __pyx_int_5, 5, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/ModelValue.pxi":53
 *                     (self.namespaceURI == other.namespaceURI and self.localName > other.localName)
 *         elif op == 5: # ge
 *             return (self.namespaceURI and other.namespaceURI is None) or \             # <<<<<<<<<<<<<<
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI > other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName >= other.localName)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!__pyx_t_2) {
      goto __pyx_L39_next_or;
    } else {
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = (__pyx_t_1 == Py_None);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L38_bool_binop_done;
    }
    __pyx_L39_next_or:;

    /* "arelle_cython/arelle_c/ModelValue.pxi":54
 *         elif op == 5: # ge
 *             return (self.namespaceURI and other.namespaceURI is None) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI > other.namespaceURI) or \             # <<<<<<<<<<<<<<
 *                     (self.namespaceURI == other.namespaceURI and self.localName >= other.localName)
 *         else: # no such op
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!__pyx_t_2) {
      goto __pyx_L41_next_or;
    } else {
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!__pyx_t_2) {
      goto __pyx_L41_next_or;
    } else {
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 54, __pyx_L1_error)
    if (!__pyx_t_2) {
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_4 = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L38_bool_binop_done;
    }
    __pyx_L41_next_or:;

    /* "arelle_cython/arelle_c/ModelValue.pxi":55
 *             return (self.namespaceURI and other.namespaceURI is None) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI > other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName >= other.localName)             # <<<<<<<<<<<<<<
 *         else: # no such op
 *             return False # bad operation
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_namespaceURI); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 55, __pyx_L1_error)
    if (__pyx_t_2) {
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L38_bool_binop_done;
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_localName); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_localName); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_4 = __pyx_t_5;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_L38_bool_binop_done:;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/ModelValue.pxi":52
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI > other.namespaceURI) or \
 *                     (self.namespaceURI == other.namespaceURI and self.localName > other.localName)
 *         elif op == 5: # ge             # <<<<<<<<<<<<<<
 *             return (self.namespaceURI and other.namespaceURI is None) or \
 *                     (self.namespaceURI and other.namespaceURI and self.namespaceURI > other.namespaceURI) or \
 */
  }

  /* "arelle_cython/arelle_c/ModelValue.pxi":57
 *                     (self.namespaceURI == other.namespaceURI and self.localName >= other.localName)
 *         else: # no such op
 *             return False # bad operation             # <<<<<<<<<<<<<<
 *     def __bool__(self):
 *         # QName object bool is false if there is no local name (even if there is a namespace URI).
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "arelle_cython/arelle_c/ModelValue.pxi":31
 *         else:
 *             return self.localName
 *     def __richcmp__(self, other, op):             # <<<<<<<<<<<<<<
 *         if op == 0: # lt
 *             return (self.namespaceURI is None and other.namespaceURI) or \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("arelle.arelle_c.QName.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelValue.pxi":58
 *         else: # no such op
 *             return False # bad operation
 *     def __bool__(self):             # <<<<<<<<<<<<<<
 *         # QName object bool is false if there is no local name (even if there is a namespace URI).
 *         return self.localName is None or PyObject_Length(self.localName) == 0
 */

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_5QName_11__bool__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_5QName_11__bool__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5QName_10__bool__(((struct __pyx_obj_6arelle_8arelle_c_QName *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_5QName_10__bool__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__bool__", 0);

  /* "arelle_cython/arelle_c/ModelValue.pxi":60
 *     def __bool__(self):
 *         # QName object bool is false if there is no local name (even if there is a namespace URI).
 *         return self.localName is None or PyObject_Length(self.localName) == 0             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = (__pyx_v_self->localName == ((PyObject*)Py_None));
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = __pyx_v_self->localName;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == -1L)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = (__pyx_t_4 == 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/ModelValue.pxi":58
 *         else: # no such op
 *             return False # bad operation
 *     def __bool__(self):             # <<<<<<<<<<<<<<
 *         # QName object bool is false if there is no local name (even if there is a namespace URI).
 *         return self.localName is None or PyObject_Length(self.localName) == 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("arelle.arelle_c.QName.__bool__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelValue.pxi":6
 * cdef class QName:
 *     cdef long qnameValueHash
 *     cdef readonly unicode namespaceURI             # <<<<<<<<<<<<<<
 *     cdef readonly unicode prefix
 *     cdef readonly unicode localName
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_12namespaceURI_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_12namespaceURI_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5QName_12namespaceURI___get__(((struct __pyx_obj_6arelle_8arelle_c_QName *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_12namespaceURI___get__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->namespaceURI);
  __pyx_r = __pyx_v_self->namespaceURI;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelValue.pxi":7
 *     cdef long qnameValueHash
 *     cdef readonly unicode namespaceURI
 *     cdef readonly unicode prefix             # <<<<<<<<<<<<<<
 *     cdef readonly unicode localName
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_6prefix_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_6prefix_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5QName_6prefix___get__(((struct __pyx_obj_6arelle_8arelle_c_QName *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_6prefix___get__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->prefix);
  __pyx_r = __pyx_v_self->prefix;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelValue.pxi":8
 *     cdef readonly unicode namespaceURI
 *     cdef readonly unicode prefix
 *     cdef readonly unicode localName             # <<<<<<<<<<<<<<
 * 
 *     # prefix and namespaceURI should be dts-interned to preserve memory space, automatic when creating from xerces
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_9localName_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_5QName_9localName_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_5QName_9localName___get__(((struct __pyx_obj_6arelle_8arelle_c_QName *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_5QName_9localName___get__(struct __pyx_obj_6arelle_8arelle_c_QName *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->localName);
  __pyx_r = __pyx_v_self->localName;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":36
 * 
 * 
 *     def __init__(self, modelManager):             # <<<<<<<<<<<<<<
 *         self.modelManager = modelManager
 *         self.cntlr = modelManager.cntlr
 */

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_9ModelXbrl_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_9ModelXbrl_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_modelManager = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_modelManager,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_modelManager)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 36, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_modelManager = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 36, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("arelle.arelle_c.ModelXbrl.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6arelle_8arelle_c_9ModelXbrl___init__(((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)__pyx_v_self), __pyx_v_modelManager);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_9ModelXbrl___init__(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self, PyObject *__pyx_v_modelManager) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":37
 * 
 *     def __init__(self, modelManager):
 *         self.modelManager = modelManager             # <<<<<<<<<<<<<<
 *         self.cntlr = modelManager.cntlr
 *         self.sax2_parser = NULL
 */
  __Pyx_INCREF(__pyx_v_modelManager);
  __Pyx_GIVEREF(__pyx_v_modelManager);
  __Pyx_GOTREF(__pyx_v_self->modelManager);
  __Pyx_DECREF(__pyx_v_self->modelManager);
  __pyx_v_self->modelManager = __pyx_v_modelManager;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":38
 *     def __init__(self, modelManager):
 *         self.modelManager = modelManager
 *         self.cntlr = modelManager.cntlr             # <<<<<<<<<<<<<<
 *         self.sax2_parser = NULL
 *         self.dom_parser = NULL
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_modelManager, __pyx_n_s_cntlr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->cntlr);
  __Pyx_DECREF(__pyx_v_self->cntlr);
  __pyx_v_self->cntlr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":39
 *         self.modelManager = modelManager
 *         self.cntlr = modelManager.cntlr
 *         self.sax2_parser = NULL             # <<<<<<<<<<<<<<
 *         self.dom_parser = NULL
 *         self.internedStrings = dict()
 */
  __pyx_v_self->sax2_parser = NULL;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":40
 *         self.cntlr = modelManager.cntlr
 *         self.sax2_parser = NULL
 *         self.dom_parser = NULL             # <<<<<<<<<<<<<<
 *         self.internedStrings = dict()
 *         self.urlDocs = dict()
 */
  __pyx_v_self->dom_parser = NULL;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":41
 *         self.sax2_parser = NULL
 *         self.dom_parser = NULL
 *         self.internedStrings = dict()             # <<<<<<<<<<<<<<
 *         self.urlDocs = dict()
 *         self.mappedUrls = dict()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->internedStrings);
  __Pyx_DECREF(__pyx_v_self->internedStrings);
  __pyx_v_self->internedStrings = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":42
 *         self.dom_parser = NULL
 *         self.internedStrings = dict()
 *         self.urlDocs = dict()             # <<<<<<<<<<<<<<
 *         self.mappedUrls = dict()
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->urlDocs);
  __Pyx_DECREF(__pyx_v_self->urlDocs);
  __pyx_v_self->urlDocs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":43
 *         self.internedStrings = dict()
 *         self.urlDocs = dict()
 *         self.mappedUrls = dict()             # <<<<<<<<<<<<<<
 * 
 *     def close(self):
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->mappedUrls);
  __Pyx_DECREF(__pyx_v_self->mappedUrls);
  __pyx_v_self->mappedUrls = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":36
 * 
 * 
 *     def __init__(self, modelManager):             # <<<<<<<<<<<<<<
 *         self.modelManager = modelManager
 *         self.cntlr = modelManager.cntlr
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c.ModelXbrl.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":45
 *         self.mappedUrls = dict()
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         if self.sax2_parser != NULL:
 *             del self.sax2_parser
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_3close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_3close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_9ModelXbrl_2close(((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_2close(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("close", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":46
 * 
 *     def close(self):
 *         if self.sax2_parser != NULL:             # <<<<<<<<<<<<<<
 *             del self.sax2_parser
 *             self.sax2_parser = NULL
 */
  __pyx_t_1 = ((__pyx_v_self->sax2_parser != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":47
 *     def close(self):
 *         if self.sax2_parser != NULL:
 *             del self.sax2_parser             # <<<<<<<<<<<<<<
 *             self.sax2_parser = NULL
 *         self.internStrings.clear()
 */
    delete __pyx_v_self->sax2_parser;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":48
 *         if self.sax2_parser != NULL:
 *             del self.sax2_parser
 *             self.sax2_parser = NULL             # <<<<<<<<<<<<<<
 *         self.internStrings.clear()
 * 
 */
    __pyx_v_self->sax2_parser = NULL;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":46
 * 
 *     def close(self):
 *         if self.sax2_parser != NULL:             # <<<<<<<<<<<<<<
 *             del self.sax2_parser
 *             self.sax2_parser = NULL
 */
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":49
 *             del self.sax2_parser
 *             self.sax2_parser = NULL
 *         self.internStrings.clear()             # <<<<<<<<<<<<<<
 * 
 *     cpdef internString(self, unicode str):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_internStrings); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_clear); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 49, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 49, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":45
 *         self.mappedUrls = dict()
 * 
 *     def close(self):             # <<<<<<<<<<<<<<
 *         if self.sax2_parser != NULL:
 *             del self.sax2_parser
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("arelle.arelle_c.ModelXbrl.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":51
 *         self.internStrings.clear()
 * 
 *     cpdef internString(self, unicode str):             # <<<<<<<<<<<<<<
 *         if str is None:
 *             return None
 */

static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_5internString(PyObject *__pyx_v_self, PyObject *__pyx_v_str); /*proto*/
static PyObject *__pyx_f_6arelle_8arelle_c_9ModelXbrl_internString(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self, PyObject *__pyx_v_str, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("internString", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_internString); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6arelle_8arelle_c_9ModelXbrl_5internString)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_str};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 51, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_str};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 51, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 51, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(__pyx_v_str);
          __Pyx_GIVEREF(__pyx_v_str);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_str);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 51, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":52
 * 
 *     cpdef internString(self, unicode str):
 *         if str is None:             # <<<<<<<<<<<<<<
 *             return None
 *         # if string is in internStrings return an interned version of str, otherwise intern str
 */
  __pyx_t_6 = (__pyx_v_str == ((PyObject*)Py_None));
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":53
 *     cpdef internString(self, unicode str):
 *         if str is None:
 *             return None             # <<<<<<<<<<<<<<
 *         # if string is in internStrings return an interned version of str, otherwise intern str
 *         return self.internedStrings.setdefault(str, str)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":52
 * 
 *     cpdef internString(self, unicode str):
 *         if str is None:             # <<<<<<<<<<<<<<
 *             return None
 *         # if string is in internStrings return an interned version of str, otherwise intern str
 */
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":55
 *             return None
 *         # if string is in internStrings return an interned version of str, otherwise intern str
 *         return self.internedStrings.setdefault(str, str)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->internedStrings == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "setdefault");
    __PYX_ERR(1, 55, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_SetDefault(__pyx_v_self->internedStrings, __pyx_v_str, __pyx_v_str, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":51
 *         self.internStrings.clear()
 * 
 *     cpdef internString(self, unicode str):             # <<<<<<<<<<<<<<
 *         if str is None:
 *             return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("arelle.arelle_c.ModelXbrl.internString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_5internString(PyObject *__pyx_v_self, PyObject *__pyx_v_str); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_5internString(PyObject *__pyx_v_self, PyObject *__pyx_v_str) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("internString (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_str), (&PyUnicode_Type), 1, "str", 1))) __PYX_ERR(1, 51, __pyx_L1_error)
  __pyx_r = __pyx_pf_6arelle_8arelle_c_9ModelXbrl_4internString(((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)__pyx_v_self), ((PyObject*)__pyx_v_str));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_4internString(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self, PyObject *__pyx_v_str) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("internString", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6arelle_8arelle_c_9ModelXbrl_internString(__pyx_v_self, __pyx_v_str, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c.ModelXbrl.internString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":93
 *     #    SAX2Handler.setModelDocument(NULL) # dereference modelDocument
 * 
 *     def identifyXmlFile(self, pyFileDesc):             # <<<<<<<<<<<<<<
 * 
 *         # open a minimal parser for examining elements without any schema or further checking
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_7identifyXmlFile(PyObject *__pyx_v_self, PyObject *__pyx_v_pyFileDesc); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_7identifyXmlFile(PyObject *__pyx_v_self, PyObject *__pyx_v_pyFileDesc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("identifyXmlFile (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_9ModelXbrl_6identifyXmlFile(((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)__pyx_v_self), ((PyObject *)__pyx_v_pyFileDesc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_6identifyXmlFile(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self, PyObject *__pyx_v_pyFileDesc) {
  xercesc::SAX2XMLReader *__pyx_v_parser;
  PyObject *__pyx_v_pyIdentificationResults = 0;
  void *__pyx_v_pyIdentificationResultsPtr;
  __pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler *__pyx_v_identificationSax2Handler;
  void *__pyx_v_modelXbrlPtr;
  __pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver *__pyx_v_modelXbrlEntityResolver;
  xercesc::SAX2XMLReaderImpl *__pyx_v_sax2parser;
  xercesc::XMLPScanToken *__pyx_v_token;
  bool __pyx_v_result;
  xercesc::InputSource *__pyx_v_inpSrc;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler *__pyx_t_3;
  __pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver *__pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("identifyXmlFile", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":96
 * 
 *         # open a minimal parser for examining elements without any schema or further checking
 *         cdef SAX2XMLReader* parser = createXMLReader()             # <<<<<<<<<<<<<<
 *         parser.setFeature(fgXercesLoadSchema, False)
 *         parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 */
  __pyx_v_parser = xercesc::XMLReaderFactory::createXMLReader();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":97
 *         # open a minimal parser for examining elements without any schema or further checking
 *         cdef SAX2XMLReader* parser = createXMLReader()
 *         parser.setFeature(fgXercesLoadSchema, False)             # <<<<<<<<<<<<<<
 *         parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 *         cdef object pyIdentificationResults = genobj(type=u"unknown XML",
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesLoadSchema, 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":98
 *         cdef SAX2XMLReader* parser = createXMLReader()
 *         parser.setFeature(fgXercesLoadSchema, False)
 *         parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)             # <<<<<<<<<<<<<<
 *         cdef object pyIdentificationResults = genobj(type=u"unknown XML",
 *                                                      schemaRefs=set(),
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgSAX2CoreNameSpacePrefixes, 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":99
 *         parser.setFeature(fgXercesLoadSchema, False)
 *         parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 *         cdef object pyIdentificationResults = genobj(type=u"unknown XML",             # <<<<<<<<<<<<<<
 *                                                      schemaRefs=set(),
 *                                                      linkbaseRefs=set(),
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_type, __pyx_kp_u_unknown_XML) < 0) __PYX_ERR(1, 99, __pyx_L1_error)
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_schemaRefs, __pyx_t_2) < 0) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_linkbaseRefs, __pyx_t_2) < 0) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_nonDtsSchemaRefs, __pyx_t_2) < 0) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":103
 *                                                      linkbaseRefs=set(),
 *                                                      nonDtsSchemaRefs=set(),
 *                                                      targetNamespace=None,             # <<<<<<<<<<<<<<
 *                                                      targetNamespacePrefix=None,
 *                                                      errors=[])
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_targetNamespace, Py_None) < 0) __PYX_ERR(1, 99, __pyx_L1_error)

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":104
 *                                                      nonDtsSchemaRefs=set(),
 *                                                      targetNamespace=None,
 *                                                      targetNamespacePrefix=None,             # <<<<<<<<<<<<<<
 *                                                      errors=[])
 *         cdef void* pyIdentificationResultsPtr = <void*>pyIdentificationResults
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_targetNamespacePrefix, Py_None) < 0) __PYX_ERR(1, 99, __pyx_L1_error)

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":105
 *                                                      targetNamespace=None,
 *                                                      targetNamespacePrefix=None,
 *                                                      errors=[])             # <<<<<<<<<<<<<<
 *         cdef void* pyIdentificationResultsPtr = <void*>pyIdentificationResults
 *         cdef ModelXbrlIdentificationSAX2Handler * identificationSax2Handler = new ModelXbrlIdentificationSAX2Handler(pyIdentificationResultsPtr)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_errors, __pyx_t_2) < 0) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":99
 *         parser.setFeature(fgXercesLoadSchema, False)
 *         parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 *         cdef object pyIdentificationResults = genobj(type=u"unknown XML",             # <<<<<<<<<<<<<<
 *                                                      schemaRefs=set(),
 *                                                      linkbaseRefs=set(),
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6arelle_8arelle_c_genobj), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pyIdentificationResults = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":106
 *                                                      targetNamespacePrefix=None,
 *                                                      errors=[])
 *         cdef void* pyIdentificationResultsPtr = <void*>pyIdentificationResults             # <<<<<<<<<<<<<<
 *         cdef ModelXbrlIdentificationSAX2Handler * identificationSax2Handler = new ModelXbrlIdentificationSAX2Handler(pyIdentificationResultsPtr)
 *         parser.setErrorHandler(identificationSax2Handler)
 */
  __pyx_v_pyIdentificationResultsPtr = ((void *)__pyx_v_pyIdentificationResults);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":107
 *                                                      errors=[])
 *         cdef void* pyIdentificationResultsPtr = <void*>pyIdentificationResults
 *         cdef ModelXbrlIdentificationSAX2Handler * identificationSax2Handler = new ModelXbrlIdentificationSAX2Handler(pyIdentificationResultsPtr)             # <<<<<<<<<<<<<<
 *         parser.setErrorHandler(identificationSax2Handler)
 *         parser.setContentHandler(identificationSax2Handler)
 */
  try {
    __pyx_t_3 = new __pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler(__pyx_v_pyIdentificationResultsPtr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 107, __pyx_L1_error)
  }
  __pyx_v_identificationSax2Handler = __pyx_t_3;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":108
 *         cdef void* pyIdentificationResultsPtr = <void*>pyIdentificationResults
 *         cdef ModelXbrlIdentificationSAX2Handler * identificationSax2Handler = new ModelXbrlIdentificationSAX2Handler(pyIdentificationResultsPtr)
 *         parser.setErrorHandler(identificationSax2Handler)             # <<<<<<<<<<<<<<
 *         parser.setContentHandler(identificationSax2Handler)
 *         parser.setLexicalHandler(identificationSax2Handler)
 */
  __pyx_v_parser->setErrorHandler(__pyx_v_identificationSax2Handler);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":109
 *         cdef ModelXbrlIdentificationSAX2Handler * identificationSax2Handler = new ModelXbrlIdentificationSAX2Handler(pyIdentificationResultsPtr)
 *         parser.setErrorHandler(identificationSax2Handler)
 *         parser.setContentHandler(identificationSax2Handler)             # <<<<<<<<<<<<<<
 *         parser.setLexicalHandler(identificationSax2Handler)
 *         cdef void* modelXbrlPtr = <void*>self
 */
  __pyx_v_parser->setContentHandler(__pyx_v_identificationSax2Handler);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":110
 *         parser.setErrorHandler(identificationSax2Handler)
 *         parser.setContentHandler(identificationSax2Handler)
 *         parser.setLexicalHandler(identificationSax2Handler)             # <<<<<<<<<<<<<<
 *         cdef void* modelXbrlPtr = <void*>self
 *         cdef ModelXbrlEntityResolver * modelXbrlEntityResolver = new ModelXbrlEntityResolver(modelXbrlPtr)
 */
  __pyx_v_parser->setLexicalHandler(__pyx_v_identificationSax2Handler);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":111
 *         parser.setContentHandler(identificationSax2Handler)
 *         parser.setLexicalHandler(identificationSax2Handler)
 *         cdef void* modelXbrlPtr = <void*>self             # <<<<<<<<<<<<<<
 *         cdef ModelXbrlEntityResolver * modelXbrlEntityResolver = new ModelXbrlEntityResolver(modelXbrlPtr)
 *         cdef SAX2XMLReaderImpl* sax2parser = <SAX2XMLReaderImpl*>parser
 */
  __pyx_v_modelXbrlPtr = ((void *)__pyx_v_self);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":112
 *         parser.setLexicalHandler(identificationSax2Handler)
 *         cdef void* modelXbrlPtr = <void*>self
 *         cdef ModelXbrlEntityResolver * modelXbrlEntityResolver = new ModelXbrlEntityResolver(modelXbrlPtr)             # <<<<<<<<<<<<<<
 *         cdef SAX2XMLReaderImpl* sax2parser = <SAX2XMLReaderImpl*>parser
 *         sax2parser.setXMLEntityResolver(modelXbrlEntityResolver)
 */
  try {
    __pyx_t_4 = new __pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver(__pyx_v_modelXbrlPtr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 112, __pyx_L1_error)
  }
  __pyx_v_modelXbrlEntityResolver = __pyx_t_4;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":113
 *         cdef void* modelXbrlPtr = <void*>self
 *         cdef ModelXbrlEntityResolver * modelXbrlEntityResolver = new ModelXbrlEntityResolver(modelXbrlPtr)
 *         cdef SAX2XMLReaderImpl* sax2parser = <SAX2XMLReaderImpl*>parser             # <<<<<<<<<<<<<<
 *         sax2parser.setXMLEntityResolver(modelXbrlEntityResolver)
 *         cdef XMLPScanToken* token = new XMLPScanToken()
 */
  __pyx_v_sax2parser = ((xercesc::SAX2XMLReaderImpl *)__pyx_v_parser);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":114
 *         cdef ModelXbrlEntityResolver * modelXbrlEntityResolver = new ModelXbrlEntityResolver(modelXbrlPtr)
 *         cdef SAX2XMLReaderImpl* sax2parser = <SAX2XMLReaderImpl*>parser
 *         sax2parser.setXMLEntityResolver(modelXbrlEntityResolver)             # <<<<<<<<<<<<<<
 *         cdef XMLPScanToken* token = new XMLPScanToken()
 *         cdef bool result
 */
  __pyx_v_sax2parser->setXMLEntityResolver(__pyx_v_modelXbrlEntityResolver);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":115
 *         cdef SAX2XMLReaderImpl* sax2parser = <SAX2XMLReaderImpl*>parser
 *         sax2parser.setXMLEntityResolver(modelXbrlEntityResolver)
 *         cdef XMLPScanToken* token = new XMLPScanToken()             # <<<<<<<<<<<<<<
 *         cdef bool result
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 */
  __pyx_v_token = new xercesc::XMLPScanToken();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":117
 *         cdef XMLPScanToken* token = new XMLPScanToken()
 *         cdef bool result
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)             # <<<<<<<<<<<<<<
 *         result = parser.parseFirst(deref(inpSrc), deref(token) )
 *         while result:
 */
  __pyx_v_inpSrc = __pyx_f_6arelle_8arelle_c_fileDescInputSource(__pyx_v_pyFileDesc);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":118
 *         cdef bool result
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *         result = parser.parseFirst(deref(inpSrc), deref(token) )             # <<<<<<<<<<<<<<
 *         while result:
 *             if identificationSax2Handler.isIdentified:
 */
  __pyx_v_result = __pyx_v_parser->parseFirst((*__pyx_v_inpSrc), (*__pyx_v_token));

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":119
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *         result = parser.parseFirst(deref(inpSrc), deref(token) )
 *         while result:             # <<<<<<<<<<<<<<
 *             if identificationSax2Handler.isIdentified:
 *                 parser.parseReset(deref(token))
 */
  while (1) {
    __pyx_t_5 = (__pyx_v_result != 0);
    if (!__pyx_t_5) break;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":120
 *         result = parser.parseFirst(deref(inpSrc), deref(token) )
 *         while result:
 *             if identificationSax2Handler.isIdentified:             # <<<<<<<<<<<<<<
 *                 parser.parseReset(deref(token))
 *                 token = NULL
 */
    __pyx_t_5 = (__pyx_v_identificationSax2Handler->isIdentified != 0);
    if (__pyx_t_5) {

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":121
 *         while result:
 *             if identificationSax2Handler.isIdentified:
 *                 parser.parseReset(deref(token))             # <<<<<<<<<<<<<<
 *                 token = NULL
 *                 break
 */
      __pyx_v_parser->parseReset((*__pyx_v_token));

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":122
 *             if identificationSax2Handler.isIdentified:
 *                 parser.parseReset(deref(token))
 *                 token = NULL             # <<<<<<<<<<<<<<
 *                 break
 *             result = parser.parseNext(deref(token))
 */
      __pyx_v_token = NULL;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":123
 *                 parser.parseReset(deref(token))
 *                 token = NULL
 *                 break             # <<<<<<<<<<<<<<
 *             result = parser.parseNext(deref(token))
 *         del parser
 */
      goto __pyx_L4_break;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":120
 *         result = parser.parseFirst(deref(inpSrc), deref(token) )
 *         while result:
 *             if identificationSax2Handler.isIdentified:             # <<<<<<<<<<<<<<
 *                 parser.parseReset(deref(token))
 *                 token = NULL
 */
    }

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":124
 *                 token = NULL
 *                 break
 *             result = parser.parseNext(deref(token))             # <<<<<<<<<<<<<<
 *         del parser
 *         identificationSax2Handler.close()
 */
    __pyx_v_result = __pyx_v_parser->parseNext((*__pyx_v_token));
  }
  __pyx_L4_break:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":125
 *                 break
 *             result = parser.parseNext(deref(token))
 *         del parser             # <<<<<<<<<<<<<<
 *         identificationSax2Handler.close()
 *         del identificationSax2Handler
 */
  delete __pyx_v_parser;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":126
 *             result = parser.parseNext(deref(token))
 *         del parser
 *         identificationSax2Handler.close()             # <<<<<<<<<<<<<<
 *         del identificationSax2Handler
 *         modelXbrlEntityResolver.close()
 */
  __pyx_v_identificationSax2Handler->close();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":127
 *         del parser
 *         identificationSax2Handler.close()
 *         del identificationSax2Handler             # <<<<<<<<<<<<<<
 *         modelXbrlEntityResolver.close()
 *         del modelXbrlEntityResolver
 */
  delete __pyx_v_identificationSax2Handler;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":128
 *         identificationSax2Handler.close()
 *         del identificationSax2Handler
 *         modelXbrlEntityResolver.close()             # <<<<<<<<<<<<<<
 *         del modelXbrlEntityResolver
 *         return pyIdentificationResults
 */
  __pyx_t_2 = __pyx_v_modelXbrlEntityResolver->close(); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":129
 *         del identificationSax2Handler
 *         modelXbrlEntityResolver.close()
 *         del modelXbrlEntityResolver             # <<<<<<<<<<<<<<
 *         return pyIdentificationResults
 * 
 */
  delete __pyx_v_modelXbrlEntityResolver;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":130
 *         modelXbrlEntityResolver.close()
 *         del modelXbrlEntityResolver
 *         return pyIdentificationResults             # <<<<<<<<<<<<<<
 * 
 *     def loadSchemaGrammar(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyIdentificationResults);
  __pyx_r = __pyx_v_pyIdentificationResults;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":93
 *     #    SAX2Handler.setModelDocument(NULL) # dereference modelDocument
 * 
 *     def identifyXmlFile(self, pyFileDesc):             # <<<<<<<<<<<<<<
 * 
 *         # open a minimal parser for examining elements without any schema or further checking
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("arelle.arelle_c.ModelXbrl.identifyXmlFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyIdentificationResults);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":132
 *         return pyIdentificationResults
 * 
 *     def loadSchemaGrammar(self):             # <<<<<<<<<<<<<<
 *         # find any newly-discovered namespaces in schemaGrammar to load elements and types
 *         cdef bool modelWasChanged = 0 # true if this is a first time call and a new model is created
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_9loadSchemaGrammar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_9loadSchemaGrammar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadSchemaGrammar (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_9ModelXbrl_8loadSchemaGrammar(((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_8loadSchemaGrammar(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self) {
  bool __pyx_v_modelWasChanged;
  xercesc::XSModel *__pyx_v_xsModel;
  __pyx_t_8arelle_c_16xerces_framework_StringList const *__pyx_v_namespaceDocumentLocations;
  __pyx_t_8arelle_c_16xerces_framework_XSNamespaceItemList *__pyx_v_namespaceItems;
  xercesc::XSNamespaceItem *__pyx_v_namespaceItem;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_namespacesSize;
  unsigned int __pyx_v_i;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_xmlChStr;
  char *__pyx_v_chStr;
  PyObject *__pyx_v_ns = 0;
  PyObject *__pyx_v_docUrl = 0;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_j;
  struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_modelDocument = 0;
  char *__pyx_v_docUri;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_5;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("loadSchemaGrammar", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":134
 *     def loadSchemaGrammar(self):
 *         # find any newly-discovered namespaces in schemaGrammar to load elements and types
 *         cdef bool modelWasChanged = 0 # true if this is a first time call and a new model is created             # <<<<<<<<<<<<<<
 *         cdef XSModel* xsModel = xerces_grammar_pool.getXSModel(modelWasChanged)
 *         cdef StringList *namespaces
 */
  __pyx_v_modelWasChanged = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":135
 *         # find any newly-discovered namespaces in schemaGrammar to load elements and types
 *         cdef bool modelWasChanged = 0 # true if this is a first time call and a new model is created
 *         cdef XSModel* xsModel = xerces_grammar_pool.getXSModel(modelWasChanged)             # <<<<<<<<<<<<<<
 *         cdef StringList *namespaces
 *         cdef const StringList *namespaceDocumentLocations
 */
  __pyx_v_xsModel = __pyx_v_6arelle_8arelle_c_xerces_grammar_pool->getXSModel(__pyx_v_modelWasChanged);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":149
 *         cdef XMLSize_t j
 *         cdef ModelDocument modelDocument
 *         if xsModel != NULL:             # <<<<<<<<<<<<<<
 *             namespaceItems = xsModel.getNamespaceItems()
 *             namespacesSize = namespaceItems.size()
 */
  __pyx_t_1 = ((__pyx_v_xsModel != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":150
 *         cdef ModelDocument modelDocument
 *         if xsModel != NULL:
 *             namespaceItems = xsModel.getNamespaceItems()             # <<<<<<<<<<<<<<
 *             namespacesSize = namespaceItems.size()
 *             for i in range(namespacesSize):
 */
    __pyx_v_namespaceItems = __pyx_v_xsModel->getNamespaceItems();

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":151
 *         if xsModel != NULL:
 *             namespaceItems = xsModel.getNamespaceItems()
 *             namespacesSize = namespaceItems.size()             # <<<<<<<<<<<<<<
 *             for i in range(namespacesSize):
 *                 namespaceItem = namespaceItems.elementAt(i)
 */
    __pyx_v_namespacesSize = __pyx_v_namespaceItems->size();

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":152
 *             namespaceItems = xsModel.getNamespaceItems()
 *             namespacesSize = namespaceItems.size()
 *             for i in range(namespacesSize):             # <<<<<<<<<<<<<<
 *                 namespaceItem = namespaceItems.elementAt(i)
 *                 if namespaceItem == NULL:
 */
    __pyx_t_2 = __pyx_v_namespacesSize;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":153
 *             namespacesSize = namespaceItems.size()
 *             for i in range(namespacesSize):
 *                 namespaceItem = namespaceItems.elementAt(i)             # <<<<<<<<<<<<<<
 *                 if namespaceItem == NULL:
 *                     continue
 */
      __pyx_v_namespaceItem = __pyx_v_namespaceItems->elementAt(__pyx_v_i);

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":154
 *             for i in range(namespacesSize):
 *                 namespaceItem = namespaceItems.elementAt(i)
 *                 if namespaceItem == NULL:             # <<<<<<<<<<<<<<
 *                     continue
 *                 chStr = transcode(namespaceItem.getSchemaNamespace())
 */
      __pyx_t_1 = ((__pyx_v_namespaceItem == NULL) != 0);
      if (__pyx_t_1) {

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":155
 *                 namespaceItem = namespaceItems.elementAt(i)
 *                 if namespaceItem == NULL:
 *                     continue             # <<<<<<<<<<<<<<
 *                 chStr = transcode(namespaceItem.getSchemaNamespace())
 *                 ns = chStr
 */
        goto __pyx_L4_continue;

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":154
 *             for i in range(namespacesSize):
 *                 namespaceItem = namespaceItems.elementAt(i)
 *                 if namespaceItem == NULL:             # <<<<<<<<<<<<<<
 *                     continue
 *                 chStr = transcode(namespaceItem.getSchemaNamespace())
 */
      }

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":156
 *                 if namespaceItem == NULL:
 *                     continue
 *                 chStr = transcode(namespaceItem.getSchemaNamespace())             # <<<<<<<<<<<<<<
 *                 ns = chStr
 *                 release(&chStr)
 */
      __pyx_v_chStr = xercesc::XMLString::transcode(__pyx_v_namespaceItem->getSchemaNamespace());

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":157
 *                     continue
 *                 chStr = transcode(namespaceItem.getSchemaNamespace())
 *                 ns = chStr             # <<<<<<<<<<<<<<
 *                 release(&chStr)
 *                 docUrl = None
 */
      __pyx_t_4 = __Pyx_PyUnicode_FromString(__pyx_v_chStr); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_ns, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":158
 *                 chStr = transcode(namespaceItem.getSchemaNamespace())
 *                 ns = chStr
 *                 release(&chStr)             # <<<<<<<<<<<<<<
 *                 docUrl = None
 *                 namespaceDocumentLocations = namespaceItem.getDocumentLocations()
 */
      xercesc::XMLString::release((&__pyx_v_chStr));

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":159
 *                 ns = chStr
 *                 release(&chStr)
 *                 docUrl = None             # <<<<<<<<<<<<<<
 *                 namespaceDocumentLocations = namespaceItem.getDocumentLocations()
 *                 if namespaceDocumentLocations != NULL:
 */
      __Pyx_INCREF(Py_None);
      __Pyx_XDECREF_SET(__pyx_v_docUrl, ((PyObject*)Py_None));

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":160
 *                 release(&chStr)
 *                 docUrl = None
 *                 namespaceDocumentLocations = namespaceItem.getDocumentLocations()             # <<<<<<<<<<<<<<
 *                 if namespaceDocumentLocations != NULL:
 *                     for j in range(namespaceDocumentLocations.size()):
 */
      __pyx_v_namespaceDocumentLocations = __pyx_v_namespaceItem->getDocumentLocations();

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":161
 *                 docUrl = None
 *                 namespaceDocumentLocations = namespaceItem.getDocumentLocations()
 *                 if namespaceDocumentLocations != NULL:             # <<<<<<<<<<<<<<
 *                     for j in range(namespaceDocumentLocations.size()):
 *                         xmlChStr = namespaceDocumentLocations.elementAt(j)
 */
      __pyx_t_1 = ((__pyx_v_namespaceDocumentLocations != NULL) != 0);
      if (__pyx_t_1) {

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":162
 *                 namespaceDocumentLocations = namespaceItem.getDocumentLocations()
 *                 if namespaceDocumentLocations != NULL:
 *                     for j in range(namespaceDocumentLocations.size()):             # <<<<<<<<<<<<<<
 *                         xmlChStr = namespaceDocumentLocations.elementAt(j)
 *                         if xmlChStr != NULL:
 */
        __pyx_t_5 = __pyx_v_namespaceDocumentLocations->size();
        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
          __pyx_v_j = __pyx_t_6;

          /* "arelle_cython/arelle_c/ModelXbrl.pxi":163
 *                 if namespaceDocumentLocations != NULL:
 *                     for j in range(namespaceDocumentLocations.size()):
 *                         xmlChStr = namespaceDocumentLocations.elementAt(j)             # <<<<<<<<<<<<<<
 *                         if xmlChStr != NULL:
 *                             chStr = transcode(xmlChStr)
 */
          __pyx_v_xmlChStr = __pyx_v_namespaceDocumentLocations->elementAt(__pyx_v_j);

          /* "arelle_cython/arelle_c/ModelXbrl.pxi":164
 *                     for j in range(namespaceDocumentLocations.size()):
 *                         xmlChStr = namespaceDocumentLocations.elementAt(j)
 *                         if xmlChStr != NULL:             # <<<<<<<<<<<<<<
 *                             chStr = transcode(xmlChStr)
 *                             docUri = chStr
 */
          __pyx_t_1 = ((__pyx_v_xmlChStr != NULL) != 0);
          if (__pyx_t_1) {

            /* "arelle_cython/arelle_c/ModelXbrl.pxi":165
 *                         xmlChStr = namespaceDocumentLocations.elementAt(j)
 *                         if xmlChStr != NULL:
 *                             chStr = transcode(xmlChStr)             # <<<<<<<<<<<<<<
 *                             docUri = chStr
 *                             release(&chStr)
 */
            __pyx_v_chStr = xercesc::XMLString::transcode(__pyx_v_xmlChStr);

            /* "arelle_cython/arelle_c/ModelXbrl.pxi":166
 *                         if xmlChStr != NULL:
 *                             chStr = transcode(xmlChStr)
 *                             docUri = chStr             # <<<<<<<<<<<<<<
 *                             release(&chStr)
 *                 # must have a modelDocument to proceed
 */
            __pyx_v_docUri = __pyx_v_chStr;

            /* "arelle_cython/arelle_c/ModelXbrl.pxi":167
 *                             chStr = transcode(xmlChStr)
 *                             docUri = chStr
 *                             release(&chStr)             # <<<<<<<<<<<<<<
 *                 # must have a modelDocument to proceed
 *                 if not ns or not docUrl or self.mappedUrls.get(docUrl,docUrl) not in self.urlDocs:
 */
            xercesc::XMLString::release((&__pyx_v_chStr));

            /* "arelle_cython/arelle_c/ModelXbrl.pxi":164
 *                     for j in range(namespaceDocumentLocations.size()):
 *                         xmlChStr = namespaceDocumentLocations.elementAt(j)
 *                         if xmlChStr != NULL:             # <<<<<<<<<<<<<<
 *                             chStr = transcode(xmlChStr)
 *                             docUri = chStr
 */
          }
        }

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":161
 *                 docUrl = None
 *                 namespaceDocumentLocations = namespaceItem.getDocumentLocations()
 *                 if namespaceDocumentLocations != NULL:             # <<<<<<<<<<<<<<
 *                     for j in range(namespaceDocumentLocations.size()):
 *                         xmlChStr = namespaceDocumentLocations.elementAt(j)
 */
      }

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":169
 *                             release(&chStr)
 *                 # must have a modelDocument to proceed
 *                 if not ns or not docUrl or self.mappedUrls.get(docUrl,docUrl) not in self.urlDocs:             # <<<<<<<<<<<<<<
 *                     continue
 *                 modelDocument = self.urlDocs[self.mappedUrls.get(docUri,docUri)]
 */
      __pyx_t_7 = (__pyx_v_ns != Py_None) && (__Pyx_PyUnicode_IS_TRUE(__pyx_v_ns) != 0);
      __pyx_t_8 = ((!__pyx_t_7) != 0);
      if (!__pyx_t_8) {
      } else {
        __pyx_t_1 = __pyx_t_8;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_8 = (__pyx_v_docUrl != Py_None) && (__Pyx_PyUnicode_IS_TRUE(__pyx_v_docUrl) != 0);
      __pyx_t_7 = ((!__pyx_t_8) != 0);
      if (!__pyx_t_7) {
      } else {
        __pyx_t_1 = __pyx_t_7;
        goto __pyx_L12_bool_binop_done;
      }
      if (unlikely(__pyx_v_self->mappedUrls == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
        __PYX_ERR(1, 169, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->mappedUrls, __pyx_v_docUrl, __pyx_v_docUrl); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__pyx_v_self->urlDocs == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(1, 169, __pyx_L1_error)
      }
      __pyx_t_7 = (__Pyx_PyDict_ContainsTF(__pyx_t_4, __pyx_v_self->urlDocs, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 169, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = (__pyx_t_7 != 0);
      __pyx_t_1 = __pyx_t_8;
      __pyx_L12_bool_binop_done:;
      if (__pyx_t_1) {

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":170
 *                 # must have a modelDocument to proceed
 *                 if not ns or not docUrl or self.mappedUrls.get(docUrl,docUrl) not in self.urlDocs:
 *                     continue             # <<<<<<<<<<<<<<
 *                 modelDocument = self.urlDocs[self.mappedUrls.get(docUri,docUri)]
 *                 if modelDocument.isGrammarLoadedIntoModel:
 */
        goto __pyx_L4_continue;

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":169
 *                             release(&chStr)
 *                 # must have a modelDocument to proceed
 *                 if not ns or not docUrl or self.mappedUrls.get(docUrl,docUrl) not in self.urlDocs:             # <<<<<<<<<<<<<<
 *                     continue
 *                 modelDocument = self.urlDocs[self.mappedUrls.get(docUri,docUri)]
 */
      }

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":171
 *                 if not ns or not docUrl or self.mappedUrls.get(docUrl,docUrl) not in self.urlDocs:
 *                     continue
 *                 modelDocument = self.urlDocs[self.mappedUrls.get(docUri,docUri)]             # <<<<<<<<<<<<<<
 *                 if modelDocument.isGrammarLoadedIntoModel:
 *                     print("skipping load schema grammar ns {} doc {}".format(ns, docUrl))
 */
      if (unlikely(__pyx_v_self->urlDocs == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 171, __pyx_L1_error)
      }
      if (unlikely(__pyx_v_self->mappedUrls == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "get");
        __PYX_ERR(1, 171, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_PyUnicode_FromString(__pyx_v_docUri); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyUnicode_FromString(__pyx_v_docUri); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->mappedUrls, __pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyDict_GetItem(__pyx_v_self->urlDocs, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_6arelle_8arelle_c_ModelDocument))))) __PYX_ERR(1, 171, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_modelDocument, ((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_t_9));
      __pyx_t_9 = 0;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":172
 *                     continue
 *                 modelDocument = self.urlDocs[self.mappedUrls.get(docUri,docUri)]
 *                 if modelDocument.isGrammarLoadedIntoModel:             # <<<<<<<<<<<<<<
 *                     print("skipping load schema grammar ns {} doc {}".format(ns, docUrl))
 *                     continue
 */
      __pyx_t_1 = (__pyx_v_modelDocument->isGrammarLoadedIntoModel != 0);
      if (__pyx_t_1) {

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":173
 *                 modelDocument = self.urlDocs[self.mappedUrls.get(docUri,docUri)]
 *                 if modelDocument.isGrammarLoadedIntoModel:
 *                     print("skipping load schema grammar ns {} doc {}".format(ns, docUrl))             # <<<<<<<<<<<<<<
 *                     continue
 *                 print("load schema grammar ns {} doc {}".format(ns, docUrl))
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_skipping_load_schema_grammar_ns, __pyx_n_s_format); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 173, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_4 = NULL;
        __pyx_t_11 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_11 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_10)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_ns, __pyx_v_docUrl};
          __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 173, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_9);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
          PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_ns, __pyx_v_docUrl};
          __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 173, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_9);
        } else
        #endif
        {
          __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 173, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(__pyx_v_ns);
          __Pyx_GIVEREF(__pyx_v_ns);
          PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_v_ns);
          __Pyx_INCREF(__pyx_v_docUrl);
          __Pyx_GIVEREF(__pyx_v_docUrl);
          PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_v_docUrl);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_12, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 173, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__Pyx_PrintOne(0, __pyx_t_9) < 0) __PYX_ERR(1, 173, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":174
 *                 if modelDocument.isGrammarLoadedIntoModel:
 *                     print("skipping load schema grammar ns {} doc {}".format(ns, docUrl))
 *                     continue             # <<<<<<<<<<<<<<
 *                 print("load schema grammar ns {} doc {}".format(ns, docUrl))
 *                 # load element defintions
 */
        goto __pyx_L4_continue;

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":172
 *                     continue
 *                 modelDocument = self.urlDocs[self.mappedUrls.get(docUri,docUri)]
 *                 if modelDocument.isGrammarLoadedIntoModel:             # <<<<<<<<<<<<<<
 *                     print("skipping load schema grammar ns {} doc {}".format(ns, docUrl))
 *                     continue
 */
      }

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":175
 *                     print("skipping load schema grammar ns {} doc {}".format(ns, docUrl))
 *                     continue
 *                 print("load schema grammar ns {} doc {}".format(ns, docUrl))             # <<<<<<<<<<<<<<
 *                 # load element defintions
 * 
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_load_schema_grammar_ns_doc, __pyx_n_s_format); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_11 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_v_ns, __pyx_v_docUrl};
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 175, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_v_ns, __pyx_v_docUrl};
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 175, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (__pyx_t_12) {
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_12); __pyx_t_12 = NULL;
        }
        __Pyx_INCREF(__pyx_v_ns);
        __Pyx_GIVEREF(__pyx_v_ns);
        PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_11, __pyx_v_ns);
        __Pyx_INCREF(__pyx_v_docUrl);
        __Pyx_GIVEREF(__pyx_v_docUrl);
        PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_11, __pyx_v_docUrl);
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_4, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_9) < 0) __PYX_ERR(1, 175, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_L4_continue:;
    }

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":149
 *         cdef XMLSize_t j
 *         cdef ModelDocument modelDocument
 *         if xsModel != NULL:             # <<<<<<<<<<<<<<
 *             namespaceItems = xsModel.getNamespaceItems()
 *             namespacesSize = namespaceItems.size()
 */
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":132
 *         return pyIdentificationResults
 * 
 *     def loadSchemaGrammar(self):             # <<<<<<<<<<<<<<
 *         # find any newly-discovered namespaces in schemaGrammar to load elements and types
 *         cdef bool modelWasChanged = 0 # true if this is a first time call and a new model is created
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("arelle.arelle_c.ModelXbrl.loadSchemaGrammar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ns);
  __Pyx_XDECREF(__pyx_v_docUrl);
  __Pyx_XDECREF((PyObject *)__pyx_v_modelDocument);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":180
 *                 # end of namespace
 * 
 *     def openSax2Parser(self):             # <<<<<<<<<<<<<<
 *         if self.sax2_parser != NULL:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_11openSax2Parser(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_11openSax2Parser(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("openSax2Parser (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_9ModelXbrl_10openSax2Parser(((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_10openSax2Parser(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self) {
  void *__pyx_v_modelXbrlPtr;
  __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler *__pyx_v_SAX2Handler;
  __pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver *__pyx_v_modelXbrlEntityResolver;
  xercesc::SAX2XMLReaderImpl *__pyx_v_sax2xmlRdrImpl;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler *__pyx_t_2;
  __pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver *__pyx_t_3;
  __Pyx_RefNannySetupContext("openSax2Parser", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":181
 * 
 *     def openSax2Parser(self):
 *         if self.sax2_parser != NULL:             # <<<<<<<<<<<<<<
 *             return
 *         assert self.dom_parser == NULL, "setupSAX2parser: DOM parser is already set up"
 */
  __pyx_t_1 = ((__pyx_v_self->sax2_parser != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":182
 *     def openSax2Parser(self):
 *         if self.sax2_parser != NULL:
 *             return             # <<<<<<<<<<<<<<
 *         assert self.dom_parser == NULL, "setupSAX2parser: DOM parser is already set up"
 *         cdef void* modelXbrlPtr = <void*>self
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":181
 * 
 *     def openSax2Parser(self):
 *         if self.sax2_parser != NULL:             # <<<<<<<<<<<<<<
 *             return
 *         assert self.dom_parser == NULL, "setupSAX2parser: DOM parser is already set up"
 */
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":183
 *         if self.sax2_parser != NULL:
 *             return
 *         assert self.dom_parser == NULL, "setupSAX2parser: DOM parser is already set up"             # <<<<<<<<<<<<<<
 *         cdef void* modelXbrlPtr = <void*>self
 *         self.sax2_parser = createXMLReader(fgMemoryManager, xerces_grammar_pool)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->dom_parser == NULL) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_setupSAX2parser_DOM_parser_is_al);
      __PYX_ERR(1, 183, __pyx_L1_error)
    }
  }
  #endif

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":184
 *             return
 *         assert self.dom_parser == NULL, "setupSAX2parser: DOM parser is already set up"
 *         cdef void* modelXbrlPtr = <void*>self             # <<<<<<<<<<<<<<
 *         self.sax2_parser = createXMLReader(fgMemoryManager, xerces_grammar_pool)
 *         self.sax2_parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)
 */
  __pyx_v_modelXbrlPtr = ((void *)__pyx_v_self);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":185
 *         assert self.dom_parser == NULL, "setupSAX2parser: DOM parser is already set up"
 *         cdef void* modelXbrlPtr = <void*>self
 *         self.sax2_parser = createXMLReader(fgMemoryManager, xerces_grammar_pool)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)
 *         self.sax2_parser.setFeature(fgSAX2CoreNameSpaces, True)
 */
  __pyx_v_self->sax2_parser = xercesc::XMLReaderFactory::createXMLReader(xercesc::XMLPlatformUtils::fgMemoryManager, __pyx_v_6arelle_8arelle_c_xerces_grammar_pool);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":186
 *         cdef void* modelXbrlPtr = <void*>self
 *         self.sax2_parser = createXMLReader(fgMemoryManager, xerces_grammar_pool)
 *         self.sax2_parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setFeature(fgSAX2CoreNameSpaces, True)
 *         self.sax2_parser.setFeature(fgXercesSchema, True)
 */
  __pyx_v_self->sax2_parser->setProperty(xercesc::XMLUni::fgXercesScannerName, ((void *)xercesc::XMLUni::fgSGXMLScanner));

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":187
 *         self.sax2_parser = createXMLReader(fgMemoryManager, xerces_grammar_pool)
 *         self.sax2_parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)
 *         self.sax2_parser.setFeature(fgSAX2CoreNameSpaces, True)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setFeature(fgXercesSchema, True)
 *         self.sax2_parser.setFeature(fgXercesSchemaFullChecking, True)
 */
  __pyx_v_self->sax2_parser->setFeature(xercesc::XMLUni::fgSAX2CoreNameSpaces, 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":188
 *         self.sax2_parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)
 *         self.sax2_parser.setFeature(fgSAX2CoreNameSpaces, True)
 *         self.sax2_parser.setFeature(fgXercesSchema, True)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setFeature(fgXercesSchemaFullChecking, True)
 *         self.sax2_parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 */
  __pyx_v_self->sax2_parser->setFeature(xercesc::XMLUni::fgXercesSchema, 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":189
 *         self.sax2_parser.setFeature(fgSAX2CoreNameSpaces, True)
 *         self.sax2_parser.setFeature(fgXercesSchema, True)
 *         self.sax2_parser.setFeature(fgXercesSchemaFullChecking, True)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 *         self.sax2_parser.setFeature(fgSAX2CoreValidation, True)
 */
  __pyx_v_self->sax2_parser->setFeature(xercesc::XMLUni::fgXercesSchemaFullChecking, 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":190
 *         self.sax2_parser.setFeature(fgXercesSchema, True)
 *         self.sax2_parser.setFeature(fgXercesSchemaFullChecking, True)
 *         self.sax2_parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setFeature(fgSAX2CoreValidation, True)
 *         self.sax2_parser.setFeature(fgXercesDynamic, True)
 */
  __pyx_v_self->sax2_parser->setFeature(xercesc::XMLUni::fgSAX2CoreNameSpacePrefixes, 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":191
 *         self.sax2_parser.setFeature(fgXercesSchemaFullChecking, True)
 *         self.sax2_parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 *         self.sax2_parser.setFeature(fgSAX2CoreValidation, True)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setFeature(fgXercesDynamic, True)
 *         self.sax2_parser.setFeature(fgXercesValidateAnnotations, True)
 */
  __pyx_v_self->sax2_parser->setFeature(xercesc::XMLUni::fgSAX2CoreValidation, 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":192
 *         self.sax2_parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 *         self.sax2_parser.setFeature(fgSAX2CoreValidation, True)
 *         self.sax2_parser.setFeature(fgXercesDynamic, True)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setFeature(fgXercesValidateAnnotations, True)
 *         self.sax2_parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)
 */
  __pyx_v_self->sax2_parser->setFeature(xercesc::XMLUni::fgXercesDynamic, 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":193
 *         self.sax2_parser.setFeature(fgSAX2CoreValidation, True)
 *         self.sax2_parser.setFeature(fgXercesDynamic, True)
 *         self.sax2_parser.setFeature(fgXercesValidateAnnotations, True)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)
 *         self.sax2_parser.setFeature(fgXercesCacheGrammarFromParse, True)
 */
  __pyx_v_self->sax2_parser->setFeature(xercesc::XMLUni::fgXercesValidateAnnotations, 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":194
 *         self.sax2_parser.setFeature(fgXercesDynamic, True)
 *         self.sax2_parser.setFeature(fgXercesValidateAnnotations, True)
 *         self.sax2_parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setFeature(fgXercesCacheGrammarFromParse, True)
 *         self.sax2_parser.setFeature(fgXercesCalculateSrcOfs, True)
 */
  __pyx_v_self->sax2_parser->setFeature(xercesc::XMLUni::fgXercesGenerateSyntheticAnnotations, 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":195
 *         self.sax2_parser.setFeature(fgXercesValidateAnnotations, True)
 *         self.sax2_parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)
 *         self.sax2_parser.setFeature(fgXercesCacheGrammarFromParse, True)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setFeature(fgXercesCalculateSrcOfs, True)
 *         cdef ModelDocumentSAX2Handler* SAX2Handler = new ModelDocumentSAX2Handler(modelXbrlPtr)
 */
  __pyx_v_self->sax2_parser->setFeature(xercesc::XMLUni::fgXercesCacheGrammarFromParse, 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":196
 *         self.sax2_parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)
 *         self.sax2_parser.setFeature(fgXercesCacheGrammarFromParse, True)
 *         self.sax2_parser.setFeature(fgXercesCalculateSrcOfs, True)             # <<<<<<<<<<<<<<
 *         cdef ModelDocumentSAX2Handler* SAX2Handler = new ModelDocumentSAX2Handler(modelXbrlPtr)
 *         self.sax2_parser.setErrorHandler(SAX2Handler)
 */
  __pyx_v_self->sax2_parser->setFeature(xercesc::XMLUni::fgXercesCalculateSrcOfs, 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":197
 *         self.sax2_parser.setFeature(fgXercesCacheGrammarFromParse, True)
 *         self.sax2_parser.setFeature(fgXercesCalculateSrcOfs, True)
 *         cdef ModelDocumentSAX2Handler* SAX2Handler = new ModelDocumentSAX2Handler(modelXbrlPtr)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setErrorHandler(SAX2Handler)
 *         self.sax2_parser.setContentHandler(SAX2Handler)
 */
  try {
    __pyx_t_2 = new __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler(__pyx_v_modelXbrlPtr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 197, __pyx_L1_error)
  }
  __pyx_v_SAX2Handler = __pyx_t_2;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":198
 *         self.sax2_parser.setFeature(fgXercesCalculateSrcOfs, True)
 *         cdef ModelDocumentSAX2Handler* SAX2Handler = new ModelDocumentSAX2Handler(modelXbrlPtr)
 *         self.sax2_parser.setErrorHandler(SAX2Handler)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setContentHandler(SAX2Handler)
 *         self.sax2_parser.setLexicalHandler(SAX2Handler)
 */
  __pyx_v_self->sax2_parser->setErrorHandler(__pyx_v_SAX2Handler);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":199
 *         cdef ModelDocumentSAX2Handler* SAX2Handler = new ModelDocumentSAX2Handler(modelXbrlPtr)
 *         self.sax2_parser.setErrorHandler(SAX2Handler)
 *         self.sax2_parser.setContentHandler(SAX2Handler)             # <<<<<<<<<<<<<<
 *         self.sax2_parser.setLexicalHandler(SAX2Handler)
 *         cdef ModelXbrlEntityResolver* modelXbrlEntityResolver = new ModelXbrlEntityResolver(modelXbrlPtr)
 */
  __pyx_v_self->sax2_parser->setContentHandler(__pyx_v_SAX2Handler);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":200
 *         self.sax2_parser.setErrorHandler(SAX2Handler)
 *         self.sax2_parser.setContentHandler(SAX2Handler)
 *         self.sax2_parser.setLexicalHandler(SAX2Handler)             # <<<<<<<<<<<<<<
 *         cdef ModelXbrlEntityResolver* modelXbrlEntityResolver = new ModelXbrlEntityResolver(modelXbrlPtr)
 *         cdef SAX2XMLReaderImpl* sax2xmlRdrImpl = <SAX2XMLReaderImpl*>self.sax2_parser
 */
  __pyx_v_self->sax2_parser->setLexicalHandler(__pyx_v_SAX2Handler);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":201
 *         self.sax2_parser.setContentHandler(SAX2Handler)
 *         self.sax2_parser.setLexicalHandler(SAX2Handler)
 *         cdef ModelXbrlEntityResolver* modelXbrlEntityResolver = new ModelXbrlEntityResolver(modelXbrlPtr)             # <<<<<<<<<<<<<<
 *         cdef SAX2XMLReaderImpl* sax2xmlRdrImpl = <SAX2XMLReaderImpl*>self.sax2_parser
 *         sax2xmlRdrImpl.setXMLEntityResolver(modelXbrlEntityResolver)
 */
  try {
    __pyx_t_3 = new __pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver(__pyx_v_modelXbrlPtr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 201, __pyx_L1_error)
  }
  __pyx_v_modelXbrlEntityResolver = __pyx_t_3;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":202
 *         self.sax2_parser.setLexicalHandler(SAX2Handler)
 *         cdef ModelXbrlEntityResolver* modelXbrlEntityResolver = new ModelXbrlEntityResolver(modelXbrlPtr)
 *         cdef SAX2XMLReaderImpl* sax2xmlRdrImpl = <SAX2XMLReaderImpl*>self.sax2_parser             # <<<<<<<<<<<<<<
 *         sax2xmlRdrImpl.setXMLEntityResolver(modelXbrlEntityResolver)
 * 
 */
  __pyx_v_sax2xmlRdrImpl = ((xercesc::SAX2XMLReaderImpl *)__pyx_v_self->sax2_parser);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":203
 *         cdef ModelXbrlEntityResolver* modelXbrlEntityResolver = new ModelXbrlEntityResolver(modelXbrlPtr)
 *         cdef SAX2XMLReaderImpl* sax2xmlRdrImpl = <SAX2XMLReaderImpl*>self.sax2_parser
 *         sax2xmlRdrImpl.setXMLEntityResolver(modelXbrlEntityResolver)             # <<<<<<<<<<<<<<
 * 
 * cdef cppclass ModelXbrlErrorHandler(TemplateSAX2Handler):
 */
  __pyx_v_sax2xmlRdrImpl->setXMLEntityResolver(__pyx_v_modelXbrlEntityResolver);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":180
 *                 # end of namespace
 * 
 *     def openSax2Parser(self):             # <<<<<<<<<<<<<<
 *         if self.sax2_parser != NULL:
 *             return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("arelle.arelle_c.ModelXbrl.openSax2Parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":26
 * 
 * cdef class ModelXbrl:
 *     cdef readonly object modelManager             # <<<<<<<<<<<<<<
 *     cdef readonly object cntlr
 *     cdef readonly dict urlDocs # ModelDocument indexbed by normalizedUrl
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_12modelManager_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_12modelManager_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_9ModelXbrl_12modelManager___get__(((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_12modelManager___get__(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->modelManager);
  __pyx_r = __pyx_v_self->modelManager;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":27
 * cdef class ModelXbrl:
 *     cdef readonly object modelManager
 *     cdef readonly object cntlr             # <<<<<<<<<<<<<<
 *     cdef readonly dict urlDocs # ModelDocument indexbed by normalizedUrl
 *     cdef readonly dict mappedUrls # document urls normalizedUrl indexed by filename system id
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_5cntlr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_5cntlr_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_9ModelXbrl_5cntlr___get__(((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_5cntlr___get__(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->cntlr);
  __pyx_r = __pyx_v_self->cntlr;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":28
 *     cdef readonly object modelManager
 *     cdef readonly object cntlr
 *     cdef readonly dict urlDocs # ModelDocument indexbed by normalizedUrl             # <<<<<<<<<<<<<<
 *     cdef readonly dict mappedUrls # document urls normalizedUrl indexed by filename system id
 *     cdef SAX2XMLReader* sax2_parser
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_7urlDocs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_7urlDocs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_9ModelXbrl_7urlDocs___get__(((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_7urlDocs___get__(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->urlDocs);
  __pyx_r = __pyx_v_self->urlDocs;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":29
 *     cdef readonly object cntlr
 *     cdef readonly dict urlDocs # ModelDocument indexbed by normalizedUrl
 *     cdef readonly dict mappedUrls # document urls normalizedUrl indexed by filename system id             # <<<<<<<<<<<<<<
 *     cdef SAX2XMLReader* sax2_parser
 *     cdef XercesDOMParser* dom_parser
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_10mappedUrls_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_9ModelXbrl_10mappedUrls_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_9ModelXbrl_10mappedUrls___get__(((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_9ModelXbrl_10mappedUrls___get__(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->mappedUrls);
  __pyx_r = __pyx_v_self->mappedUrls;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":210
 *     unsigned int eltDepth
 * 
 *     ModelXbrlErrorHandler():             # <<<<<<<<<<<<<<
 *         this.eltQNames = <XMLCh**>malloc(1000 * sizeof(XMLCh*))
 *         this.eltDepth = 0
 */

 __pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler::__pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":211
 * 
 *     ModelXbrlErrorHandler():
 *         this.eltQNames = <XMLCh**>malloc(1000 * sizeof(XMLCh*))             # <<<<<<<<<<<<<<
 *         this.eltDepth = 0
 * 
 */
  this->eltQNames = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh **)malloc((0x3E8 * (sizeof(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)))));

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":212
 *     ModelXbrlErrorHandler():
 *         this.eltQNames = <XMLCh**>malloc(1000 * sizeof(XMLCh*))
 *         this.eltDepth = 0             # <<<<<<<<<<<<<<
 * 
 *     # error handlers
 */
  this->eltDepth = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":210
 *     unsigned int eltDepth
 * 
 *     ModelXbrlErrorHandler():             # <<<<<<<<<<<<<<
 *         this.eltQNames = <XMLCh**>malloc(1000 * sizeof(XMLCh*))
 *         this.eltDepth = 0
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":215
 * 
 *     # error handlers
 *     void logError(const SAXParseException& exc, level):             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* msg = exc.getMessage()
 *         cdef char* msgText
 */

void __pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler::logError(xercesc::SAXParseException const &__pyx_v_exc, PyObject *__pyx_v_level) {
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_msg;
  char *__pyx_v_msgText;
  char *__pyx_v_fileName;
  char *__pyx_v_url;
  char *__pyx_v_eltQn;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v__file;
  struct __pyx_obj_6arelle_8arelle_c_genobj *__pyx_v_pyError = NULL;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v__url;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("logError", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":216
 *     # error handlers
 *     void logError(const SAXParseException& exc, level):
 *         cdef const XMLCh* msg = exc.getMessage()             # <<<<<<<<<<<<<<
 *         cdef char* msgText
 *         cdef char* fileName
 */
  __pyx_v_msg = __pyx_v_exc.getMessage();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":219
 *         cdef char* msgText
 *         cdef char* fileName
 *         cdef char* url = NULL             # <<<<<<<<<<<<<<
 *         cdef char* eltQn
 *         if msg != NULL:
 */
  __pyx_v_url = NULL;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":221
 *         cdef char* url = NULL
 *         cdef char* eltQn
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             msgText = transcode(msg)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":222
 *         cdef char* eltQn
 *         if msg != NULL:
 *             msgText = transcode(msg)             # <<<<<<<<<<<<<<
 *         else:
 *             msgText = b"null"
 */
    __pyx_v_msgText = xercesc::XMLString::transcode(__pyx_v_msg);

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":221
 *         cdef char* url = NULL
 *         cdef char* eltQn
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             msgText = transcode(msg)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":224
 *             msgText = transcode(msg)
 *         else:
 *             msgText = b"null"             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:
 */
  /*else*/ {
    __pyx_v_msgText = ((char *)"null");
  }
  __pyx_L3:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":225
 *         else:
 *             msgText = b"null"
 *         cdef const XMLCh* _file = exc.getSystemId()             # <<<<<<<<<<<<<<
 *         if _file != NULL:
 *             fileName = transcode(_file)
 */
  __pyx_v__file = __pyx_v_exc.getSystemId();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":226
 *             msgText = b"null"
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             fileName = transcode(_file)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v__file != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":227
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:
 *             fileName = transcode(_file)             # <<<<<<<<<<<<<<
 *         else:
 *             fileName = b"null"
 */
    __pyx_v_fileName = xercesc::XMLString::transcode(__pyx_v__file);

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":226
 *             msgText = b"null"
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             fileName = transcode(_file)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":229
 *             fileName = transcode(_file)
 *         else:
 *             fileName = b"null"             # <<<<<<<<<<<<<<
 *         if this.eltQNames[this.eltDepth] != NULL:
 *             eltQn = transcode(this.eltQNames[this.eltDepth])
 */
  /*else*/ {
    __pyx_v_fileName = ((char *)"null");
  }
  __pyx_L4:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":230
 *         else:
 *             fileName = b"null"
 *         if this.eltQNames[this.eltDepth] != NULL:             # <<<<<<<<<<<<<<
 *             eltQn = transcode(this.eltQNames[this.eltDepth])
 *         else:
 */
  __pyx_t_1 = (((this->eltQNames[this->eltDepth]) != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":231
 *             fileName = b"null"
 *         if this.eltQNames[this.eltDepth] != NULL:
 *             eltQn = transcode(this.eltQNames[this.eltDepth])             # <<<<<<<<<<<<<<
 *         else:
 *             eltQn = b""
 */
    __pyx_v_eltQn = xercesc::XMLString::transcode((this->eltQNames[this->eltDepth]));

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":230
 *         else:
 *             fileName = b"null"
 *         if this.eltQNames[this.eltDepth] != NULL:             # <<<<<<<<<<<<<<
 *             eltQn = transcode(this.eltQNames[this.eltDepth])
 *         else:
 */
    goto __pyx_L5;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":233
 *             eltQn = transcode(this.eltQNames[this.eltDepth])
 *         else:
 *             eltQn = b""             # <<<<<<<<<<<<<<
 *         pyError = genobj(level=level,
 *                          message=msgText,
 */
  /*else*/ {
    __pyx_v_eltQn = ((char *)"");
  }
  __pyx_L5:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":234
 *         else:
 *             eltQn = b""
 *         pyError = genobj(level=level,             # <<<<<<<<<<<<<<
 *                          message=msgText,
 *                          line=exc.getLineNumber(),
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_level, __pyx_v_level) < 0) __PYX_ERR(1, 234, __pyx_L1_error)

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":235
 *             eltQn = b""
 *         pyError = genobj(level=level,
 *                          message=msgText,             # <<<<<<<<<<<<<<
 *                          line=exc.getLineNumber(),
 *                          column=exc.getColumnNumber(),
 */
  __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v_msgText); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_message, __pyx_t_3) < 0) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":236
 *         pyError = genobj(level=level,
 *                          message=msgText,
 *                          line=exc.getLineNumber(),             # <<<<<<<<<<<<<<
 *                          column=exc.getColumnNumber(),
 *                          file=fileName,
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_exc.getLineNumber()); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_line, __pyx_t_3) < 0) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":237
 *                          message=msgText,
 *                          line=exc.getLineNumber(),
 *                          column=exc.getColumnNumber(),             # <<<<<<<<<<<<<<
 *                          file=fileName,
 *                          element=eltQn)
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_exc.getColumnNumber()); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_column, __pyx_t_3) < 0) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":238
 *                          line=exc.getLineNumber(),
 *                          column=exc.getColumnNumber(),
 *                          file=fileName,             # <<<<<<<<<<<<<<
 *                          element=eltQn)
 *         cdef const XMLCh* _url = exc.getPublicId()
 */
  __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v_fileName); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_file, __pyx_t_3) < 0) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":239
 *                          column=exc.getColumnNumber(),
 *                          file=fileName,
 *                          element=eltQn)             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* _url = exc.getPublicId()
 *         if _url != NULL:
 */
  __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v_eltQn); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_element, __pyx_t_3) < 0) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":234
 *         else:
 *             eltQn = b""
 *         pyError = genobj(level=level,             # <<<<<<<<<<<<<<
 *                          message=msgText,
 *                          line=exc.getLineNumber(),
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6arelle_8arelle_c_genobj), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pyError = ((struct __pyx_obj_6arelle_8arelle_c_genobj *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":240
 *                          file=fileName,
 *                          element=eltQn)
 *         cdef const XMLCh* _url = exc.getPublicId()             # <<<<<<<<<<<<<<
 *         if _url != NULL:
 *             url = transcode(_file)
 */
  __pyx_v__url = __pyx_v_exc.getPublicId();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":241
 *                          element=eltQn)
 *         cdef const XMLCh* _url = exc.getPublicId()
 *         if _url != NULL:             # <<<<<<<<<<<<<<
 *             url = transcode(_file)
 *             pyError.url = url
 */
  __pyx_t_1 = ((__pyx_v__url != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":242
 *         cdef const XMLCh* _url = exc.getPublicId()
 *         if _url != NULL:
 *             url = transcode(_file)             # <<<<<<<<<<<<<<
 *             pyError.url = url
 *         this.handlePyError(pyError)
 */
    __pyx_v_url = xercesc::XMLString::transcode(__pyx_v__file);

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":243
 *         if _url != NULL:
 *             url = transcode(_file)
 *             pyError.url = url             # <<<<<<<<<<<<<<
 *         this.handlePyError(pyError)
 *         if msg != NULL:
 */
    __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v_url); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_pyError), __pyx_n_s_url, __pyx_t_3) < 0) __PYX_ERR(1, 243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":241
 *                          element=eltQn)
 *         cdef const XMLCh* _url = exc.getPublicId()
 *         if _url != NULL:             # <<<<<<<<<<<<<<
 *             url = transcode(_file)
 *             pyError.url = url
 */
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":244
 *             url = transcode(_file)
 *             pyError.url = url
 *         this.handlePyError(pyError)             # <<<<<<<<<<<<<<
 *         if msg != NULL:
 *             release(&msgText)
 */
  this->handlePyError(((PyObject *)__pyx_v_pyError));

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":245
 *             pyError.url = url
 *         this.handlePyError(pyError)
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             release(&msgText)
 *         if _file != NULL:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":246
 *         this.handlePyError(pyError)
 *         if msg != NULL:
 *             release(&msgText)             # <<<<<<<<<<<<<<
 *         if _file != NULL:
 *             release(&fileName)
 */
    xercesc::XMLString::release((&__pyx_v_msgText));

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":245
 *             pyError.url = url
 *         this.handlePyError(pyError)
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             release(&msgText)
 *         if _file != NULL:
 */
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":247
 *         if msg != NULL:
 *             release(&msgText)
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             release(&fileName)
 *         if this.eltQNames[this.eltDepth] != NULL:
 */
  __pyx_t_1 = ((__pyx_v__file != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":248
 *             release(&msgText)
 *         if _file != NULL:
 *             release(&fileName)             # <<<<<<<<<<<<<<
 *         if this.eltQNames[this.eltDepth] != NULL:
 *             release(&eltQn)
 */
    xercesc::XMLString::release((&__pyx_v_fileName));

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":247
 *         if msg != NULL:
 *             release(&msgText)
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             release(&fileName)
 *         if this.eltQNames[this.eltDepth] != NULL:
 */
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":249
 *         if _file != NULL:
 *             release(&fileName)
 *         if this.eltQNames[this.eltDepth] != NULL:             # <<<<<<<<<<<<<<
 *             release(&eltQn)
 *         if url != NULL:
 */
  __pyx_t_1 = (((this->eltQNames[this->eltDepth]) != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":250
 *             release(&fileName)
 *         if this.eltQNames[this.eltDepth] != NULL:
 *             release(&eltQn)             # <<<<<<<<<<<<<<
 *         if url != NULL:
 *             release(&url)
 */
    xercesc::XMLString::release((&__pyx_v_eltQn));

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":249
 *         if _file != NULL:
 *             release(&fileName)
 *         if this.eltQNames[this.eltDepth] != NULL:             # <<<<<<<<<<<<<<
 *             release(&eltQn)
 *         if url != NULL:
 */
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":251
 *         if this.eltQNames[this.eltDepth] != NULL:
 *             release(&eltQn)
 *         if url != NULL:             # <<<<<<<<<<<<<<
 *             release(&url)
 *     void error(const SAXParseException& exc):
 */
  __pyx_t_1 = ((__pyx_v_url != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":252
 *             release(&eltQn)
 *         if url != NULL:
 *             release(&url)             # <<<<<<<<<<<<<<
 *     void error(const SAXParseException& exc):
 *         this.logError(exc, u"ERROR") # values for logging._checkLevel acceptability
 */
    xercesc::XMLString::release((&__pyx_v_url));

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":251
 *         if this.eltQNames[this.eltDepth] != NULL:
 *             release(&eltQn)
 *         if url != NULL:             # <<<<<<<<<<<<<<
 *             release(&url)
 *     void error(const SAXParseException& exc):
 */
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":215
 * 
 *     # error handlers
 *     void logError(const SAXParseException& exc, level):             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* msg = exc.getMessage()
 *         cdef char* msgText
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("ModelXbrlErrorHandler.logError", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pyError);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":253
 *         if url != NULL:
 *             release(&url)
 *     void error(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         this.logError(exc, u"ERROR") # values for logging._checkLevel acceptability
 *     void fatalError(const SAXParseException& exc):
 */

void __pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler::error(xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("error", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":254
 *             release(&url)
 *     void error(const SAXParseException& exc):
 *         this.logError(exc, u"ERROR") # values for logging._checkLevel acceptability             # <<<<<<<<<<<<<<
 *     void fatalError(const SAXParseException& exc):
 *         this.logError(exc, u"CRITICAL")
 */
  this->logError(__pyx_v_exc, __pyx_n_u_ERROR);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":253
 *         if url != NULL:
 *             release(&url)
 *     void error(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         this.logError(exc, u"ERROR") # values for logging._checkLevel acceptability
 *     void fatalError(const SAXParseException& exc):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":255
 *     void error(const SAXParseException& exc):
 *         this.logError(exc, u"ERROR") # values for logging._checkLevel acceptability
 *     void fatalError(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         this.logError(exc, u"CRITICAL")
 *     void warning(const SAXParseException& exc):
 */

void __pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler::fatalError(xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fatalError", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":256
 *         this.logError(exc, u"ERROR") # values for logging._checkLevel acceptability
 *     void fatalError(const SAXParseException& exc):
 *         this.logError(exc, u"CRITICAL")             # <<<<<<<<<<<<<<
 *     void warning(const SAXParseException& exc):
 *         this.logError(exc, u"WARNING")
 */
  this->logError(__pyx_v_exc, __pyx_n_u_CRITICAL);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":255
 *     void error(const SAXParseException& exc):
 *         this.logError(exc, u"ERROR") # values for logging._checkLevel acceptability
 *     void fatalError(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         this.logError(exc, u"CRITICAL")
 *     void warning(const SAXParseException& exc):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":257
 *     void fatalError(const SAXParseException& exc):
 *         this.logError(exc, u"CRITICAL")
 *     void warning(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         this.logError(exc, u"WARNING")
 * 
 */

void __pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler::warning(xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("warning", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":258
 *         this.logError(exc, u"CRITICAL")
 *     void warning(const SAXParseException& exc):
 *         this.logError(exc, u"WARNING")             # <<<<<<<<<<<<<<
 * 
 *     void handlePyError(object pyError):
 */
  this->logError(__pyx_v_exc, __pyx_n_u_WARNING);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":257
 *     void fatalError(const SAXParseException& exc):
 *         this.logError(exc, u"CRITICAL")
 *     void warning(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         this.logError(exc, u"WARNING")
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":260
 *         this.logError(exc, u"WARNING")
 * 
 *     void handlePyError(object pyError):             # <<<<<<<<<<<<<<
 *         pass # implement in subclasses
 * 
 */

void __pyx_t_6arelle_8arelle_c_ModelXbrlErrorHandler::handlePyError(CYTHON_UNUSED PyObject *__pyx_v_pyError) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("handlePyError", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":268
 *     bool hasIxNamespace, hasIx11Namespace
 * 
 *     ModelXbrlIdentificationSAX2Handler(void* pyIdentificationResultsPtr) except +:             # <<<<<<<<<<<<<<
 *         this.pyIdentificationResultsPtr = pyIdentificationResultsPtr
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False
 */

 __pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler::__pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler(void *__pyx_v_pyIdentificationResultsPtr) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":269
 * 
 *     ModelXbrlIdentificationSAX2Handler(void* pyIdentificationResultsPtr) except +:
 *         this.pyIdentificationResultsPtr = pyIdentificationResultsPtr             # <<<<<<<<<<<<<<
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False
 *         this.hasIxNamespace = this.hasIx11Namespace = False
 */
  this->pyIdentificationResultsPtr = __pyx_v_pyIdentificationResultsPtr;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":270
 *     ModelXbrlIdentificationSAX2Handler(void* pyIdentificationResultsPtr) except +:
 *         this.pyIdentificationResultsPtr = pyIdentificationResultsPtr
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False             # <<<<<<<<<<<<<<
 *         this.hasIxNamespace = this.hasIx11Namespace = False
 *     void close():
 */
  this->isXbrl = 0;
  this->isXsd = 0;
  this->isHtml = 0;
  this->isInline = 0;
  this->isIdentified = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":271
 *         this.pyIdentificationResultsPtr = pyIdentificationResultsPtr
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False
 *         this.hasIxNamespace = this.hasIx11Namespace = False             # <<<<<<<<<<<<<<
 *     void close():
 *         this.pyIdentificationResultsPtr = NULL
 */
  this->hasIxNamespace = 0;
  this->hasIx11Namespace = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":268
 *     bool hasIxNamespace, hasIx11Namespace
 * 
 *     ModelXbrlIdentificationSAX2Handler(void* pyIdentificationResultsPtr) except +:             # <<<<<<<<<<<<<<
 *         this.pyIdentificationResultsPtr = pyIdentificationResultsPtr
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":272
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False
 *         this.hasIxNamespace = this.hasIx11Namespace = False
 *     void close():             # <<<<<<<<<<<<<<
 *         this.pyIdentificationResultsPtr = NULL
 *         free(this.eltQNames)
 */

void __pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler::close(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":273
 *         this.hasIxNamespace = this.hasIx11Namespace = False
 *     void close():
 *         this.pyIdentificationResultsPtr = NULL             # <<<<<<<<<<<<<<
 *         free(this.eltQNames)
 *         this.eltQNames = NULL
 */
  this->pyIdentificationResultsPtr = NULL;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":274
 *     void close():
 *         this.pyIdentificationResultsPtr = NULL
 *         free(this.eltQNames)             # <<<<<<<<<<<<<<
 *         this.eltQNames = NULL
 * 
 */
  free(this->eltQNames);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":275
 *         this.pyIdentificationResultsPtr = NULL
 *         free(this.eltQNames)
 *         this.eltQNames = NULL             # <<<<<<<<<<<<<<
 * 
 *     # document handlers
 */
  this->eltQNames = NULL;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":272
 *         this.isXbrl = this.isXsd = this.isHtml = this.isInline = this.isIdentified = False
 *         this.hasIxNamespace = this.hasIx11Namespace = False
 *     void close():             # <<<<<<<<<<<<<<
 *         this.pyIdentificationResultsPtr = NULL
 *         free(this.eltQNames)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":278
 * 
 *     # document handlers
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):             # <<<<<<<<<<<<<<
 *         this.eltQNames[this.eltDepth] = NULL
 *         this.eltDepth -= 1
 */

void __pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler::endElement(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_uri, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_localname, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_qname) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endElement", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":279
 *     # document handlers
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 *         this.eltQNames[this.eltDepth] = NULL             # <<<<<<<<<<<<<<
 *         this.eltDepth -= 1
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):
 */
  (this->eltQNames[this->eltDepth]) = NULL;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":280
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 *         this.eltQNames[this.eltDepth] = NULL
 *         this.eltDepth -= 1             # <<<<<<<<<<<<<<
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):
 *         cdef object pyIdentificationResults
 */
  this->eltDepth = (this->eltDepth - 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":278
 * 
 *     # document handlers
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):             # <<<<<<<<<<<<<<
 *         this.eltQNames[this.eltDepth] = NULL
 *         this.eltDepth -= 1
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":281
 *         this.eltQNames[this.eltDepth] = NULL
 *         this.eltDepth -= 1
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):             # <<<<<<<<<<<<<<
 *         cdef object pyIdentificationResults
 *         cdef XMLSize_t i, n
 */

void __pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler::startElement(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_uri, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_localname, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_qname, xercesc::Attributes const &__pyx_v_attrs) {
  PyObject *__pyx_v_pyIdentificationResults = 0;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_i;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_n;
  PyObject *__pyx_v_attrValue = 0;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_xmlCh;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_xmlChNs;
  char *__pyx_v_chStr;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_4;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("startElement", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":289
 *         cdef char* chStr
 * 
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr             # <<<<<<<<<<<<<<
 *         if compareIString(uri, nsXbrli) == 0:
 *             if compareString(localname, lnXbrl) == 0:
 */
  __pyx_t_1 = ((PyObject *)this->pyIdentificationResultsPtr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_pyIdentificationResults = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":290
 * 
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         if compareIString(uri, nsXbrli) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnXbrl) == 0:
 *                 this.isXbrl = True
 */
  __pyx_t_2 = ((xercesc::XMLString::compareIString(__pyx_v_uri, __pyx_v_6arelle_8arelle_c_nsXbrli) == 0) != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":291
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         if compareIString(uri, nsXbrli) == 0:
 *             if compareString(localname, lnXbrl) == 0:             # <<<<<<<<<<<<<<
 *                 this.isXbrl = True
 *                 pyIdentificationResults.type = u"instance"
 */
    __pyx_t_2 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnXbrl) == 0) != 0);
    if (__pyx_t_2) {

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":292
 *         if compareIString(uri, nsXbrli) == 0:
 *             if compareString(localname, lnXbrl) == 0:
 *                 this.isXbrl = True             # <<<<<<<<<<<<<<
 *                 pyIdentificationResults.type = u"instance"
 *         elif compareIString(uri, nsXsd) == 0:
 */
      this->isXbrl = 1;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":293
 *             if compareString(localname, lnXbrl) == 0:
 *                 this.isXbrl = True
 *                 pyIdentificationResults.type = u"instance"             # <<<<<<<<<<<<<<
 *         elif compareIString(uri, nsXsd) == 0:
 *             if compareString(localname, lnSchema) == 0:
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_n_u_instance) < 0) __PYX_ERR(1, 293, __pyx_L1_error)

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":291
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         if compareIString(uri, nsXbrli) == 0:
 *             if compareString(localname, lnXbrl) == 0:             # <<<<<<<<<<<<<<
 *                 this.isXbrl = True
 *                 pyIdentificationResults.type = u"instance"
 */
    }

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":290
 * 
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         if compareIString(uri, nsXbrli) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnXbrl) == 0:
 *                 this.isXbrl = True
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":294
 *                 this.isXbrl = True
 *                 pyIdentificationResults.type = u"instance"
 *         elif compareIString(uri, nsXsd) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnSchema) == 0:
 *                 this.isXsd = True
 */
  __pyx_t_2 = ((xercesc::XMLString::compareIString(__pyx_v_uri, __pyx_v_6arelle_8arelle_c_nsXsd) == 0) != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":295
 *                 pyIdentificationResults.type = u"instance"
 *         elif compareIString(uri, nsXsd) == 0:
 *             if compareString(localname, lnSchema) == 0:             # <<<<<<<<<<<<<<
 *                 this.isXsd = True
 *                 pyIdentificationResults.type = u"schema"
 */
    __pyx_t_2 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnSchema) == 0) != 0);
    if (__pyx_t_2) {

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":296
 *         elif compareIString(uri, nsXsd) == 0:
 *             if compareString(localname, lnSchema) == 0:
 *                 this.isXsd = True             # <<<<<<<<<<<<<<
 *                 pyIdentificationResults.type = u"schema"
 *                 attrValue = getAttrValue(attrs, nsNoNamespace, lnTargetNamespace)
 */
      this->isXsd = 1;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":297
 *             if compareString(localname, lnSchema) == 0:
 *                 this.isXsd = True
 *                 pyIdentificationResults.type = u"schema"             # <<<<<<<<<<<<<<
 *                 attrValue = getAttrValue(attrs, nsNoNamespace, lnTargetNamespace)
 *                 if attrValue is not None:
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_n_u_schema) < 0) __PYX_ERR(1, 297, __pyx_L1_error)

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":298
 *                 this.isXsd = True
 *                 pyIdentificationResults.type = u"schema"
 *                 attrValue = getAttrValue(attrs, nsNoNamespace, lnTargetNamespace)             # <<<<<<<<<<<<<<
 *                 if attrValue is not None:
 *                     pyIdentificationResults.targetNamespace = attrValue
 */
      __pyx_t_1 = __pyx_f_6arelle_8arelle_c_getAttrValue(__pyx_v_attrs, __pyx_v_6arelle_8arelle_c_nsNoNamespace, __pyx_v_6arelle_8arelle_c_lnTargetNamespace); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_attrValue = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":299
 *                 pyIdentificationResults.type = u"schema"
 *                 attrValue = getAttrValue(attrs, nsNoNamespace, lnTargetNamespace)
 *                 if attrValue is not None:             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.targetNamespace = attrValue
 *                     xmlChNs = attrs.getValue(nsNoNamespace, lnTargetNamespace)
 */
      __pyx_t_2 = (__pyx_v_attrValue != Py_None);
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":300
 *                 attrValue = getAttrValue(attrs, nsNoNamespace, lnTargetNamespace)
 *                 if attrValue is not None:
 *                     pyIdentificationResults.targetNamespace = attrValue             # <<<<<<<<<<<<<<
 *                     xmlChNs = attrs.getValue(nsNoNamespace, lnTargetNamespace)
 *                     # find any non-default xmlns for this namespace
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_targetNamespace, __pyx_v_attrValue) < 0) __PYX_ERR(1, 300, __pyx_L1_error)

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":301
 *                 if attrValue is not None:
 *                     pyIdentificationResults.targetNamespace = attrValue
 *                     xmlChNs = attrs.getValue(nsNoNamespace, lnTargetNamespace)             # <<<<<<<<<<<<<<
 *                     # find any non-default xmlns for this namespace
 *                     n = attrs.getLength()
 */
        __pyx_v_xmlChNs = __pyx_v_attrs.getValue(__pyx_v_6arelle_8arelle_c_nsNoNamespace, __pyx_v_6arelle_8arelle_c_lnTargetNamespace);

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":303
 *                     xmlChNs = attrs.getValue(nsNoNamespace, lnTargetNamespace)
 *                     # find any non-default xmlns for this namespace
 *                     n = attrs.getLength()             # <<<<<<<<<<<<<<
 *                     for i in range(n):
 *                         xmlCh = attrs.getQName(i)
 */
        __pyx_v_n = __pyx_v_attrs.getLength();

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":304
 *                     # find any non-default xmlns for this namespace
 *                     n = attrs.getLength()
 *                     for i in range(n):             # <<<<<<<<<<<<<<
 *                         xmlCh = attrs.getQName(i)
 *                         if xmlCh != NULL and startsWith(xmlCh, xmlnsPrefix):
 */
        __pyx_t_4 = __pyx_v_n;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "arelle_cython/arelle_c/ModelXbrl.pxi":305
 *                     n = attrs.getLength()
 *                     for i in range(n):
 *                         xmlCh = attrs.getQName(i)             # <<<<<<<<<<<<<<
 *                         if xmlCh != NULL and startsWith(xmlCh, xmlnsPrefix):
 *                             xmlCh = attrs.getValue(i)
 */
          __pyx_v_xmlCh = __pyx_v_attrs.getQName(__pyx_v_i);

          /* "arelle_cython/arelle_c/ModelXbrl.pxi":306
 *                     for i in range(n):
 *                         xmlCh = attrs.getQName(i)
 *                         if xmlCh != NULL and startsWith(xmlCh, xmlnsPrefix):             # <<<<<<<<<<<<<<
 *                             xmlCh = attrs.getValue(i)
 *                             if compareString(xmlCh, xmlChNs) == 0:
 */
          __pyx_t_2 = ((__pyx_v_xmlCh != NULL) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_3 = __pyx_t_2;
            goto __pyx_L10_bool_binop_done;
          }
          __pyx_t_2 = (xercesc::XMLString::startsWith(__pyx_v_xmlCh, __pyx_v_6arelle_8arelle_c_xmlnsPrefix) != 0);
          __pyx_t_3 = __pyx_t_2;
          __pyx_L10_bool_binop_done:;
          if (__pyx_t_3) {

            /* "arelle_cython/arelle_c/ModelXbrl.pxi":307
 *                         xmlCh = attrs.getQName(i)
 *                         if xmlCh != NULL and startsWith(xmlCh, xmlnsPrefix):
 *                             xmlCh = attrs.getValue(i)             # <<<<<<<<<<<<<<
 *                             if compareString(xmlCh, xmlChNs) == 0:
 *                                 xmlCh = attrs.getLocalName(i)
 */
            __pyx_v_xmlCh = __pyx_v_attrs.getValue(__pyx_v_i);

            /* "arelle_cython/arelle_c/ModelXbrl.pxi":308
 *                         if xmlCh != NULL and startsWith(xmlCh, xmlnsPrefix):
 *                             xmlCh = attrs.getValue(i)
 *                             if compareString(xmlCh, xmlChNs) == 0:             # <<<<<<<<<<<<<<
 *                                 xmlCh = attrs.getLocalName(i)
 *                                 chStr = transcode(xmlCh)
 */
            __pyx_t_3 = ((xercesc::XMLString::compareString(__pyx_v_xmlCh, __pyx_v_xmlChNs) == 0) != 0);
            if (__pyx_t_3) {

              /* "arelle_cython/arelle_c/ModelXbrl.pxi":309
 *                             xmlCh = attrs.getValue(i)
 *                             if compareString(xmlCh, xmlChNs) == 0:
 *                                 xmlCh = attrs.getLocalName(i)             # <<<<<<<<<<<<<<
 *                                 chStr = transcode(xmlCh)
 *                                 pyIdentificationResults.targetNamespacePrefix = chStr
 */
              __pyx_v_xmlCh = __pyx_v_attrs.getLocalName(__pyx_v_i);

              /* "arelle_cython/arelle_c/ModelXbrl.pxi":310
 *                             if compareString(xmlCh, xmlChNs) == 0:
 *                                 xmlCh = attrs.getLocalName(i)
 *                                 chStr = transcode(xmlCh)             # <<<<<<<<<<<<<<
 *                                 pyIdentificationResults.targetNamespacePrefix = chStr
 *                                 release(&chStr)
 */
              __pyx_v_chStr = xercesc::XMLString::transcode(__pyx_v_xmlCh);

              /* "arelle_cython/arelle_c/ModelXbrl.pxi":311
 *                                 xmlCh = attrs.getLocalName(i)
 *                                 chStr = transcode(xmlCh)
 *                                 pyIdentificationResults.targetNamespacePrefix = chStr             # <<<<<<<<<<<<<<
 *                                 release(&chStr)
 *                                 break
 */
              __pyx_t_1 = __Pyx_PyUnicode_FromString(__pyx_v_chStr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 311, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_targetNamespacePrefix, __pyx_t_1) < 0) __PYX_ERR(1, 311, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "arelle_cython/arelle_c/ModelXbrl.pxi":312
 *                                 chStr = transcode(xmlCh)
 *                                 pyIdentificationResults.targetNamespacePrefix = chStr
 *                                 release(&chStr)             # <<<<<<<<<<<<<<
 *                                 break
 *         elif compareIString(uri, nsXhtml) == 0:
 */
              xercesc::XMLString::release((&__pyx_v_chStr));

              /* "arelle_cython/arelle_c/ModelXbrl.pxi":313
 *                                 pyIdentificationResults.targetNamespacePrefix = chStr
 *                                 release(&chStr)
 *                                 break             # <<<<<<<<<<<<<<
 *         elif compareIString(uri, nsXhtml) == 0:
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:
 */
              goto __pyx_L8_break;

              /* "arelle_cython/arelle_c/ModelXbrl.pxi":308
 *                         if xmlCh != NULL and startsWith(xmlCh, xmlnsPrefix):
 *                             xmlCh = attrs.getValue(i)
 *                             if compareString(xmlCh, xmlChNs) == 0:             # <<<<<<<<<<<<<<
 *                                 xmlCh = attrs.getLocalName(i)
 *                                 chStr = transcode(xmlCh)
 */
            }

            /* "arelle_cython/arelle_c/ModelXbrl.pxi":306
 *                     for i in range(n):
 *                         xmlCh = attrs.getQName(i)
 *                         if xmlCh != NULL and startsWith(xmlCh, xmlnsPrefix):             # <<<<<<<<<<<<<<
 *                             xmlCh = attrs.getValue(i)
 *                             if compareString(xmlCh, xmlChNs) == 0:
 */
          }
        }
        __pyx_L8_break:;

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":299
 *                 pyIdentificationResults.type = u"schema"
 *                 attrValue = getAttrValue(attrs, nsNoNamespace, lnTargetNamespace)
 *                 if attrValue is not None:             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.targetNamespace = attrValue
 *                     xmlChNs = attrs.getValue(nsNoNamespace, lnTargetNamespace)
 */
      }

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":295
 *                 pyIdentificationResults.type = u"instance"
 *         elif compareIString(uri, nsXsd) == 0:
 *             if compareString(localname, lnSchema) == 0:             # <<<<<<<<<<<<<<
 *                 this.isXsd = True
 *                 pyIdentificationResults.type = u"schema"
 */
    }

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":294
 *                 this.isXbrl = True
 *                 pyIdentificationResults.type = u"instance"
 *         elif compareIString(uri, nsXsd) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnSchema) == 0:
 *                 this.isXsd = True
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":314
 *                                 release(&chStr)
 *                                 break
 *         elif compareIString(uri, nsXhtml) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:
 *                 if this.hasIx11Namespace:
 */
  __pyx_t_3 = ((xercesc::XMLString::compareIString(__pyx_v_uri, __pyx_v_6arelle_8arelle_c_nsXhtml) == 0) != 0);
  if (__pyx_t_3) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":315
 *                                 break
 *         elif compareIString(uri, nsXhtml) == 0:
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:             # <<<<<<<<<<<<<<
 *                 if this.hasIx11Namespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 */
    __pyx_t_2 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnXhtml) == 0) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnHtml) == 0) != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;
    if (__pyx_t_3) {

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":316
 *         elif compareIString(uri, nsXhtml) == 0:
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:
 *                 if this.hasIx11Namespace:             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")
 */
      __pyx_t_3 = (this->hasIx11Namespace != 0);
      if (__pyx_t_3) {

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":317
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:
 *                 if this.hasIx11Namespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")
 *                 elif this.hasIxNamespace:
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_kp_u_inline_XBRL_instance) < 0) __PYX_ERR(1, 317, __pyx_L1_error)

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":318
 *                 if this.hasIx11Namespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")             # <<<<<<<<<<<<<<
 *                 elif this.hasIxNamespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_schemaRefs); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 318, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_add); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 318, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 318, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":316
 *         elif compareIString(uri, nsXhtml) == 0:
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:
 *                 if this.hasIx11Namespace:             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")
 */
        goto __pyx_L16;
      }

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":319
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")
 *                 elif this.hasIxNamespace:             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd")
 */
      __pyx_t_3 = (this->hasIxNamespace != 0);
      if (__pyx_t_3) {

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":320
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")
 *                 elif this.hasIxNamespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd")
 *                 else:
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_kp_u_inline_XBRL_instance) < 0) __PYX_ERR(1, 320, __pyx_L1_error)

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":321
 *                 elif this.hasIxNamespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd")             # <<<<<<<<<<<<<<
 *                 else:
 *                     pyIdentificationResults.type = u"xhtml"
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_schemaRefs); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 321, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_add); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 321, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 321, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":319
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")
 *                 elif this.hasIxNamespace:             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd")
 */
        goto __pyx_L16;
      }

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":323
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd")
 *                 else:
 *                     pyIdentificationResults.type = u"xhtml"             # <<<<<<<<<<<<<<
 *                 this.isHtml = True
 *                 this.isIdentified = True # no need to parse further
 */
      /*else*/ {
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_n_u_xhtml) < 0) __PYX_ERR(1, 323, __pyx_L1_error)
      }
      __pyx_L16:;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":324
 *                 else:
 *                     pyIdentificationResults.type = u"xhtml"
 *                 this.isHtml = True             # <<<<<<<<<<<<<<
 *                 this.isIdentified = True # no need to parse further
 *         elif compareString(uri, nsLink) == 0:
 */
      this->isHtml = 1;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":325
 *                     pyIdentificationResults.type = u"xhtml"
 *                 this.isHtml = True
 *                 this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *         elif compareString(uri, nsLink) == 0:
 *             if this.isXbrl or this.isInline:
 */
      this->isIdentified = 1;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":315
 *                                 break
 *         elif compareIString(uri, nsXhtml) == 0:
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:             # <<<<<<<<<<<<<<
 *                 if this.hasIx11Namespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 */
    }

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":314
 *                                 release(&chStr)
 *                                 break
 *         elif compareIString(uri, nsXhtml) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnXhtml) == 0 or compareString(localname, lnHtml) == 0:
 *                 if this.hasIx11Namespace:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":326
 *                 this.isHtml = True
 *                 this.isIdentified = True # no need to parse further
 *         elif compareString(uri, nsLink) == 0:             # <<<<<<<<<<<<<<
 *             if this.isXbrl or this.isInline:
 *                 if compareString(localname, lnSchemaRef) == 0:
 */
  __pyx_t_3 = ((xercesc::XMLString::compareString(__pyx_v_uri, __pyx_v_6arelle_8arelle_c_nsLink) == 0) != 0);
  if (__pyx_t_3) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":327
 *                 this.isIdentified = True # no need to parse further
 *         elif compareString(uri, nsLink) == 0:
 *             if this.isXbrl or this.isInline:             # <<<<<<<<<<<<<<
 *                 if compareString(localname, lnSchemaRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 */
    __pyx_t_2 = (this->isXbrl != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_2 = (this->isInline != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L18_bool_binop_done:;
    if (__pyx_t_3) {

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":328
 *         elif compareString(uri, nsLink) == 0:
 *             if this.isXbrl or this.isInline:
 *                 if compareString(localname, lnSchemaRef) == 0:             # <<<<<<<<<<<<<<
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 */
      __pyx_t_3 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnSchemaRef) == 0) != 0);
      if (__pyx_t_3) {

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":329
 *             if this.isXbrl or this.isInline:
 *                 if compareString(localname, lnSchemaRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)             # <<<<<<<<<<<<<<
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.add(attrValue)
 */
        __pyx_t_1 = __pyx_f_6arelle_8arelle_c_getAttrValue(__pyx_v_attrs, __pyx_v_6arelle_8arelle_c_nsXlink, __pyx_v_6arelle_8arelle_c_lnHref); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_attrValue = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":330
 *                 if compareString(localname, lnSchemaRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:             # <<<<<<<<<<<<<<
 *                         pyIdentificationResults.schemaRefs.add(attrValue)
 *                 elif compareString(localname, lnLinkbaseRef) == 0:
 */
        __pyx_t_3 = (__pyx_v_attrValue != Py_None);
        __pyx_t_2 = (__pyx_t_3 != 0);
        if (__pyx_t_2) {

          /* "arelle_cython/arelle_c/ModelXbrl.pxi":331
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.add(attrValue)             # <<<<<<<<<<<<<<
 *                 elif compareString(localname, lnLinkbaseRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_schemaRefs); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 331, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_add); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 331, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
            }
          }
          if (!__pyx_t_6) {
            __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_attrValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_7)) {
              PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_attrValue};
              __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_GOTREF(__pyx_t_1);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
              PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_attrValue};
              __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_GOTREF(__pyx_t_1);
            } else
            #endif
            {
              __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 331, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
              __Pyx_INCREF(__pyx_v_attrValue);
              __Pyx_GIVEREF(__pyx_v_attrValue);
              PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_attrValue);
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "arelle_cython/arelle_c/ModelXbrl.pxi":330
 *                 if compareString(localname, lnSchemaRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:             # <<<<<<<<<<<<<<
 *                         pyIdentificationResults.schemaRefs.add(attrValue)
 *                 elif compareString(localname, lnLinkbaseRef) == 0:
 */
        }

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":328
 *         elif compareString(uri, nsLink) == 0:
 *             if this.isXbrl or this.isInline:
 *                 if compareString(localname, lnSchemaRef) == 0:             # <<<<<<<<<<<<<<
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 */
        goto __pyx_L20;
      }

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":332
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.add(attrValue)
 *                 elif compareString(localname, lnLinkbaseRef) == 0:             # <<<<<<<<<<<<<<
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 */
      __pyx_t_2 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnLinkbaseRef) == 0) != 0);
      if (__pyx_t_2) {

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":333
 *                         pyIdentificationResults.schemaRefs.add(attrValue)
 *                 elif compareString(localname, lnLinkbaseRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)             # <<<<<<<<<<<<<<
 *                     if attrValue is not None:
 *                         pyIdentificationResults.linkbaseRefs.add(attrValue)
 */
        __pyx_t_1 = __pyx_f_6arelle_8arelle_c_getAttrValue(__pyx_v_attrs, __pyx_v_6arelle_8arelle_c_nsXlink, __pyx_v_6arelle_8arelle_c_lnHref); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 333, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_attrValue = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":334
 *                 elif compareString(localname, lnLinkbaseRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:             # <<<<<<<<<<<<<<
 *                         pyIdentificationResults.linkbaseRefs.add(attrValue)
 *                 elif compareString(localname, lnRoleRef) == 0 or compareString(localname, lnArcroleRef) == 0:
 */
        __pyx_t_2 = (__pyx_v_attrValue != Py_None);
        __pyx_t_3 = (__pyx_t_2 != 0);
        if (__pyx_t_3) {

          /* "arelle_cython/arelle_c/ModelXbrl.pxi":335
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 *                         pyIdentificationResults.linkbaseRefs.add(attrValue)             # <<<<<<<<<<<<<<
 *                 elif compareString(localname, lnRoleRef) == 0 or compareString(localname, lnArcroleRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_linkbaseRefs); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 335, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_add); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 335, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
            }
          }
          if (!__pyx_t_7) {
            __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_attrValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 335, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_8)) {
              PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_attrValue};
              __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 335, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_GOTREF(__pyx_t_1);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
              PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_attrValue};
              __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 335, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_GOTREF(__pyx_t_1);
            } else
            #endif
            {
              __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 335, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
              __Pyx_INCREF(__pyx_v_attrValue);
              __Pyx_GIVEREF(__pyx_v_attrValue);
              PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_attrValue);
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 335, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "arelle_cython/arelle_c/ModelXbrl.pxi":334
 *                 elif compareString(localname, lnLinkbaseRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:             # <<<<<<<<<<<<<<
 *                         pyIdentificationResults.linkbaseRefs.add(attrValue)
 *                 elif compareString(localname, lnRoleRef) == 0 or compareString(localname, lnArcroleRef) == 0:
 */
        }

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":332
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.add(attrValue)
 *                 elif compareString(localname, lnLinkbaseRef) == 0:             # <<<<<<<<<<<<<<
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 */
        goto __pyx_L20;
      }

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":336
 *                     if attrValue is not None:
 *                         pyIdentificationResults.linkbaseRefs.add(attrValue)
 *                 elif compareString(localname, lnRoleRef) == 0 or compareString(localname, lnArcroleRef) == 0:             # <<<<<<<<<<<<<<
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 */
      __pyx_t_2 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnRoleRef) == 0) != 0);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_3 = __pyx_t_2;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_2 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnArcroleRef) == 0) != 0);
      __pyx_t_3 = __pyx_t_2;
      __pyx_L23_bool_binop_done:;
      if (__pyx_t_3) {

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":337
 *                         pyIdentificationResults.linkbaseRefs.add(attrValue)
 *                 elif compareString(localname, lnRoleRef) == 0 or compareString(localname, lnArcroleRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)             # <<<<<<<<<<<<<<
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.add(attrValue.partition("#")[0])
 */
        __pyx_t_1 = __pyx_f_6arelle_8arelle_c_getAttrValue(__pyx_v_attrs, __pyx_v_6arelle_8arelle_c_nsXlink, __pyx_v_6arelle_8arelle_c_lnHref); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_attrValue = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":338
 *                 elif compareString(localname, lnRoleRef) == 0 or compareString(localname, lnArcroleRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:             # <<<<<<<<<<<<<<
 *                         pyIdentificationResults.schemaRefs.add(attrValue.partition("#")[0])
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:
 */
        __pyx_t_3 = (__pyx_v_attrValue != Py_None);
        __pyx_t_2 = (__pyx_t_3 != 0);
        if (__pyx_t_2) {

          /* "arelle_cython/arelle_c/ModelXbrl.pxi":339
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.add(attrValue.partition("#")[0])             # <<<<<<<<<<<<<<
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:
 *                 this.isIdentified = True # no need to parse further
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_schemaRefs); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 339, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_add); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 339, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_attrValue, __pyx_n_s_partition); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 339, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 339, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 339, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_7 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          if (!__pyx_t_7) {
            __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 339, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_1);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_6)) {
              PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_8};
              __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 339, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
              PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_8};
              __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 339, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            } else
            #endif
            {
              __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 339, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
              __Pyx_GIVEREF(__pyx_t_8);
              PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_8);
              __pyx_t_8 = 0;
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 339, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "arelle_cython/arelle_c/ModelXbrl.pxi":338
 *                 elif compareString(localname, lnRoleRef) == 0 or compareString(localname, lnArcroleRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:             # <<<<<<<<<<<<<<
 *                         pyIdentificationResults.schemaRefs.add(attrValue.partition("#")[0])
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:
 */
        }

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":336
 *                     if attrValue is not None:
 *                         pyIdentificationResults.linkbaseRefs.add(attrValue)
 *                 elif compareString(localname, lnRoleRef) == 0 or compareString(localname, lnArcroleRef) == 0:             # <<<<<<<<<<<<<<
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 */
      }
      __pyx_L20:;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":327
 *                 this.isIdentified = True # no need to parse further
 *         elif compareString(uri, nsLink) == 0:
 *             if this.isXbrl or this.isInline:             # <<<<<<<<<<<<<<
 *                 if compareString(localname, lnSchemaRef) == 0:
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 */
      goto __pyx_L17;
    }

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":340
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.add(attrValue.partition("#")[0])
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:             # <<<<<<<<<<<<<<
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"linkbase"
 */
    __pyx_t_3 = ((this->eltDepth == 0) != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L26_bool_binop_done;
    }
    __pyx_t_3 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnLinkbase) == 0) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L26_bool_binop_done:;
    if (__pyx_t_2) {

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":341
 *                         pyIdentificationResults.schemaRefs.add(attrValue.partition("#")[0])
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:
 *                 this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *                 pyIdentificationResults.type = u"linkbase"
 *         elif compareIString(uri, nsVer) == 0:
 */
      this->isIdentified = 1;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":342
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"linkbase"             # <<<<<<<<<<<<<<
 *         elif compareIString(uri, nsVer) == 0:
 *             if compareString(localname, lnReport) == 0:
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_n_u_linkbase) < 0) __PYX_ERR(1, 342, __pyx_L1_error)

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":340
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.add(attrValue.partition("#")[0])
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:             # <<<<<<<<<<<<<<
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"linkbase"
 */
    }
    __pyx_L17:;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":326
 *                 this.isHtml = True
 *                 this.isIdentified = True # no need to parse further
 *         elif compareString(uri, nsLink) == 0:             # <<<<<<<<<<<<<<
 *             if this.isXbrl or this.isInline:
 *                 if compareString(localname, lnSchemaRef) == 0:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":343
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"linkbase"
 *         elif compareIString(uri, nsVer) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnReport) == 0:
 *                 this.isIdentified = True # no need to parse further
 */
  __pyx_t_2 = ((xercesc::XMLString::compareIString(__pyx_v_uri, __pyx_v_6arelle_8arelle_c_nsVer) == 0) != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":344
 *                 pyIdentificationResults.type = u"linkbase"
 *         elif compareIString(uri, nsVer) == 0:
 *             if compareString(localname, lnReport) == 0:             # <<<<<<<<<<<<<<
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"versioning report"
 */
    __pyx_t_2 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnReport) == 0) != 0);
    if (__pyx_t_2) {

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":345
 *         elif compareIString(uri, nsVer) == 0:
 *             if compareString(localname, lnReport) == 0:
 *                 this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *                 pyIdentificationResults.type = u"versioning report"
 *             elif this.eltDepth == 0:
 */
      this->isIdentified = 1;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":346
 *             if compareString(localname, lnReport) == 0:
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"versioning report"             # <<<<<<<<<<<<<<
 *             elif this.eltDepth == 0:
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_kp_u_versioning_report) < 0) __PYX_ERR(1, 346, __pyx_L1_error)

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":344
 *                 pyIdentificationResults.type = u"linkbase"
 *         elif compareIString(uri, nsVer) == 0:
 *             if compareString(localname, lnReport) == 0:             # <<<<<<<<<<<<<<
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"versioning report"
 */
      goto __pyx_L28;
    }

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":347
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"versioning report"
 *             elif this.eltDepth == 0:             # <<<<<<<<<<<<<<
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:
 *                     this.isIdentified = True # no need to parse further
 */
    __pyx_t_2 = ((this->eltDepth == 0) != 0);
    if (__pyx_t_2) {

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":348
 *                 pyIdentificationResults.type = u"versioning report"
 *             elif this.eltDepth == 0:
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:             # <<<<<<<<<<<<<<
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcases index"
 */
      __pyx_t_3 = ((xercesc::XMLString::compareIString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnTestcases) == 0) != 0);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L30_bool_binop_done;
      }
      __pyx_t_3 = ((xercesc::XMLString::compareIString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnDocumentation) == 0) != 0);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L30_bool_binop_done;
      }
      __pyx_t_3 = ((xercesc::XMLString::compareIString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnTestSuite) == 0) != 0);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L30_bool_binop_done:;
      if (__pyx_t_2) {

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":349
 *             elif this.eltDepth == 0:
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:
 *                     this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.type = u"testcases index"
 *                 elif compareIString(localname, lnTestcase) == 0 or compareIString(localname, lnTestSet) == 0:
 */
        this->isIdentified = 1;

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":350
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcases index"             # <<<<<<<<<<<<<<
 *                 elif compareIString(localname, lnTestcase) == 0 or compareIString(localname, lnTestSet) == 0:
 *                     this.isIdentified = True # no need to parse further
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_kp_u_testcases_index) < 0) __PYX_ERR(1, 350, __pyx_L1_error)

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":348
 *                 pyIdentificationResults.type = u"versioning report"
 *             elif this.eltDepth == 0:
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:             # <<<<<<<<<<<<<<
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcases index"
 */
        goto __pyx_L29;
      }

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":351
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcases index"
 *                 elif compareIString(localname, lnTestcase) == 0 or compareIString(localname, lnTestSet) == 0:             # <<<<<<<<<<<<<<
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcase"
 */
      __pyx_t_3 = ((xercesc::XMLString::compareIString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnTestcase) == 0) != 0);
      if (!__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L33_bool_binop_done;
      }
      __pyx_t_3 = ((xercesc::XMLString::compareIString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnTestSet) == 0) != 0);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L33_bool_binop_done:;
      if (__pyx_t_2) {

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":352
 *                     pyIdentificationResults.type = u"testcases index"
 *                 elif compareIString(localname, lnTestcase) == 0 or compareIString(localname, lnTestSet) == 0:
 *                     this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *                     pyIdentificationResults.type = u"testcase"
 *         elif this.eltDepth == 0 and compareString(localname, lnRss) == 0:
 */
        this->isIdentified = 1;

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":353
 *                 elif compareIString(localname, lnTestcase) == 0 or compareIString(localname, lnTestSet) == 0:
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcase"             # <<<<<<<<<<<<<<
 *         elif this.eltDepth == 0 and compareString(localname, lnRss) == 0:
 *             this.isIdentified = True # no need to parse further
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_n_u_testcase) < 0) __PYX_ERR(1, 353, __pyx_L1_error)

        /* "arelle_cython/arelle_c/ModelXbrl.pxi":351
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcases index"
 *                 elif compareIString(localname, lnTestcase) == 0 or compareIString(localname, lnTestSet) == 0:             # <<<<<<<<<<<<<<
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcase"
 */
      }
      __pyx_L29:;

      /* "arelle_cython/arelle_c/ModelXbrl.pxi":347
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"versioning report"
 *             elif this.eltDepth == 0:             # <<<<<<<<<<<<<<
 *                 if compareIString(localname, lnTestcases) == 0 or compareIString(localname, lnDocumentation) == 0 or compareIString(localname, lnTestSuite) == 0:
 *                     this.isIdentified = True # no need to parse further
 */
    }
    __pyx_L28:;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":343
 *                 this.isIdentified = True # no need to parse further
 *                 pyIdentificationResults.type = u"linkbase"
 *         elif compareIString(uri, nsVer) == 0:             # <<<<<<<<<<<<<<
 *             if compareString(localname, lnReport) == 0:
 *                 this.isIdentified = True # no need to parse further
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":354
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcase"
 *         elif this.eltDepth == 0 and compareString(localname, lnRss) == 0:             # <<<<<<<<<<<<<<
 *             this.isIdentified = True # no need to parse further
 *             pyIdentificationResults.type = u"rss"
 */
  __pyx_t_3 = ((this->eltDepth == 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L35_bool_binop_done;
  }
  __pyx_t_3 = ((xercesc::XMLString::compareString(__pyx_v_localname, __pyx_v_6arelle_8arelle_c_lnRss) == 0) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L35_bool_binop_done:;
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":355
 *                     pyIdentificationResults.type = u"testcase"
 *         elif this.eltDepth == 0 and compareString(localname, lnRss) == 0:
 *             this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *             pyIdentificationResults.type = u"rss"
 *         elif this.isXbrl:
 */
    this->isIdentified = 1;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":356
 *         elif this.eltDepth == 0 and compareString(localname, lnRss) == 0:
 *             this.isIdentified = True # no need to parse further
 *             pyIdentificationResults.type = u"rss"             # <<<<<<<<<<<<<<
 *         elif this.isXbrl:
 *             this.isIdentified = True # no need to parse further
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_type, __pyx_n_u_rss) < 0) __PYX_ERR(1, 356, __pyx_L1_error)

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":354
 *                     this.isIdentified = True # no need to parse further
 *                     pyIdentificationResults.type = u"testcase"
 *         elif this.eltDepth == 0 and compareString(localname, lnRss) == 0:             # <<<<<<<<<<<<<<
 *             this.isIdentified = True # no need to parse further
 *             pyIdentificationResults.type = u"rss"
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":357
 *             this.isIdentified = True # no need to parse further
 *             pyIdentificationResults.type = u"rss"
 *         elif this.isXbrl:             # <<<<<<<<<<<<<<
 *             this.isIdentified = True # no need to parse further
 *         #for i in range(attrs.getLength()):
 */
  __pyx_t_2 = (this->isXbrl != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":358
 *             pyIdentificationResults.type = u"rss"
 *         elif this.isXbrl:
 *             this.isIdentified = True # no need to parse further             # <<<<<<<<<<<<<<
 *         #for i in range(attrs.getLength()):
 *         #    print("attribute {} = {}".format(i, transcode(attrs.getQName(i))))
 */
    this->isIdentified = 1;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":357
 *             this.isIdentified = True # no need to parse further
 *             pyIdentificationResults.type = u"rss"
 *         elif this.isXbrl:             # <<<<<<<<<<<<<<
 *             this.isIdentified = True # no need to parse further
 *         #for i in range(attrs.getLength()):
 */
  }
  __pyx_L3:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":361
 *         #for i in range(attrs.getLength()):
 *         #    print("attribute {} = {}".format(i, transcode(attrs.getQName(i))))
 *         this.eltDepth += 1             # <<<<<<<<<<<<<<
 *         this.eltQNames[this.eltDepth] = <XMLCh*>qname
 * 
 */
  this->eltDepth = (this->eltDepth + 1);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":362
 *         #    print("attribute {} = {}".format(i, transcode(attrs.getQName(i))))
 *         this.eltDepth += 1
 *         this.eltQNames[this.eltDepth] = <XMLCh*>qname             # <<<<<<<<<<<<<<
 * 
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 */
  (this->eltQNames[this->eltDepth]) = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_qname);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":281
 *         this.eltQNames[this.eltDepth] = NULL
 *         this.eltDepth -= 1
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):             # <<<<<<<<<<<<<<
 *         cdef object pyIdentificationResults
 *         cdef XMLSize_t i, n
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("ModelXbrlIdentificationSAX2Handler.startElement", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyIdentificationResults);
  __Pyx_XDECREF(__pyx_v_attrValue);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":364
 *         this.eltQNames[this.eltDepth] = <XMLCh*>qname
 * 
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):             # <<<<<<<<<<<<<<
 *         if compareString(uri, nsIxbrl) == 0:
 *             this.hasIxNamespace = True
 */

void __pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler::startPrefixMapping(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_prefix, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_uri) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("startPrefixMapping", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":365
 * 
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         if compareString(uri, nsIxbrl) == 0:             # <<<<<<<<<<<<<<
 *             this.hasIxNamespace = True
 *         elif compareString(uri, nsIxbrl11) == 0:
 */
  __pyx_t_1 = ((xercesc::XMLString::compareString(__pyx_v_uri, __pyx_v_6arelle_8arelle_c_nsIxbrl) == 0) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":366
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         if compareString(uri, nsIxbrl) == 0:
 *             this.hasIxNamespace = True             # <<<<<<<<<<<<<<
 *         elif compareString(uri, nsIxbrl11) == 0:
 *             this.hasIx11Namespace = True
 */
    this->hasIxNamespace = 1;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":365
 * 
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         if compareString(uri, nsIxbrl) == 0:             # <<<<<<<<<<<<<<
 *             this.hasIxNamespace = True
 *         elif compareString(uri, nsIxbrl11) == 0:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":367
 *         if compareString(uri, nsIxbrl) == 0:
 *             this.hasIxNamespace = True
 *         elif compareString(uri, nsIxbrl11) == 0:             # <<<<<<<<<<<<<<
 *             this.hasIx11Namespace = True
 * 
 */
  __pyx_t_1 = ((xercesc::XMLString::compareString(__pyx_v_uri, __pyx_v_6arelle_8arelle_c_nsIxbrl11) == 0) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":368
 *             this.hasIxNamespace = True
 *         elif compareString(uri, nsIxbrl11) == 0:
 *             this.hasIx11Namespace = True             # <<<<<<<<<<<<<<
 * 
 *     void handlePyError(object pyError):
 */
    this->hasIx11Namespace = 1;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":367
 *         if compareString(uri, nsIxbrl) == 0:
 *             this.hasIxNamespace = True
 *         elif compareString(uri, nsIxbrl11) == 0:             # <<<<<<<<<<<<<<
 *             this.hasIx11Namespace = True
 * 
 */
  }
  __pyx_L3:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":364
 *         this.eltQNames[this.eltDepth] = <XMLCh*>qname
 * 
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):             # <<<<<<<<<<<<<<
 *         if compareString(uri, nsIxbrl) == 0:
 *             this.hasIxNamespace = True
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":370
 *             this.hasIx11Namespace = True
 * 
 *     void handlePyError(object pyError):             # <<<<<<<<<<<<<<
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         pyIdentificationResults.errors.append(pyError)
 */

void __pyx_t_6arelle_8arelle_c_ModelXbrlIdentificationSAX2Handler::handlePyError(PyObject *__pyx_v_pyError) {
  PyObject *__pyx_v_pyIdentificationResults = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("handlePyError", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":371
 * 
 *     void handlePyError(object pyError):
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr             # <<<<<<<<<<<<<<
 *         pyIdentificationResults.errors.append(pyError)
 * 
 */
  __pyx_t_1 = ((PyObject *)this->pyIdentificationResultsPtr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_pyIdentificationResults = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":372
 *     void handlePyError(object pyError):
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         pyIdentificationResults.errors.append(pyError)             # <<<<<<<<<<<<<<
 * 
 * cdef cppclass ModelXbrlEntityResolver(XMLEntityResolver):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyIdentificationResults, __pyx_n_s_errors); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_v_pyError); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(1, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":370
 *             this.hasIx11Namespace = True
 * 
 *     void handlePyError(object pyError):             # <<<<<<<<<<<<<<
 *         pyIdentificationResults = <object>this.pyIdentificationResultsPtr
 *         pyIdentificationResults.errors.append(pyError)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("ModelXbrlIdentificationSAX2Handler.handlePyError", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyIdentificationResults);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":377
 *     void* modelXbrlPtr
 * 
 *     ModelXbrlEntityResolver(void* modelXbrlPtr) except +:             # <<<<<<<<<<<<<<
 *         this.modelXbrlPtr = modelXbrlPtr
 * 
 */

 __pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver::__pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver(void *__pyx_v_modelXbrlPtr) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":378
 * 
 *     ModelXbrlEntityResolver(void* modelXbrlPtr) except +:
 *         this.modelXbrlPtr = modelXbrlPtr             # <<<<<<<<<<<<<<
 * 
 *     close():
 */
  this->modelXbrlPtr = __pyx_v_modelXbrlPtr;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":377
 *     void* modelXbrlPtr
 * 
 *     ModelXbrlEntityResolver(void* modelXbrlPtr) except +:             # <<<<<<<<<<<<<<
 *         this.modelXbrlPtr = modelXbrlPtr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":380
 *         this.modelXbrlPtr = modelXbrlPtr
 * 
 *     close():             # <<<<<<<<<<<<<<
 *         this.modelXbrlPtr = NULL # dereference
 * 
 */

PyObject *__pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver::close(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":381
 * 
 *     close():
 *         this.modelXbrlPtr = NULL # dereference             # <<<<<<<<<<<<<<
 * 
 *     InputSource* resolveEntity(XMLResourceIdentifier* xmlri):
 */
  this->modelXbrlPtr = NULL;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":380
 *         this.modelXbrlPtr = modelXbrlPtr
 * 
 *     close():             # <<<<<<<<<<<<<<
 *         this.modelXbrlPtr = NULL # dereference
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelXbrl.pxi":383
 *         this.modelXbrlPtr = NULL # dereference
 * 
 *     InputSource* resolveEntity(XMLResourceIdentifier* xmlri):             # <<<<<<<<<<<<<<
 *         cdef ResourceIdentifierType _type = xmlri.getResourceIdentifierType()
 *         cdef const XMLCh* publicId = xmlri.getPublicId()
 */

xercesc::InputSource *__pyx_t_6arelle_8arelle_c_ModelXbrlEntityResolver::resolveEntity(xercesc::XMLResourceIdentifier *__pyx_v_xmlri) {
  xercesc::XMLResourceIdentifier::ResourceIdentifierType __pyx_v__type;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_publicId;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_systemId;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_schemaLocation;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_baseURL;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_nameSpace;
  xercesc::Locator const *__pyx_v_locator;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_locatorPublicId;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_locatorSystemId;
  char *__pyx_v__publicId;
  char *__pyx_v__systemId;
  char *__pyx_v__schemaLocation;
  char *__pyx_v__baseURL;
  char *__pyx_v__nameSpace;
  char *__pyx_v__locatorPublicId;
  char *__pyx_v__locatorSystemId;
  PyObject *__pyx_v_pyPublicId = 0;
  PyObject *__pyx_v_pySystemId = 0;
  PyObject *__pyx_v_pySchemaLocation = 0;
  PyObject *__pyx_v_pyBaseURL = 0;
  PyObject *__pyx_v_pyNameSpace = 0;
  PyObject *__pyx_v_pyLocatorPublicId = 0;
  PyObject *__pyx_v_pyLocatorSystemId = 0;
  PyObject *__pyx_v_modelXbrl = 0;
  PyObject *__pyx_v_pyFileDesc = NULL;
  xercesc::InputSource *__pyx_v_inpSrc;
  xercesc::InputSource *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("resolveEntity", 0);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":384
 * 
 *     InputSource* resolveEntity(XMLResourceIdentifier* xmlri):
 *         cdef ResourceIdentifierType _type = xmlri.getResourceIdentifierType()             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* publicId = xmlri.getPublicId()
 *         cdef const XMLCh* systemId = xmlri.getSystemId()
 */
  __pyx_v__type = __pyx_v_xmlri->getResourceIdentifierType();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":385
 *     InputSource* resolveEntity(XMLResourceIdentifier* xmlri):
 *         cdef ResourceIdentifierType _type = xmlri.getResourceIdentifierType()
 *         cdef const XMLCh* publicId = xmlri.getPublicId()             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* systemId = xmlri.getSystemId()
 *         cdef const XMLCh* schemaLocation = xmlri.getPublicId()
 */
  __pyx_v_publicId = __pyx_v_xmlri->getPublicId();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":386
 *         cdef ResourceIdentifierType _type = xmlri.getResourceIdentifierType()
 *         cdef const XMLCh* publicId = xmlri.getPublicId()
 *         cdef const XMLCh* systemId = xmlri.getSystemId()             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* schemaLocation = xmlri.getPublicId()
 *         cdef const XMLCh* baseURL = xmlri.getPublicId()
 */
  __pyx_v_systemId = __pyx_v_xmlri->getSystemId();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":387
 *         cdef const XMLCh* publicId = xmlri.getPublicId()
 *         cdef const XMLCh* systemId = xmlri.getSystemId()
 *         cdef const XMLCh* schemaLocation = xmlri.getPublicId()             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* baseURL = xmlri.getPublicId()
 *         cdef const XMLCh* nameSpace = xmlri.getPublicId()
 */
  __pyx_v_schemaLocation = __pyx_v_xmlri->getPublicId();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":388
 *         cdef const XMLCh* systemId = xmlri.getSystemId()
 *         cdef const XMLCh* schemaLocation = xmlri.getPublicId()
 *         cdef const XMLCh* baseURL = xmlri.getPublicId()             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* nameSpace = xmlri.getPublicId()
 *         cdef const Locator* locator = xmlri.getLocator()
 */
  __pyx_v_baseURL = __pyx_v_xmlri->getPublicId();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":389
 *         cdef const XMLCh* schemaLocation = xmlri.getPublicId()
 *         cdef const XMLCh* baseURL = xmlri.getPublicId()
 *         cdef const XMLCh* nameSpace = xmlri.getPublicId()             # <<<<<<<<<<<<<<
 *         cdef const Locator* locator = xmlri.getLocator()
 *         cdef const XMLCh* locatorPublicId = locator.getPublicId()
 */
  __pyx_v_nameSpace = __pyx_v_xmlri->getPublicId();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":390
 *         cdef const XMLCh* baseURL = xmlri.getPublicId()
 *         cdef const XMLCh* nameSpace = xmlri.getPublicId()
 *         cdef const Locator* locator = xmlri.getLocator()             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* locatorPublicId = locator.getPublicId()
 *         cdef const XMLCh* locatorSystemId = locator.getSystemId()
 */
  __pyx_v_locator = __pyx_v_xmlri->getLocator();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":391
 *         cdef const XMLCh* nameSpace = xmlri.getPublicId()
 *         cdef const Locator* locator = xmlri.getLocator()
 *         cdef const XMLCh* locatorPublicId = locator.getPublicId()             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* locatorSystemId = locator.getSystemId()
 *         cdef char* _publicId
 */
  __pyx_v_locatorPublicId = __pyx_v_locator->getPublicId();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":392
 *         cdef const Locator* locator = xmlri.getLocator()
 *         cdef const XMLCh* locatorPublicId = locator.getPublicId()
 *         cdef const XMLCh* locatorSystemId = locator.getSystemId()             # <<<<<<<<<<<<<<
 *         cdef char* _publicId
 *         cdef char* _systemId
 */
  __pyx_v_locatorSystemId = __pyx_v_locator->getSystemId();

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":401
 *         cdef char* _locatorSystemId
 *         cdef object pyPublicId, pySystemId, pySchemaLocation, pyBaseURL, pyNameSpace, pyLocatorPublicId, pyLocatorSystemId
 *         if publicId != NULL and publicId[0] != 0:             # <<<<<<<<<<<<<<
 *             _publicId = transcode(publicId)
 *             pyPublicId = _publicId
 */
  __pyx_t_2 = ((__pyx_v_publicId != NULL) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (((__pyx_v_publicId[0]) != 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":402
 *         cdef object pyPublicId, pySystemId, pySchemaLocation, pyBaseURL, pyNameSpace, pyLocatorPublicId, pyLocatorSystemId
 *         if publicId != NULL and publicId[0] != 0:
 *             _publicId = transcode(publicId)             # <<<<<<<<<<<<<<
 *             pyPublicId = _publicId
 *             release(&_publicId)
 */
    __pyx_v__publicId = xercesc::XMLString::transcode(__pyx_v_publicId);

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":403
 *         if publicId != NULL and publicId[0] != 0:
 *             _publicId = transcode(publicId)
 *             pyPublicId = _publicId             # <<<<<<<<<<<<<<
 *             release(&_publicId)
 *         else:
 */
    __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v__publicId); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_pyPublicId = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":404
 *             _publicId = transcode(publicId)
 *             pyPublicId = _publicId
 *             release(&_publicId)             # <<<<<<<<<<<<<<
 *         else:
 *             pyPublicId = None
 */
    xercesc::XMLString::release((&__pyx_v__publicId));

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":401
 *         cdef char* _locatorSystemId
 *         cdef object pyPublicId, pySystemId, pySchemaLocation, pyBaseURL, pyNameSpace, pyLocatorPublicId, pyLocatorSystemId
 *         if publicId != NULL and publicId[0] != 0:             # <<<<<<<<<<<<<<
 *             _publicId = transcode(publicId)
 *             pyPublicId = _publicId
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":406
 *             release(&_publicId)
 *         else:
 *             pyPublicId = None             # <<<<<<<<<<<<<<
 *         if systemId != NULL:
 *             _systemId = transcode(systemId)
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_pyPublicId = Py_None;
  }
  __pyx_L3:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":407
 *         else:
 *             pyPublicId = None
 *         if systemId != NULL:             # <<<<<<<<<<<<<<
 *             _systemId = transcode(systemId)
 *             pySystemId = _systemId
 */
  __pyx_t_1 = ((__pyx_v_systemId != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":408
 *             pyPublicId = None
 *         if systemId != NULL:
 *             _systemId = transcode(systemId)             # <<<<<<<<<<<<<<
 *             pySystemId = _systemId
 *             release(&_systemId)
 */
    __pyx_v__systemId = xercesc::XMLString::transcode(__pyx_v_systemId);

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":409
 *         if systemId != NULL:
 *             _systemId = transcode(systemId)
 *             pySystemId = _systemId             # <<<<<<<<<<<<<<
 *             release(&_systemId)
 *         else:
 */
    __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v__systemId); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_pySystemId = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":410
 *             _systemId = transcode(systemId)
 *             pySystemId = _systemId
 *             release(&_systemId)             # <<<<<<<<<<<<<<
 *         else:
 *             pySystemId = None
 */
    xercesc::XMLString::release((&__pyx_v__systemId));

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":407
 *         else:
 *             pyPublicId = None
 *         if systemId != NULL:             # <<<<<<<<<<<<<<
 *             _systemId = transcode(systemId)
 *             pySystemId = _systemId
 */
    goto __pyx_L6;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":412
 *             release(&_systemId)
 *         else:
 *             pySystemId = None             # <<<<<<<<<<<<<<
 *         if schemaLocation != NULL:
 *             _schemaLocation = transcode(schemaLocation)
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_pySystemId = Py_None;
  }
  __pyx_L6:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":413
 *         else:
 *             pySystemId = None
 *         if schemaLocation != NULL:             # <<<<<<<<<<<<<<
 *             _schemaLocation = transcode(schemaLocation)
 *             pySchemaLocation = _schemaLocation
 */
  __pyx_t_1 = ((__pyx_v_schemaLocation != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":414
 *             pySystemId = None
 *         if schemaLocation != NULL:
 *             _schemaLocation = transcode(schemaLocation)             # <<<<<<<<<<<<<<
 *             pySchemaLocation = _schemaLocation
 *             release(&_schemaLocation)
 */
    __pyx_v__schemaLocation = xercesc::XMLString::transcode(__pyx_v_schemaLocation);

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":415
 *         if schemaLocation != NULL:
 *             _schemaLocation = transcode(schemaLocation)
 *             pySchemaLocation = _schemaLocation             # <<<<<<<<<<<<<<
 *             release(&_schemaLocation)
 *         else:
 */
    __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v__schemaLocation); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_pySchemaLocation = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":416
 *             _schemaLocation = transcode(schemaLocation)
 *             pySchemaLocation = _schemaLocation
 *             release(&_schemaLocation)             # <<<<<<<<<<<<<<
 *         else:
 *             pySchemaLocation = None
 */
    xercesc::XMLString::release((&__pyx_v__schemaLocation));

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":413
 *         else:
 *             pySystemId = None
 *         if schemaLocation != NULL:             # <<<<<<<<<<<<<<
 *             _schemaLocation = transcode(schemaLocation)
 *             pySchemaLocation = _schemaLocation
 */
    goto __pyx_L7;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":418
 *             release(&_schemaLocation)
 *         else:
 *             pySchemaLocation = None             # <<<<<<<<<<<<<<
 *         if baseURL != NULL:
 *             _baseURL = transcode(baseURL)
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_pySchemaLocation = Py_None;
  }
  __pyx_L7:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":419
 *         else:
 *             pySchemaLocation = None
 *         if baseURL != NULL:             # <<<<<<<<<<<<<<
 *             _baseURL = transcode(baseURL)
 *             pyBaseURL = _baseURL
 */
  __pyx_t_1 = ((__pyx_v_baseURL != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":420
 *             pySchemaLocation = None
 *         if baseURL != NULL:
 *             _baseURL = transcode(baseURL)             # <<<<<<<<<<<<<<
 *             pyBaseURL = _baseURL
 *             release(&_baseURL)
 */
    __pyx_v__baseURL = xercesc::XMLString::transcode(__pyx_v_baseURL);

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":421
 *         if baseURL != NULL:
 *             _baseURL = transcode(baseURL)
 *             pyBaseURL = _baseURL             # <<<<<<<<<<<<<<
 *             release(&_baseURL)
 *         else:
 */
    __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v__baseURL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_pyBaseURL = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":422
 *             _baseURL = transcode(baseURL)
 *             pyBaseURL = _baseURL
 *             release(&_baseURL)             # <<<<<<<<<<<<<<
 *         else:
 *             pyBaseURL = None
 */
    xercesc::XMLString::release((&__pyx_v__baseURL));

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":419
 *         else:
 *             pySchemaLocation = None
 *         if baseURL != NULL:             # <<<<<<<<<<<<<<
 *             _baseURL = transcode(baseURL)
 *             pyBaseURL = _baseURL
 */
    goto __pyx_L8;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":424
 *             release(&_baseURL)
 *         else:
 *             pyBaseURL = None             # <<<<<<<<<<<<<<
 *         if nameSpace != NULL:
 *             _nameSpace = transcode(nameSpace)
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_pyBaseURL = Py_None;
  }
  __pyx_L8:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":425
 *         else:
 *             pyBaseURL = None
 *         if nameSpace != NULL:             # <<<<<<<<<<<<<<
 *             _nameSpace = transcode(nameSpace)
 *             pyNameSpace = _nameSpace
 */
  __pyx_t_1 = ((__pyx_v_nameSpace != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":426
 *             pyBaseURL = None
 *         if nameSpace != NULL:
 *             _nameSpace = transcode(nameSpace)             # <<<<<<<<<<<<<<
 *             pyNameSpace = _nameSpace
 *             release(&_nameSpace)
 */
    __pyx_v__nameSpace = xercesc::XMLString::transcode(__pyx_v_nameSpace);

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":427
 *         if nameSpace != NULL:
 *             _nameSpace = transcode(nameSpace)
 *             pyNameSpace = _nameSpace             # <<<<<<<<<<<<<<
 *             release(&_nameSpace)
 *         else:
 */
    __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v__nameSpace); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_pyNameSpace = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":428
 *             _nameSpace = transcode(nameSpace)
 *             pyNameSpace = _nameSpace
 *             release(&_nameSpace)             # <<<<<<<<<<<<<<
 *         else:
 *             pyNameSpace = None
 */
    xercesc::XMLString::release((&__pyx_v__nameSpace));

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":425
 *         else:
 *             pyBaseURL = None
 *         if nameSpace != NULL:             # <<<<<<<<<<<<<<
 *             _nameSpace = transcode(nameSpace)
 *             pyNameSpace = _nameSpace
 */
    goto __pyx_L9;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":430
 *             release(&_nameSpace)
 *         else:
 *             pyNameSpace = None             # <<<<<<<<<<<<<<
 *         if locatorPublicId != NULL:
 *             _locatorPublicId = transcode(locatorPublicId)
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_pyNameSpace = Py_None;
  }
  __pyx_L9:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":431
 *         else:
 *             pyNameSpace = None
 *         if locatorPublicId != NULL:             # <<<<<<<<<<<<<<
 *             _locatorPublicId = transcode(locatorPublicId)
 *             pyLocatorPublicId = _locatorPublicId
 */
  __pyx_t_1 = ((__pyx_v_locatorPublicId != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":432
 *             pyNameSpace = None
 *         if locatorPublicId != NULL:
 *             _locatorPublicId = transcode(locatorPublicId)             # <<<<<<<<<<<<<<
 *             pyLocatorPublicId = _locatorPublicId
 *             release(&_locatorPublicId)
 */
    __pyx_v__locatorPublicId = xercesc::XMLString::transcode(__pyx_v_locatorPublicId);

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":433
 *         if locatorPublicId != NULL:
 *             _locatorPublicId = transcode(locatorPublicId)
 *             pyLocatorPublicId = _locatorPublicId             # <<<<<<<<<<<<<<
 *             release(&_locatorPublicId)
 *         else:
 */
    __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v__locatorPublicId); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_pyLocatorPublicId = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":434
 *             _locatorPublicId = transcode(locatorPublicId)
 *             pyLocatorPublicId = _locatorPublicId
 *             release(&_locatorPublicId)             # <<<<<<<<<<<<<<
 *         else:
 *             pyLocatorPublicId = None
 */
    xercesc::XMLString::release((&__pyx_v__locatorPublicId));

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":431
 *         else:
 *             pyNameSpace = None
 *         if locatorPublicId != NULL:             # <<<<<<<<<<<<<<
 *             _locatorPublicId = transcode(locatorPublicId)
 *             pyLocatorPublicId = _locatorPublicId
 */
    goto __pyx_L10;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":436
 *             release(&_locatorPublicId)
 *         else:
 *             pyLocatorPublicId = None             # <<<<<<<<<<<<<<
 *         if locatorSystemId != NULL:
 *             _locatorSystemId = transcode(locatorSystemId)
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_pyLocatorPublicId = Py_None;
  }
  __pyx_L10:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":437
 *         else:
 *             pyLocatorPublicId = None
 *         if locatorSystemId != NULL:             # <<<<<<<<<<<<<<
 *             _locatorSystemId = transcode(locatorSystemId)
 *             pyLocatorSystemId = _locatorSystemId
 */
  __pyx_t_1 = ((__pyx_v_locatorSystemId != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":438
 *             pyLocatorPublicId = None
 *         if locatorSystemId != NULL:
 *             _locatorSystemId = transcode(locatorSystemId)             # <<<<<<<<<<<<<<
 *             pyLocatorSystemId = _locatorSystemId
 *             release(&_locatorSystemId)
 */
    __pyx_v__locatorSystemId = xercesc::XMLString::transcode(__pyx_v_locatorSystemId);

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":439
 *         if locatorSystemId != NULL:
 *             _locatorSystemId = transcode(locatorSystemId)
 *             pyLocatorSystemId = _locatorSystemId             # <<<<<<<<<<<<<<
 *             release(&_locatorSystemId)
 *         else:
 */
    __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v__locatorSystemId); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_pyLocatorSystemId = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":440
 *             _locatorSystemId = transcode(locatorSystemId)
 *             pyLocatorSystemId = _locatorSystemId
 *             release(&_locatorSystemId)             # <<<<<<<<<<<<<<
 *         else:
 *             pyLocatorSystemId = None
 */
    xercesc::XMLString::release((&__pyx_v__locatorSystemId));

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":437
 *         else:
 *             pyLocatorPublicId = None
 *         if locatorSystemId != NULL:             # <<<<<<<<<<<<<<
 *             _locatorSystemId = transcode(locatorSystemId)
 *             pyLocatorSystemId = _locatorSystemId
 */
    goto __pyx_L11;
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":442
 *             release(&_locatorSystemId)
 *         else:
 *             pyLocatorSystemId = None             # <<<<<<<<<<<<<<
 *         cdef object modelXbrl = <object>this.modelXbrlPtr
 *         pyFileDesc = modelXbrl.xerces_resolve_entity(_type, pyPublicId, pySystemId, pySchemaLocation, pyBaseURL, pyNameSpace,
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __pyx_v_pyLocatorSystemId = Py_None;
  }
  __pyx_L11:;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":443
 *         else:
 *             pyLocatorSystemId = None
 *         cdef object modelXbrl = <object>this.modelXbrlPtr             # <<<<<<<<<<<<<<
 *         pyFileDesc = modelXbrl.xerces_resolve_entity(_type, pyPublicId, pySystemId, pySchemaLocation, pyBaseURL, pyNameSpace,
 *                                                      pyLocatorPublicId, pyLocatorSystemId,
 */
  __pyx_t_3 = ((PyObject *)this->modelXbrlPtr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_modelXbrl = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":444
 *             pyLocatorSystemId = None
 *         cdef object modelXbrl = <object>this.modelXbrlPtr
 *         pyFileDesc = modelXbrl.xerces_resolve_entity(_type, pyPublicId, pySystemId, pySchemaLocation, pyBaseURL, pyNameSpace,             # <<<<<<<<<<<<<<
 *                                                      pyLocatorPublicId, pyLocatorSystemId,
 *                                                      locator.getLineNumber(), locator.getColumnNumber())
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_modelXbrl, __pyx_n_s_xerces_resolve_entity); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_xercesc_3a__3a_XMLResourceIdentifier_3a__3a_ResourceIdentifierType(__pyx_v__type); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":446
 *         pyFileDesc = modelXbrl.xerces_resolve_entity(_type, pyPublicId, pySystemId, pySchemaLocation, pyBaseURL, pyNameSpace,
 *                                                      pyLocatorPublicId, pyLocatorSystemId,
 *                                                      locator.getLineNumber(), locator.getColumnNumber())             # <<<<<<<<<<<<<<
 *         if pyFileDesc is None:
 *             return NULL
 */
  __pyx_t_6 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_locator->getLineNumber()); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_locator->getColumnNumber()); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[11] = {__pyx_t_8, __pyx_t_5, __pyx_v_pyPublicId, __pyx_v_pySystemId, __pyx_v_pySchemaLocation, __pyx_v_pyBaseURL, __pyx_v_pyNameSpace, __pyx_v_pyLocatorPublicId, __pyx_v_pyLocatorSystemId, __pyx_t_6, __pyx_t_7};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 10+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 444, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[11] = {__pyx_t_8, __pyx_t_5, __pyx_v_pyPublicId, __pyx_v_pySystemId, __pyx_v_pySchemaLocation, __pyx_v_pyBaseURL, __pyx_v_pyNameSpace, __pyx_v_pyLocatorPublicId, __pyx_v_pyLocatorSystemId, __pyx_t_6, __pyx_t_7};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 10+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 444, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(10+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_pyPublicId);
    __Pyx_GIVEREF(__pyx_v_pyPublicId);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_pyPublicId);
    __Pyx_INCREF(__pyx_v_pySystemId);
    __Pyx_GIVEREF(__pyx_v_pySystemId);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_v_pySystemId);
    __Pyx_INCREF(__pyx_v_pySchemaLocation);
    __Pyx_GIVEREF(__pyx_v_pySchemaLocation);
    PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_9, __pyx_v_pySchemaLocation);
    __Pyx_INCREF(__pyx_v_pyBaseURL);
    __Pyx_GIVEREF(__pyx_v_pyBaseURL);
    PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_9, __pyx_v_pyBaseURL);
    __Pyx_INCREF(__pyx_v_pyNameSpace);
    __Pyx_GIVEREF(__pyx_v_pyNameSpace);
    PyTuple_SET_ITEM(__pyx_t_10, 5+__pyx_t_9, __pyx_v_pyNameSpace);
    __Pyx_INCREF(__pyx_v_pyLocatorPublicId);
    __Pyx_GIVEREF(__pyx_v_pyLocatorPublicId);
    PyTuple_SET_ITEM(__pyx_t_10, 6+__pyx_t_9, __pyx_v_pyLocatorPublicId);
    __Pyx_INCREF(__pyx_v_pyLocatorSystemId);
    __Pyx_GIVEREF(__pyx_v_pyLocatorSystemId);
    PyTuple_SET_ITEM(__pyx_t_10, 7+__pyx_t_9, __pyx_v_pyLocatorSystemId);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_10, 8+__pyx_t_9, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_10, 9+__pyx_t_9, __pyx_t_7);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_pyFileDesc = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":447
 *                                                      pyLocatorPublicId, pyLocatorSystemId,
 *                                                      locator.getLineNumber(), locator.getColumnNumber())
 *         if pyFileDesc is None:             # <<<<<<<<<<<<<<
 *             return NULL
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 */
  __pyx_t_1 = (__pyx_v_pyFileDesc == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":448
 *                                                      locator.getLineNumber(), locator.getColumnNumber())
 *         if pyFileDesc is None:
 *             return NULL             # <<<<<<<<<<<<<<
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *         return inpSrc
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/ModelXbrl.pxi":447
 *                                                      pyLocatorPublicId, pyLocatorSystemId,
 *                                                      locator.getLineNumber(), locator.getColumnNumber())
 *         if pyFileDesc is None:             # <<<<<<<<<<<<<<
 *             return NULL
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 */
  }

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":449
 *         if pyFileDesc is None:
 *             return NULL
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)             # <<<<<<<<<<<<<<
 *         return inpSrc
 * 
 */
  __pyx_v_inpSrc = __pyx_f_6arelle_8arelle_c_fileDescInputSource(__pyx_v_pyFileDesc);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":450
 *             return NULL
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *         return inpSrc             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_inpSrc;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":383
 *         this.modelXbrlPtr = NULL # dereference
 * 
 *     InputSource* resolveEntity(XMLResourceIdentifier* xmlri):             # <<<<<<<<<<<<<<
 *         cdef ResourceIdentifierType _type = xmlri.getResourceIdentifierType()
 *         cdef const XMLCh* publicId = xmlri.getPublicId()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("ModelXbrlEntityResolver.resolveEntity", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyPublicId);
  __Pyx_XDECREF(__pyx_v_pySystemId);
  __Pyx_XDECREF(__pyx_v_pySchemaLocation);
  __Pyx_XDECREF(__pyx_v_pyBaseURL);
  __Pyx_XDECREF(__pyx_v_pyNameSpace);
  __Pyx_XDECREF(__pyx_v_pyLocatorPublicId);
  __Pyx_XDECREF(__pyx_v_pyLocatorSystemId);
  __Pyx_XDECREF(__pyx_v_modelXbrl);
  __Pyx_XDECREF(__pyx_v_pyFileDesc);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":14
 *     cdef public object xmlRootElement
 * 
 *     def __init__(self, ModelXbrl modelXbrl, int type, unicode url, unicode filepath):             # <<<<<<<<<<<<<<
 *         self.modelXbrl = modelXbrl
 *         self.type = type
 */

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_modelXbrl = 0;
  int __pyx_v_type;
  PyObject *__pyx_v_url = 0;
  PyObject *__pyx_v_filepath = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_modelXbrl,&__pyx_n_s_type,&__pyx_n_s_url,&__pyx_n_s_filepath,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_modelXbrl)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 1); __PYX_ERR(5, 14, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_url)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 2); __PYX_ERR(5, 14, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filepath)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 3); __PYX_ERR(5, 14, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(5, 14, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_modelXbrl = ((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)values[0]);
    __pyx_v_type = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_type == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 14, __pyx_L3_error)
    __pyx_v_url = ((PyObject*)values[2]);
    __pyx_v_filepath = ((PyObject*)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 14, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("arelle.arelle_c.ModelDocument.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_modelXbrl), __pyx_ptype_6arelle_8arelle_c_ModelXbrl, 1, "modelXbrl", 0))) __PYX_ERR(5, 14, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_url), (&PyUnicode_Type), 1, "url", 1))) __PYX_ERR(5, 14, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filepath), (&PyUnicode_Type), 1, "filepath", 1))) __PYX_ERR(5, 14, __pyx_L1_error)
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument___init__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self), __pyx_v_modelXbrl, __pyx_v_type, __pyx_v_url, __pyx_v_filepath);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_13ModelDocument___init__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_modelXbrl, int __pyx_v_type, PyObject *__pyx_v_url, PyObject *__pyx_v_filepath) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":15
 * 
 *     def __init__(self, ModelXbrl modelXbrl, int type, unicode url, unicode filepath):
 *         self.modelXbrl = modelXbrl             # <<<<<<<<<<<<<<
 *         self.type = type
 *         self.url = url
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_modelXbrl));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_modelXbrl));
  __Pyx_GOTREF(__pyx_v_self->modelXbrl);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->modelXbrl));
  __pyx_v_self->modelXbrl = __pyx_v_modelXbrl;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":16
 *     def __init__(self, ModelXbrl modelXbrl, int type, unicode url, unicode filepath):
 *         self.modelXbrl = modelXbrl
 *         self.type = type             # <<<<<<<<<<<<<<
 *         self.url = url
 *         self.filepath = filepath
 */
  __pyx_v_self->type = __pyx_v_type;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":17
 *         self.modelXbrl = modelXbrl
 *         self.type = type
 *         self.url = url             # <<<<<<<<<<<<<<
 *         self.filepath = filepath
 *         self.targetNamespace = None
 */
  __Pyx_INCREF(__pyx_v_url);
  __Pyx_GIVEREF(__pyx_v_url);
  __Pyx_GOTREF(__pyx_v_self->url);
  __Pyx_DECREF(__pyx_v_self->url);
  __pyx_v_self->url = __pyx_v_url;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":18
 *         self.type = type
 *         self.url = url
 *         self.filepath = filepath             # <<<<<<<<<<<<<<
 *         self.targetNamespace = None
 *         self.targetNamespacePrefix = None
 */
  __Pyx_INCREF(__pyx_v_filepath);
  __Pyx_GIVEREF(__pyx_v_filepath);
  __Pyx_GOTREF(__pyx_v_self->filepath);
  __Pyx_DECREF(__pyx_v_self->filepath);
  __pyx_v_self->filepath = __pyx_v_filepath;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":19
 *         self.url = url
 *         self.filepath = filepath
 *         self.targetNamespace = None             # <<<<<<<<<<<<<<
 *         self.targetNamespacePrefix = None
 *         self.xmlRootElement = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->targetNamespace);
  __Pyx_DECREF(__pyx_v_self->targetNamespace);
  __pyx_v_self->targetNamespace = ((PyObject*)Py_None);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":20
 *         self.filepath = filepath
 *         self.targetNamespace = None
 *         self.targetNamespacePrefix = None             # <<<<<<<<<<<<<<
 *         self.xmlRootElement = None
 *         self.isGrammarLoadedIntoModel = False
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->targetNamespacePrefix);
  __Pyx_DECREF(__pyx_v_self->targetNamespacePrefix);
  __pyx_v_self->targetNamespacePrefix = ((PyObject*)Py_None);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":21
 *         self.targetNamespace = None
 *         self.targetNamespacePrefix = None
 *         self.xmlRootElement = None             # <<<<<<<<<<<<<<
 *         self.isGrammarLoadedIntoModel = False
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->xmlRootElement);
  __Pyx_DECREF(__pyx_v_self->xmlRootElement);
  __pyx_v_self->xmlRootElement = Py_None;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":22
 *         self.targetNamespacePrefix = None
 *         self.xmlRootElement = None
 *         self.isGrammarLoadedIntoModel = False             # <<<<<<<<<<<<<<
 * 
 *     def loadSchema(self, object pyFileDesc):
 */
  __pyx_v_self->isGrammarLoadedIntoModel = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":14
 *     cdef public object xmlRootElement
 * 
 *     def __init__(self, ModelXbrl modelXbrl, int type, unicode url, unicode filepath):             # <<<<<<<<<<<<<<
 *         self.modelXbrl = modelXbrl
 *         self.type = type
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":24
 *         self.isGrammarLoadedIntoModel = False
 * 
 *     def loadSchema(self, object pyFileDesc):             # <<<<<<<<<<<<<<
 *         cdef ModelXbrl modelXbrl = self.modelXbrl
 *         modelXbrl.openSax2Parser()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_3loadSchema(PyObject *__pyx_v_self, PyObject *__pyx_v_pyFileDesc); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_3loadSchema(PyObject *__pyx_v_self, PyObject *__pyx_v_pyFileDesc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadSchema (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_2loadSchema(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self), ((PyObject *)__pyx_v_pyFileDesc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_2loadSchema(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, PyObject *__pyx_v_pyFileDesc) {
  struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_modelXbrl = 0;
  void *__pyx_v_modelDocumentPtr;
  __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler *__pyx_v_sax2Handler;
  xercesc::InputSource *__pyx_v_inpSrc;
  xercesc::SchemaGrammar *__pyx_v_schemaGrammar;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_xmlChTargetNS;
  char *__pyx_v_targetNs;
  PyObject *__pyx_v_pyNs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("loadSchema", 0);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":25
 * 
 *     def loadSchema(self, object pyFileDesc):
 *         cdef ModelXbrl modelXbrl = self.modelXbrl             # <<<<<<<<<<<<<<
 *         modelXbrl.openSax2Parser()
 *         cdef void* modelDocumentPtr = <void*>self
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->modelXbrl);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_modelXbrl = ((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":26
 *     def loadSchema(self, object pyFileDesc):
 *         cdef ModelXbrl modelXbrl = self.modelXbrl
 *         modelXbrl.openSax2Parser()             # <<<<<<<<<<<<<<
 *         cdef void* modelDocumentPtr = <void*>self
 *         cdef ModelDocumentSAX2Handler* sax2Handler = <ModelDocumentSAX2Handler*>modelXbrl.sax2_parser.getContentHandler()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_modelXbrl), __pyx_n_s_openSax2Parser); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 26, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 26, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":27
 *         cdef ModelXbrl modelXbrl = self.modelXbrl
 *         modelXbrl.openSax2Parser()
 *         cdef void* modelDocumentPtr = <void*>self             # <<<<<<<<<<<<<<
 *         cdef ModelDocumentSAX2Handler* sax2Handler = <ModelDocumentSAX2Handler*>modelXbrl.sax2_parser.getContentHandler()
 *         sax2Handler.setModelDocument(modelDocumentPtr)
 */
  __pyx_v_modelDocumentPtr = ((void *)__pyx_v_self);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":28
 *         modelXbrl.openSax2Parser()
 *         cdef void* modelDocumentPtr = <void*>self
 *         cdef ModelDocumentSAX2Handler* sax2Handler = <ModelDocumentSAX2Handler*>modelXbrl.sax2_parser.getContentHandler()             # <<<<<<<<<<<<<<
 *         sax2Handler.setModelDocument(modelDocumentPtr)
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 */
  __pyx_v_sax2Handler = ((__pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler *)__pyx_v_modelXbrl->sax2_parser->getContentHandler());

  /* "arelle_cython/arelle_c/ModelDocument.pxi":29
 *         cdef void* modelDocumentPtr = <void*>self
 *         cdef ModelDocumentSAX2Handler* sax2Handler = <ModelDocumentSAX2Handler*>modelXbrl.sax2_parser.getContentHandler()
 *         sax2Handler.setModelDocument(modelDocumentPtr)             # <<<<<<<<<<<<<<
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *         cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>modelXbrl.sax2_parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)
 */
  __pyx_v_sax2Handler->setModelDocument(__pyx_v_modelDocumentPtr);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":30
 *         cdef ModelDocumentSAX2Handler* sax2Handler = <ModelDocumentSAX2Handler*>modelXbrl.sax2_parser.getContentHandler()
 *         sax2Handler.setModelDocument(modelDocumentPtr)
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)             # <<<<<<<<<<<<<<
 *         cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>modelXbrl.sax2_parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)
 *         assert schemaGrammar != NULL, "arelle:loadSchemaGrammarNull schema grammar not loaded, null results"
 */
  __pyx_v_inpSrc = __pyx_f_6arelle_8arelle_c_fileDescInputSource(__pyx_v_pyFileDesc);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":31
 *         sax2Handler.setModelDocument(modelDocumentPtr)
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *         cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>modelXbrl.sax2_parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)             # <<<<<<<<<<<<<<
 *         assert schemaGrammar != NULL, "arelle:loadSchemaGrammarNull schema grammar not loaded, null results"
 *         cdef XMLCh* xmlChTargetNS = <XMLCh*>schemaGrammar.getTargetNamespace()
 */
  __pyx_v_schemaGrammar = ((xercesc::SchemaGrammar *)__pyx_v_modelXbrl->sax2_parser->loadGrammar((*__pyx_v_inpSrc), xercesc::Grammar::SchemaGrammarType, 1));

  /* "arelle_cython/arelle_c/ModelDocument.pxi":32
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *         cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>modelXbrl.sax2_parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)
 *         assert schemaGrammar != NULL, "arelle:loadSchemaGrammarNull schema grammar not loaded, null results"             # <<<<<<<<<<<<<<
 *         cdef XMLCh* xmlChTargetNS = <XMLCh*>schemaGrammar.getTargetNamespace()
 *         cdef char* targetNs = transcode(xmlChTargetNS)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_schemaGrammar != NULL) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arelle_loadSchemaGrammarNull_sch);
      __PYX_ERR(5, 32, __pyx_L1_error)
    }
  }
  #endif

  /* "arelle_cython/arelle_c/ModelDocument.pxi":33
 *         cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>modelXbrl.sax2_parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)
 *         assert schemaGrammar != NULL, "arelle:loadSchemaGrammarNull schema grammar not loaded, null results"
 *         cdef XMLCh* xmlChTargetNS = <XMLCh*>schemaGrammar.getTargetNamespace()             # <<<<<<<<<<<<<<
 *         cdef char* targetNs = transcode(xmlChTargetNS)
 *         cdef unicode pyNs = targetNs
 */
  __pyx_v_xmlChTargetNS = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_schemaGrammar->getTargetNamespace());

  /* "arelle_cython/arelle_c/ModelDocument.pxi":34
 *         assert schemaGrammar != NULL, "arelle:loadSchemaGrammarNull schema grammar not loaded, null results"
 *         cdef XMLCh* xmlChTargetNS = <XMLCh*>schemaGrammar.getTargetNamespace()
 *         cdef char* targetNs = transcode(xmlChTargetNS)             # <<<<<<<<<<<<<<
 *         cdef unicode pyNs = targetNs
 *         assert self.targetNamespace == pyNs, "arelle:loadSchemaNamespaceConflict schema grammar namespace {} discovery namespace {}".format(self.targetNamespace, pyNs)
 */
  __pyx_v_targetNs = xercesc::XMLString::transcode(__pyx_v_xmlChTargetNS);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":35
 *         cdef XMLCh* xmlChTargetNS = <XMLCh*>schemaGrammar.getTargetNamespace()
 *         cdef char* targetNs = transcode(xmlChTargetNS)
 *         cdef unicode pyNs = targetNs             # <<<<<<<<<<<<<<
 *         assert self.targetNamespace == pyNs, "arelle:loadSchemaNamespaceConflict schema grammar namespace {} discovery namespace {}".format(self.targetNamespace, pyNs)
 *         release(&targetNs)
 */
  __pyx_t_1 = __Pyx_PyUnicode_FromString(__pyx_v_targetNs); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pyNs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":36
 *         cdef char* targetNs = transcode(xmlChTargetNS)
 *         cdef unicode pyNs = targetNs
 *         assert self.targetNamespace == pyNs, "arelle:loadSchemaNamespaceConflict schema grammar namespace {} discovery namespace {}".format(self.targetNamespace, pyNs)             # <<<<<<<<<<<<<<
 *         release(&targetNs)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_self->targetNamespace, __pyx_v_pyNs, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(5, 36, __pyx_L1_error)
    if (unlikely(!(__pyx_t_4 != 0))) {
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_arelle_loadSchemaNamespaceConfli, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_5 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_self->targetNamespace, __pyx_v_pyNs};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 36, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_v_self->targetNamespace, __pyx_v_pyNs};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 36, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 36, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_INCREF(__pyx_v_self->targetNamespace);
        __Pyx_GIVEREF(__pyx_v_self->targetNamespace);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_self->targetNamespace);
        __Pyx_INCREF(__pyx_v_pyNs);
        __Pyx_GIVEREF(__pyx_v_pyNs);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_pyNs);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 36, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_Pack(1, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(5, 36, __pyx_L1_error)
    }
  }
  #endif

  /* "arelle_cython/arelle_c/ModelDocument.pxi":37
 *         cdef unicode pyNs = targetNs
 *         assert self.targetNamespace == pyNs, "arelle:loadSchemaNamespaceConflict schema grammar namespace {} discovery namespace {}".format(self.targetNamespace, pyNs)
 *         release(&targetNs)             # <<<<<<<<<<<<<<
 * 
 *         sax2Handler.setModelDocument(NULL) # dereference modelDocument
 */
  xercesc::XMLString::release((&__pyx_v_targetNs));

  /* "arelle_cython/arelle_c/ModelDocument.pxi":39
 *         release(&targetNs)
 * 
 *         sax2Handler.setModelDocument(NULL) # dereference modelDocument             # <<<<<<<<<<<<<<
 * 
 *     def loadXml(self, object pyFileDesc, object schemaLocationsList):
 */
  __pyx_v_sax2Handler->setModelDocument(NULL);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":24
 *         self.isGrammarLoadedIntoModel = False
 * 
 *     def loadSchema(self, object pyFileDesc):             # <<<<<<<<<<<<<<
 *         cdef ModelXbrl modelXbrl = self.modelXbrl
 *         modelXbrl.openSax2Parser()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("arelle.arelle_c.ModelDocument.loadSchema", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_modelXbrl);
  __Pyx_XDECREF(__pyx_v_pyNs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":41
 *         sax2Handler.setModelDocument(NULL) # dereference modelDocument
 * 
 *     def loadXml(self, object pyFileDesc, object schemaLocationsList):             # <<<<<<<<<<<<<<
 *         cdef ModelXbrl modelXbrl = self.modelXbrl
 *         modelXbrl.openSax2Parser()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_5loadXml(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_5loadXml(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pyFileDesc = 0;
  PyObject *__pyx_v_schemaLocationsList = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadXml (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyFileDesc,&__pyx_n_s_schemaLocationsList,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyFileDesc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_schemaLocationsList)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("loadXml", 1, 2, 2, 1); __PYX_ERR(5, 41, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "loadXml") < 0)) __PYX_ERR(5, 41, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_pyFileDesc = values[0];
    __pyx_v_schemaLocationsList = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("loadXml", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 41, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("arelle.arelle_c.ModelDocument.loadXml", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_4loadXml(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self), __pyx_v_pyFileDesc, __pyx_v_schemaLocationsList);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_4loadXml(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, PyObject *__pyx_v_pyFileDesc, PyObject *__pyx_v_schemaLocationsList) {
  struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *__pyx_v_modelXbrl = 0;
  void *__pyx_v_modelDocumentPtr;
  __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler *__pyx_v_sax2Handler;
  xercesc::InputSource *__pyx_v_inpSrc;
  PyObject *__pyx_v_byte_s = NULL;
  char *__pyx_v_c_s;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_xmlChSchemaLocation;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("loadXml", 0);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":42
 * 
 *     def loadXml(self, object pyFileDesc, object schemaLocationsList):
 *         cdef ModelXbrl modelXbrl = self.modelXbrl             # <<<<<<<<<<<<<<
 *         modelXbrl.openSax2Parser()
 *         cdef void* modelDocumentPtr = <void*>self
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->modelXbrl);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_modelXbrl = ((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":43
 *     def loadXml(self, object pyFileDesc, object schemaLocationsList):
 *         cdef ModelXbrl modelXbrl = self.modelXbrl
 *         modelXbrl.openSax2Parser()             # <<<<<<<<<<<<<<
 *         cdef void* modelDocumentPtr = <void*>self
 *         cdef ModelDocumentSAX2Handler* sax2Handler = <ModelDocumentSAX2Handler*>modelXbrl.sax2_parser.getContentHandler()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_modelXbrl), __pyx_n_s_openSax2Parser); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 43, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":44
 *         cdef ModelXbrl modelXbrl = self.modelXbrl
 *         modelXbrl.openSax2Parser()
 *         cdef void* modelDocumentPtr = <void*>self             # <<<<<<<<<<<<<<
 *         cdef ModelDocumentSAX2Handler* sax2Handler = <ModelDocumentSAX2Handler*>modelXbrl.sax2_parser.getContentHandler()
 *         sax2Handler.setModelDocument(modelDocumentPtr)
 */
  __pyx_v_modelDocumentPtr = ((void *)__pyx_v_self);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":45
 *         modelXbrl.openSax2Parser()
 *         cdef void* modelDocumentPtr = <void*>self
 *         cdef ModelDocumentSAX2Handler* sax2Handler = <ModelDocumentSAX2Handler*>modelXbrl.sax2_parser.getContentHandler()             # <<<<<<<<<<<<<<
 *         sax2Handler.setModelDocument(modelDocumentPtr)
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 */
  __pyx_v_sax2Handler = ((__pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler *)__pyx_v_modelXbrl->sax2_parser->getContentHandler());

  /* "arelle_cython/arelle_c/ModelDocument.pxi":46
 *         cdef void* modelDocumentPtr = <void*>self
 *         cdef ModelDocumentSAX2Handler* sax2Handler = <ModelDocumentSAX2Handler*>modelXbrl.sax2_parser.getContentHandler()
 *         sax2Handler.setModelDocument(modelDocumentPtr)             # <<<<<<<<<<<<<<
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *         byte_s = " ".join(schemaLocationsList).encode("utf-8")
 */
  __pyx_v_sax2Handler->setModelDocument(__pyx_v_modelDocumentPtr);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":47
 *         cdef ModelDocumentSAX2Handler* sax2Handler = <ModelDocumentSAX2Handler*>modelXbrl.sax2_parser.getContentHandler()
 *         sax2Handler.setModelDocument(modelDocumentPtr)
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)             # <<<<<<<<<<<<<<
 *         byte_s = " ".join(schemaLocationsList).encode("utf-8")
 *         cdef char* c_s = byte_s
 */
  __pyx_v_inpSrc = __pyx_f_6arelle_8arelle_c_fileDescInputSource(__pyx_v_pyFileDesc);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":48
 *         sax2Handler.setModelDocument(modelDocumentPtr)
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *         byte_s = " ".join(schemaLocationsList).encode("utf-8")             # <<<<<<<<<<<<<<
 *         cdef char* c_s = byte_s
 *         cdef XMLCh* xmlChSchemaLocation = transcode(c_s)
 */
  __pyx_t_1 = __Pyx_PyString_Join(__pyx_kp_s__10, __pyx_v_schemaLocationsList); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_byte_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":49
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *         byte_s = " ".join(schemaLocationsList).encode("utf-8")
 *         cdef char* c_s = byte_s             # <<<<<<<<<<<<<<
 *         cdef XMLCh* xmlChSchemaLocation = transcode(c_s)
 *         modelXbrl.sax2_parser.setProperty(fgXercesSchemaExternalSchemaLocation, xmlChSchemaLocation)
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_byte_s); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(5, 49, __pyx_L1_error)
  __pyx_v_c_s = __pyx_t_4;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":50
 *         byte_s = " ".join(schemaLocationsList).encode("utf-8")
 *         cdef char* c_s = byte_s
 *         cdef XMLCh* xmlChSchemaLocation = transcode(c_s)             # <<<<<<<<<<<<<<
 *         modelXbrl.sax2_parser.setProperty(fgXercesSchemaExternalSchemaLocation, xmlChSchemaLocation)
 *         modelXbrl.sax2_parser.parse(deref(inpSrc))
 */
  __pyx_v_xmlChSchemaLocation = xercesc::XMLString::transcode(__pyx_v_c_s);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":51
 *         cdef char* c_s = byte_s
 *         cdef XMLCh* xmlChSchemaLocation = transcode(c_s)
 *         modelXbrl.sax2_parser.setProperty(fgXercesSchemaExternalSchemaLocation, xmlChSchemaLocation)             # <<<<<<<<<<<<<<
 *         modelXbrl.sax2_parser.parse(deref(inpSrc))
 *         release(&xmlChSchemaLocation)
 */
  __pyx_v_modelXbrl->sax2_parser->setProperty(xercesc::XMLUni::fgXercesSchemaExternalSchemaLocation, __pyx_v_xmlChSchemaLocation);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":52
 *         cdef XMLCh* xmlChSchemaLocation = transcode(c_s)
 *         modelXbrl.sax2_parser.setProperty(fgXercesSchemaExternalSchemaLocation, xmlChSchemaLocation)
 *         modelXbrl.sax2_parser.parse(deref(inpSrc))             # <<<<<<<<<<<<<<
 *         release(&xmlChSchemaLocation)
 * 
 */
  __pyx_v_modelXbrl->sax2_parser->parse((*__pyx_v_inpSrc));

  /* "arelle_cython/arelle_c/ModelDocument.pxi":53
 *         modelXbrl.sax2_parser.setProperty(fgXercesSchemaExternalSchemaLocation, xmlChSchemaLocation)
 *         modelXbrl.sax2_parser.parse(deref(inpSrc))
 *         release(&xmlChSchemaLocation)             # <<<<<<<<<<<<<<
 * 
 *         sax2Handler.setModelDocument(NULL) # dereference modelDocument
 */
  xercesc::XMLString::release((&__pyx_v_xmlChSchemaLocation));

  /* "arelle_cython/arelle_c/ModelDocument.pxi":55
 *         release(&xmlChSchemaLocation)
 * 
 *         sax2Handler.setModelDocument(NULL) # dereference modelDocument             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_sax2Handler->setModelDocument(NULL);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":41
 *         sax2Handler.setModelDocument(NULL) # dereference modelDocument
 * 
 *     def loadXml(self, object pyFileDesc, object schemaLocationsList):             # <<<<<<<<<<<<<<
 *         cdef ModelXbrl modelXbrl = self.modelXbrl
 *         modelXbrl.openSax2Parser()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("arelle.arelle_c.ModelDocument.loadXml", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_modelXbrl);
  __Pyx_XDECREF(__pyx_v_byte_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":5
 * 
 * cdef class ModelDocument:
 *     cdef readonly ModelXbrl modelXbrl             # <<<<<<<<<<<<<<
 *     cdef readonly int type
 *     cdef readonly unicode url
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_9modelXbrl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_9modelXbrl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_9modelXbrl___get__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_9modelXbrl___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->modelXbrl));
  __pyx_r = ((PyObject *)__pyx_v_self->modelXbrl);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":6
 * cdef class ModelDocument:
 *     cdef readonly ModelXbrl modelXbrl
 *     cdef readonly int type             # <<<<<<<<<<<<<<
 *     cdef readonly unicode url
 *     cdef readonly unicode filepath
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_4type___get__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_4type___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->type); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c.ModelDocument.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":7
 *     cdef readonly ModelXbrl modelXbrl
 *     cdef readonly int type
 *     cdef readonly unicode url             # <<<<<<<<<<<<<<
 *     cdef readonly unicode filepath
 *     cdef public bool isGrammarLoadedIntoModel
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_3url_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_3url_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_3url___get__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_3url___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->url);
  __pyx_r = __pyx_v_self->url;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":8
 *     cdef readonly int type
 *     cdef readonly unicode url
 *     cdef readonly unicode filepath             # <<<<<<<<<<<<<<
 *     cdef public bool isGrammarLoadedIntoModel
 *     cdef public unicode targetNamespace
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_8filepath_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_8filepath_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_8filepath___get__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_8filepath___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->filepath);
  __pyx_r = __pyx_v_self->filepath;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":9
 *     cdef readonly unicode url
 *     cdef readonly unicode filepath
 *     cdef public bool isGrammarLoadedIntoModel             # <<<<<<<<<<<<<<
 *     cdef public unicode targetNamespace
 *     cdef public unicode targetNamespacePrefix
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_24isGrammarLoadedIntoModel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_24isGrammarLoadedIntoModel_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_24isGrammarLoadedIntoModel___get__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_24isGrammarLoadedIntoModel___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->isGrammarLoadedIntoModel); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c.ModelDocument.isGrammarLoadedIntoModel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_24isGrammarLoadedIntoModel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_24isGrammarLoadedIntoModel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_24isGrammarLoadedIntoModel_2__set__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_24isGrammarLoadedIntoModel_2__set__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(5, 9, __pyx_L1_error)
  __pyx_v_self->isGrammarLoadedIntoModel = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("arelle.arelle_c.ModelDocument.isGrammarLoadedIntoModel.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":10
 *     cdef readonly unicode filepath
 *     cdef public bool isGrammarLoadedIntoModel
 *     cdef public unicode targetNamespace             # <<<<<<<<<<<<<<
 *     cdef public unicode targetNamespacePrefix
 *     cdef public object xmlRootElement
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_15targetNamespace_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_15targetNamespace_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_15targetNamespace___get__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_15targetNamespace___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->targetNamespace);
  __pyx_r = __pyx_v_self->targetNamespace;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_15targetNamespace_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_15targetNamespace_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_15targetNamespace_2__set__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_15targetNamespace_2__set__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(5, 10, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->targetNamespace);
  __Pyx_DECREF(__pyx_v_self->targetNamespace);
  __pyx_v_self->targetNamespace = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c.ModelDocument.targetNamespace.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_15targetNamespace_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_15targetNamespace_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_15targetNamespace_4__del__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_15targetNamespace_4__del__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->targetNamespace);
  __Pyx_DECREF(__pyx_v_self->targetNamespace);
  __pyx_v_self->targetNamespace = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":11
 *     cdef public bool isGrammarLoadedIntoModel
 *     cdef public unicode targetNamespace
 *     cdef public unicode targetNamespacePrefix             # <<<<<<<<<<<<<<
 *     cdef public object xmlRootElement
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix___get__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->targetNamespacePrefix);
  __pyx_r = __pyx_v_self->targetNamespacePrefix;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_2__set__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_2__set__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyUnicode_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(5, 11, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->targetNamespacePrefix);
  __Pyx_DECREF(__pyx_v_self->targetNamespacePrefix);
  __pyx_v_self->targetNamespacePrefix = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c.ModelDocument.targetNamespacePrefix.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_4__del__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_4__del__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->targetNamespacePrefix);
  __Pyx_DECREF(__pyx_v_self->targetNamespacePrefix);
  __pyx_v_self->targetNamespacePrefix = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":12
 *     cdef public unicode targetNamespace
 *     cdef public unicode targetNamespacePrefix
 *     cdef public object xmlRootElement             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, ModelXbrl modelXbrl, int type, unicode url, unicode filepath):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_14xmlRootElement___get__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_13ModelDocument_14xmlRootElement___get__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->xmlRootElement);
  __pyx_r = __pyx_v_self->xmlRootElement;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_2__set__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_2__set__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->xmlRootElement);
  __Pyx_DECREF(__pyx_v_self->xmlRootElement);
  __pyx_v_self->xmlRootElement = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_4__del__(((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_4__del__(struct __pyx_obj_6arelle_8arelle_c_ModelDocument *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->xmlRootElement);
  __Pyx_DECREF(__pyx_v_self->xmlRootElement);
  __pyx_v_self->xmlRootElement = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":63
 *     Locator* saxLocator
 * 
 *     ModelDocumentSAX2Handler(void* modelXbrlPtr) except +:             # <<<<<<<<<<<<<<
 *         this.modelXbrlPtr = modelXbrlPtr
 * 
 */

 __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler::__pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler(void *__pyx_v_modelXbrlPtr) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":64
 * 
 *     ModelDocumentSAX2Handler(void* modelXbrlPtr) except +:
 *         this.modelXbrlPtr = modelXbrlPtr             # <<<<<<<<<<<<<<
 * 
 *     void setModelDocument(void* modelDocumentPtr):
 */
  this->modelXbrlPtr = __pyx_v_modelXbrlPtr;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":63
 *     Locator* saxLocator
 * 
 *     ModelDocumentSAX2Handler(void* modelXbrlPtr) except +:             # <<<<<<<<<<<<<<
 *         this.modelXbrlPtr = modelXbrlPtr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":66
 *         this.modelXbrlPtr = modelXbrlPtr
 * 
 *     void setModelDocument(void* modelDocumentPtr):             # <<<<<<<<<<<<<<
 *         this.modelDocumentPtr = modelDocumentPtr
 * 
 */

void __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler::setModelDocument(void *__pyx_v_modelDocumentPtr) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setModelDocument", 0);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":67
 * 
 *     void setModelDocument(void* modelDocumentPtr):
 *         this.modelDocumentPtr = modelDocumentPtr             # <<<<<<<<<<<<<<
 * 
 *     void close():
 */
  this->modelDocumentPtr = __pyx_v_modelDocumentPtr;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":66
 *         this.modelXbrlPtr = modelXbrlPtr
 * 
 *     void setModelDocument(void* modelDocumentPtr):             # <<<<<<<<<<<<<<
 *         this.modelDocumentPtr = modelDocumentPtr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":69
 *         this.modelDocumentPtr = modelDocumentPtr
 * 
 *     void close():             # <<<<<<<<<<<<<<
 *         this._modelXbrl = NULL # dereference
 * 
 */

void __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler::close(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close", 0);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":70
 * 
 *     void close():
 *         this._modelXbrl = NULL # dereference             # <<<<<<<<<<<<<<
 * 
 *     void setDocumentLocator(const Locator* const locator):
 */
  this->_modelXbrl = NULL;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":69
 *         this.modelDocumentPtr = modelDocumentPtr
 * 
 *     void close():             # <<<<<<<<<<<<<<
 *         this._modelXbrl = NULL # dereference
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":72
 *         this._modelXbrl = NULL # dereference
 * 
 *     void setDocumentLocator(const Locator* const locator):             # <<<<<<<<<<<<<<
 *         this.saxLocator = <Locator*>locator
 * 
 */

void __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler::setDocumentLocator(xercesc::Locator const *const __pyx_v_locator) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDocumentLocator", 0);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":73
 * 
 *     void setDocumentLocator(const Locator* const locator):
 *         this.saxLocator = <Locator*>locator             # <<<<<<<<<<<<<<
 * 
 *     void handlePyError(object pyError):
 */
  this->saxLocator = ((xercesc::Locator *)__pyx_v_locator);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":72
 *         this._modelXbrl = NULL # dereference
 * 
 *     void setDocumentLocator(const Locator* const locator):             # <<<<<<<<<<<<<<
 *         this.saxLocator = <Locator*>locator
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/ModelDocument.pxi":75
 *         this.saxLocator = <Locator*>locator
 * 
 *     void handlePyError(object pyError):             # <<<<<<<<<<<<<<
 *         cdef object modelXbrl = <object>this.modelXbrlPtr
 *         modelXbrl.log(pyError.level, "arelle:xerces",
 */

void __pyx_t_6arelle_8arelle_c_ModelDocumentSAX2Handler::handlePyError(PyObject *__pyx_v_pyError) {
  PyObject *__pyx_v_modelXbrl = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("handlePyError", 0);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":76
 * 
 *     void handlePyError(object pyError):
 *         cdef object modelXbrl = <object>this.modelXbrlPtr             # <<<<<<<<<<<<<<
 *         modelXbrl.log(pyError.level, "arelle:xerces",
 *                       pyError.message,
 */
  __pyx_t_1 = ((PyObject *)this->modelXbrlPtr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_modelXbrl = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":77
 *     void handlePyError(object pyError):
 *         cdef object modelXbrl = <object>this.modelXbrlPtr
 *         modelXbrl.log(pyError.level, "arelle:xerces",             # <<<<<<<<<<<<<<
 *                       pyError.message,
 *                       line=pyError.line,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_modelXbrl, __pyx_n_s_log); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyError, __pyx_n_s_level); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":78
 *         cdef object modelXbrl = <object>this.modelXbrlPtr
 *         modelXbrl.log(pyError.level, "arelle:xerces",
 *                       pyError.message,             # <<<<<<<<<<<<<<
 *                       line=pyError.line,
 *                       column=pyError.column,
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyError, __pyx_n_s_message); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":77
 *     void handlePyError(object pyError):
 *         cdef object modelXbrl = <object>this.modelXbrlPtr
 *         modelXbrl.log(pyError.level, "arelle:xerces",             # <<<<<<<<<<<<<<
 *                       pyError.message,
 *                       line=pyError.line,
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_arelle_xerces);
  __Pyx_GIVEREF(__pyx_kp_s_arelle_xerces);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_kp_s_arelle_xerces);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":79
 *         modelXbrl.log(pyError.level, "arelle:xerces",
 *                       pyError.message,
 *                       line=pyError.line,             # <<<<<<<<<<<<<<
 *                       column=pyError.column,
 *                       file=pyError.file, # url if public ID available?
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyError, __pyx_n_s_line); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_line, __pyx_t_2) < 0) __PYX_ERR(5, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":80
 *                       pyError.message,
 *                       line=pyError.line,
 *                       column=pyError.column,             # <<<<<<<<<<<<<<
 *                       file=pyError.file, # url if public ID available?
 *                       element=pyError.element)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyError, __pyx_n_s_column); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_column, __pyx_t_2) < 0) __PYX_ERR(5, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":81
 *                       line=pyError.line,
 *                       column=pyError.column,
 *                       file=pyError.file, # url if public ID available?             # <<<<<<<<<<<<<<
 *                       element=pyError.element)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyError, __pyx_n_s_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_file, __pyx_t_2) < 0) __PYX_ERR(5, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":82
 *                       column=pyError.column,
 *                       file=pyError.file, # url if public ID available?
 *                       element=pyError.element)             # <<<<<<<<<<<<<<
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pyError, __pyx_n_s_element); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_element, __pyx_t_2) < 0) __PYX_ERR(5, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":77
 *     void handlePyError(object pyError):
 *         cdef object modelXbrl = <object>this.modelXbrlPtr
 *         modelXbrl.log(pyError.level, "arelle:xerces",             # <<<<<<<<<<<<<<
 *                       pyError.message,
 *                       line=pyError.line,
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/ModelDocument.pxi":75
 *         this.saxLocator = <Locator*>locator
 * 
 *     void handlePyError(object pyError):             # <<<<<<<<<<<<<<
 *         cdef object modelXbrl = <object>this.modelXbrlPtr
 *         modelXbrl.log(pyError.level, "arelle:xerces",
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("ModelDocumentSAX2Handler.handlePyError", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_modelXbrl);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":32
 * cdef bool _initialized = False, _terminated = False
 * 
 * def initialize():             # <<<<<<<<<<<<<<
 *     global _initialized
 *     assert not _initialized, "xerces already initialized"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_1initialize(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6arelle_8arelle_c_1initialize = {"initialize", (PyCFunction)__pyx_pw_6arelle_8arelle_c_1initialize, METH_NOARGS, 0};
static PyObject *__pyx_pw_6arelle_8arelle_c_1initialize(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_initialize(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_initialize(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":34
 * def initialize():
 *     global _initialized
 *     assert not _initialized, "xerces already initialized"             # <<<<<<<<<<<<<<
 *     if not _initialized:
 *         Initialize()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((!(__pyx_v_6arelle_8arelle_c__initialized != 0)) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_xerces_already_initialized);
      __PYX_ERR(6, 34, __pyx_L1_error)
    }
  }
  #endif

  /* "arelle_cython/arelle_c/xerces.pxi":35
 *     global _initialized
 *     assert not _initialized, "xerces already initialized"
 *     if not _initialized:             # <<<<<<<<<<<<<<
 *         Initialize()
 *         _initialized = True
 */
  __pyx_t_1 = ((!(__pyx_v_6arelle_8arelle_c__initialized != 0)) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":36
 *     assert not _initialized, "xerces already initialized"
 *     if not _initialized:
 *         Initialize()             # <<<<<<<<<<<<<<
 *         _initialized = True
 * 
 */
    xercesc::XMLPlatformUtils::Initialize();

    /* "arelle_cython/arelle_c/xerces.pxi":37
 *     if not _initialized:
 *         Initialize()
 *         _initialized = True             # <<<<<<<<<<<<<<
 * 
 * def terminate():
 */
    __pyx_v_6arelle_8arelle_c__initialized = 1;

    /* "arelle_cython/arelle_c/xerces.pxi":35
 *     global _initialized
 *     assert not _initialized, "xerces already initialized"
 *     if not _initialized:             # <<<<<<<<<<<<<<
 *         Initialize()
 *         _initialized = True
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":32
 * cdef bool _initialized = False, _terminated = False
 * 
 * def initialize():             # <<<<<<<<<<<<<<
 *     global _initialized
 *     assert not _initialized, "xerces already initialized"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("arelle.arelle_c.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":39
 *         _initialized = True
 * 
 * def terminate():             # <<<<<<<<<<<<<<
 *     global _initialized, _terminated
 *     assert not _initialized, "xerces termination but not initialized"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_3terminate(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6arelle_8arelle_c_3terminate = {"terminate", (PyCFunction)__pyx_pw_6arelle_8arelle_c_3terminate, METH_NOARGS, 0};
static PyObject *__pyx_pw_6arelle_8arelle_c_3terminate(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("terminate (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_2terminate(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_2terminate(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("terminate", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":41
 * def terminate():
 *     global _initialized, _terminated
 *     assert not _initialized, "xerces termination but not initialized"             # <<<<<<<<<<<<<<
 *     assert not _terminated, "xerces terminated or not started"
 *     if _initialized and not _terminated:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((!(__pyx_v_6arelle_8arelle_c__initialized != 0)) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_xerces_termination_but_not_initi);
      __PYX_ERR(6, 41, __pyx_L1_error)
    }
  }
  #endif

  /* "arelle_cython/arelle_c/xerces.pxi":42
 *     global _initialized, _terminated
 *     assert not _initialized, "xerces termination but not initialized"
 *     assert not _terminated, "xerces terminated or not started"             # <<<<<<<<<<<<<<
 *     if _initialized and not _terminated:
 *         Terminate()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((!(__pyx_v_6arelle_8arelle_c__terminated != 0)) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_xerces_terminated_or_not_started);
      __PYX_ERR(6, 42, __pyx_L1_error)
    }
  }
  #endif

  /* "arelle_cython/arelle_c/xerces.pxi":43
 *     assert not _initialized, "xerces termination but not initialized"
 *     assert not _terminated, "xerces terminated or not started"
 *     if _initialized and not _terminated:             # <<<<<<<<<<<<<<
 *         Terminate()
 *         _terminated = True
 */
  __pyx_t_2 = (__pyx_v_6arelle_8arelle_c__initialized != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_6arelle_8arelle_c__terminated != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":44
 *     assert not _terminated, "xerces terminated or not started"
 *     if _initialized and not _terminated:
 *         Terminate()             # <<<<<<<<<<<<<<
 *         _terminated = True
 *         _initialized = False
 */
    xercesc::XMLPlatformUtils::Terminate();

    /* "arelle_cython/arelle_c/xerces.pxi":45
 *     if _initialized and not _terminated:
 *         Terminate()
 *         _terminated = True             # <<<<<<<<<<<<<<
 *         _initialized = False
 * 
 */
    __pyx_v_6arelle_8arelle_c__terminated = 1;

    /* "arelle_cython/arelle_c/xerces.pxi":46
 *         Terminate()
 *         _terminated = True
 *         _initialized = False             # <<<<<<<<<<<<<<
 * 
 * cdef void* pyListTestPtr
 */
    __pyx_v_6arelle_8arelle_c__initialized = 0;

    /* "arelle_cython/arelle_c/xerces.pxi":43
 *     assert not _initialized, "xerces termination but not initialized"
 *     assert not _terminated, "xerces terminated or not started"
 *     if _initialized and not _terminated:             # <<<<<<<<<<<<<<
 *         Terminate()
 *         _terminated = True
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":39
 *         _initialized = True
 * 
 * def terminate():             # <<<<<<<<<<<<<<
 *     global _initialized, _terminated
 *     assert not _initialized, "xerces termination but not initialized"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("arelle.arelle_c.terminate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":52
 * pyListTestPtr = <void*>_list
 * 
 * def test():             # <<<<<<<<<<<<<<
 *     cdef object pyListTest
 *     global pyListTestPtr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_5test(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6arelle_8arelle_c_5test = {"test", (PyCFunction)__pyx_pw_6arelle_8arelle_c_5test, METH_NOARGS, 0};
static PyObject *__pyx_pw_6arelle_8arelle_c_5test(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("test (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_4test(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_4test(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_v_pyListTest = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("test", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":55
 *     cdef object pyListTest
 *     global pyListTestPtr
 *     pyListTest = <object>pyListTestPtr             # <<<<<<<<<<<<<<
 *     print("size {} {}".format(sizeof(pyListTest), pyListTest))
 *     pyListTest.append("abcdefghi")
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_6arelle_8arelle_c_pyListTestPtr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_pyListTest = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":56
 *     global pyListTestPtr
 *     pyListTest = <object>pyListTestPtr
 *     print("size {} {}".format(sizeof(pyListTest), pyListTest))             # <<<<<<<<<<<<<<
 *     pyListTest.append("abcdefghi")
 *     print("size {} {}".format(sizeof(pyListTest), pyListTest))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_size, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_v_pyListTest))); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_pyListTest};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 56, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_3, __pyx_v_pyListTest};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 56, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_pyListTest);
    __Pyx_GIVEREF(__pyx_v_pyListTest);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_pyListTest);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":57
 *     pyListTest = <object>pyListTestPtr
 *     print("size {} {}".format(sizeof(pyListTest), pyListTest))
 *     pyListTest.append("abcdefghi")             # <<<<<<<<<<<<<<
 *     print("size {} {}".format(sizeof(pyListTest), pyListTest))
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Append(__pyx_v_pyListTest, __pyx_n_s_abcdefghi); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(6, 57, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":58
 *     print("size {} {}".format(sizeof(pyListTest), pyListTest))
 *     pyListTest.append("abcdefghi")
 *     print("size {} {}".format(sizeof(pyListTest), pyListTest))             # <<<<<<<<<<<<<<
 * 
 * cdef class _Element:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_size, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_v_pyListTest))); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_v_pyListTest};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 58, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_6, __pyx_v_pyListTest};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 58, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_t_6);
    __Pyx_INCREF(__pyx_v_pyListTest);
    __Pyx_GIVEREF(__pyx_v_pyListTest);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_v_pyListTest);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":52
 * pyListTestPtr = <void*>_list
 * 
 * def test():             # <<<<<<<<<<<<<<
 *     cdef object pyListTest
 *     global pyListTestPtr
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("arelle.arelle_c.test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyListTest);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":63
 *     cdef DOMNode* _c_node
 *     property tag:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             return transcode( self._c_node.getNodeName())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_3tag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_3tag_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8_Element_3tag___get__(((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_3tag___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":64
 *     property tag:
 *         def __get__( self ):
 *             return transcode( self._c_node.getNodeName())             # <<<<<<<<<<<<<<
 * 
 *     property foo:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_self->_c_node->getNodeName())); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":63
 *     cdef DOMNode* _c_node
 *     property tag:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             return transcode( self._c_node.getNodeName())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c._Element.tag.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":67
 * 
 *     property foo:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             print ("hello from Cython");
 *             print ("tag {}".format(transcode(self._c_node.getNodeName())));
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_3foo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_3foo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8_Element_3foo___get__(((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_3foo___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self) {
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_locName;
  char *__pyx_v__locName;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_nsURI;
  char *__pyx_v__nsURI;
  xercesc::DOMNode *__pyx_v_text_node;
  char *__pyx_v_s;
  char *__pyx_v_pyS;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":68
 *     property foo:
 *         def __get__( self ):
 *             print ("hello from Cython");             # <<<<<<<<<<<<<<
 *             print ("tag {}".format(transcode(self._c_node.getNodeName())));
 *             cdef XMLCh* locName
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_hello_from_Cython) < 0) __PYX_ERR(6, 68, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":69
 *         def __get__( self ):
 *             print ("hello from Cython");
 *             print ("tag {}".format(transcode(self._c_node.getNodeName())));             # <<<<<<<<<<<<<<
 *             cdef XMLCh* locName
 *             locName = <XMLCh*>self._c_node.getLocalName()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_tag, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_self->_c_node->getNodeName())); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 69, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 69, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 69, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":71
 *             print ("tag {}".format(transcode(self._c_node.getNodeName())));
 *             cdef XMLCh* locName
 *             locName = <XMLCh*>self._c_node.getLocalName()             # <<<<<<<<<<<<<<
 *             cdef char* _locName
 *             _locName = transcode(locName)
 */
  __pyx_v_locName = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_self->_c_node->getLocalName());

  /* "arelle_cython/arelle_c/xerces.pxi":73
 *             locName = <XMLCh*>self._c_node.getLocalName()
 *             cdef char* _locName
 *             _locName = transcode(locName)             # <<<<<<<<<<<<<<
 *             print ("loc name {}".format(_locName))
 *             release(&_locName)
 */
  __pyx_v__locName = xercesc::XMLString::transcode(__pyx_v_locName);

  /* "arelle_cython/arelle_c/xerces.pxi":74
 *             cdef char* _locName
 *             _locName = transcode(locName)
 *             print ("loc name {}".format(_locName))             # <<<<<<<<<<<<<<
 *             release(&_locName)
 *             cdef XMLCh* nsURI
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_loc_name, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyUnicode_FromString(__pyx_v__locName); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 74, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 74, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 74, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":75
 *             _locName = transcode(locName)
 *             print ("loc name {}".format(_locName))
 *             release(&_locName)             # <<<<<<<<<<<<<<
 *             cdef XMLCh* nsURI
 *             cdef char* _nsURI
 */
  xercesc::XMLString::release((&__pyx_v__locName));

  /* "arelle_cython/arelle_c/xerces.pxi":78
 *             cdef XMLCh* nsURI
 *             cdef char* _nsURI
 *             nsURI = <XMLCh*>self._c_node.getNamespaceURI()             # <<<<<<<<<<<<<<
 *             if nsURI != NULL:
 *                 _nsURI = transcode(nsURI)
 */
  __pyx_v_nsURI = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_self->_c_node->getNamespaceURI());

  /* "arelle_cython/arelle_c/xerces.pxi":79
 *             cdef char* _nsURI
 *             nsURI = <XMLCh*>self._c_node.getNamespaceURI()
 *             if nsURI != NULL:             # <<<<<<<<<<<<<<
 *                 _nsURI = transcode(nsURI)
 *                 print ("ns URI {}".format(_nsURI));
 */
  __pyx_t_6 = ((__pyx_v_nsURI != NULL) != 0);
  if (__pyx_t_6) {

    /* "arelle_cython/arelle_c/xerces.pxi":80
 *             nsURI = <XMLCh*>self._c_node.getNamespaceURI()
 *             if nsURI != NULL:
 *                 _nsURI = transcode(nsURI)             # <<<<<<<<<<<<<<
 *                 print ("ns URI {}".format(_nsURI));
 *                 release(&_nsURI)
 */
    __pyx_v__nsURI = xercesc::XMLString::transcode(__pyx_v_nsURI);

    /* "arelle_cython/arelle_c/xerces.pxi":81
 *             if nsURI != NULL:
 *                 _nsURI = transcode(nsURI)
 *                 print ("ns URI {}".format(_nsURI));             # <<<<<<<<<<<<<<
 *                 release(&_nsURI)
 *             cdef DOMNode* text_node
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_ns_URI, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyUnicode_FromString(__pyx_v__nsURI); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 81, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 81, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 81, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 81, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 81, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 81, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "arelle_cython/arelle_c/xerces.pxi":82
 *                 _nsURI = transcode(nsURI)
 *                 print ("ns URI {}".format(_nsURI));
 *                 release(&_nsURI)             # <<<<<<<<<<<<<<
 *             cdef DOMNode* text_node
 *             text_node = self._c_node.getFirstChild()
 */
    xercesc::XMLString::release((&__pyx_v__nsURI));

    /* "arelle_cython/arelle_c/xerces.pxi":79
 *             cdef char* _nsURI
 *             nsURI = <XMLCh*>self._c_node.getNamespaceURI()
 *             if nsURI != NULL:             # <<<<<<<<<<<<<<
 *                 _nsURI = transcode(nsURI)
 *                 print ("ns URI {}".format(_nsURI));
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":84
 *                 release(&_nsURI)
 *             cdef DOMNode* text_node
 *             text_node = self._c_node.getFirstChild()             # <<<<<<<<<<<<<<
 *             cdef char* s = transcode( text_node.getNodeValue() )
 *             pyS = s
 */
  __pyx_v_text_node = __pyx_v_self->_c_node->getFirstChild();

  /* "arelle_cython/arelle_c/xerces.pxi":85
 *             cdef DOMNode* text_node
 *             text_node = self._c_node.getFirstChild()
 *             cdef char* s = transcode( text_node.getNodeValue() )             # <<<<<<<<<<<<<<
 *             pyS = s
 *             print ( "transcoded value {}".format( pyS.decode("utf-8") ) );
 */
  __pyx_v_s = xercesc::XMLString::transcode(__pyx_v_text_node->getNodeValue());

  /* "arelle_cython/arelle_c/xerces.pxi":86
 *             text_node = self._c_node.getFirstChild()
 *             cdef char* s = transcode( text_node.getNodeValue() )
 *             pyS = s             # <<<<<<<<<<<<<<
 *             print ( "transcoded value {}".format( pyS.decode("utf-8") ) );
 *             release(&s)
 */
  __pyx_v_pyS = __pyx_v_s;

  /* "arelle_cython/arelle_c/xerces.pxi":87
 *             cdef char* s = transcode( text_node.getNodeValue() )
 *             pyS = s
 *             print ( "transcoded value {}".format( pyS.decode("utf-8") ) );             # <<<<<<<<<<<<<<
 *             release(&s)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_transcoded_value, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FromString(__pyx_v_pyS); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_decode); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 87, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 87, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 87, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":88
 *             pyS = s
 *             print ( "transcoded value {}".format( pyS.decode("utf-8") ) );
 *             release(&s)             # <<<<<<<<<<<<<<
 * 
 *     property localName:
 */
  xercesc::XMLString::release((&__pyx_v_s));

  /* "arelle_cython/arelle_c/xerces.pxi":67
 * 
 *     property foo:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             print ("hello from Cython");
 *             print ("tag {}".format(transcode(self._c_node.getNodeName())));
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("arelle.arelle_c._Element.foo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":91
 * 
 *     property localName:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             return transcode( self._c_node.getLocalName() ).decode("utf-8")
 *     property namespaceURI:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_9localName_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_9localName_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8_Element_9localName___get__(((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_9localName___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":92
 *     property localName:
 *         def __get__( self ):
 *             return transcode( self._c_node.getLocalName() ).decode("utf-8")             # <<<<<<<<<<<<<<
 *     property namespaceURI:
 *         def __get__( self ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_self->_c_node->getLocalName())); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":91
 * 
 *     property localName:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             return transcode( self._c_node.getLocalName() ).decode("utf-8")
 *     property namespaceURI:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("arelle.arelle_c._Element.localName.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":94
 *             return transcode( self._c_node.getLocalName() ).decode("utf-8")
 *     property namespaceURI:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             return transcode( self._c_node.getNamespaceURI() ).decode("utf-8")
 *     property clarkName:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_12namespaceURI_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_12namespaceURI_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8_Element_12namespaceURI___get__(((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_12namespaceURI___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":95
 *     property namespaceURI:
 *         def __get__( self ):
 *             return transcode( self._c_node.getNamespaceURI() ).decode("utf-8")             # <<<<<<<<<<<<<<
 *     property clarkName:
 *         def __get__( self ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_self->_c_node->getNamespaceURI())); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":94
 *             return transcode( self._c_node.getLocalName() ).decode("utf-8")
 *     property namespaceURI:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             return transcode( self._c_node.getNamespaceURI() ).decode("utf-8")
 *     property clarkName:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("arelle.arelle_c._Element.namespaceURI.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":97
 *             return transcode( self._c_node.getNamespaceURI() ).decode("utf-8")
 *     property clarkName:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             return b"{" + transcode( self._c_node.getNamespaceURI()) + b"}" + transcode( self._c_node.getLocalName())
 *     property text:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_9clarkName_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_9clarkName_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8_Element_9clarkName___get__(((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_9clarkName___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":98
 *     property clarkName:
 *         def __get__( self ):
 *             return b"{" + transcode( self._c_node.getNamespaceURI()) + b"}" + transcode( self._c_node.getLocalName())             # <<<<<<<<<<<<<<
 *     property text:
 *         def __get__( self ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_self->_c_node->getNamespaceURI())); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_b__15, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_t_2, __pyx_kp_b__16); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_self->_c_node->getLocalName())); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":97
 *             return transcode( self._c_node.getNamespaceURI() ).decode("utf-8")
 *     property clarkName:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             return b"{" + transcode( self._c_node.getNamespaceURI()) + b"}" + transcode( self._c_node.getLocalName())
 *     property text:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("arelle.arelle_c._Element.clarkName.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":100
 *             return b"{" + transcode( self._c_node.getNamespaceURI()) + b"}" + transcode( self._c_node.getLocalName())
 *     property text:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             cdef DOMText* text_node = <DOMText*>self._c_node.getFirstChild()
 *             if text_node == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_4text_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_4text_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8_Element_4text___get__(((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_4text___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self) {
  xercesc::DOMText *__pyx_v_text_node;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_xmlStr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":101
 *     property text:
 *         def __get__( self ):
 *             cdef DOMText* text_node = <DOMText*>self._c_node.getFirstChild()             # <<<<<<<<<<<<<<
 *             if text_node == NULL:
 *                 return None
 */
  __pyx_v_text_node = ((xercesc::DOMText *)__pyx_v_self->_c_node->getFirstChild());

  /* "arelle_cython/arelle_c/xerces.pxi":102
 *         def __get__( self ):
 *             cdef DOMText* text_node = <DOMText*>self._c_node.getFirstChild()
 *             if text_node == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             #return transcode( text_node.getNodeValue()).decode("utf-8")
 */
  __pyx_t_1 = ((__pyx_v_text_node == NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":103
 *             cdef DOMText* text_node = <DOMText*>self._c_node.getFirstChild()
 *             if text_node == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             #return transcode( text_node.getNodeValue()).decode("utf-8")
 *             cdef const XMLCh* xmlStr = text_node.getWholeText()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/xerces.pxi":102
 *         def __get__( self ):
 *             cdef DOMText* text_node = <DOMText*>self._c_node.getFirstChild()
 *             if text_node == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             #return transcode( text_node.getNodeValue()).decode("utf-8")
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":105
 *                 return None
 *             #return transcode( text_node.getNodeValue()).decode("utf-8")
 *             cdef const XMLCh* xmlStr = text_node.getWholeText()             # <<<<<<<<<<<<<<
 *             if xmlStr == NULL:
 *                 return None
 */
  __pyx_v_xmlStr = __pyx_v_text_node->getWholeText();

  /* "arelle_cython/arelle_c/xerces.pxi":106
 *             #return transcode( text_node.getNodeValue()).decode("utf-8")
 *             cdef const XMLCh* xmlStr = text_node.getWholeText()
 *             if xmlStr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             return transcode( xmlStr ).decode("utf-8")
 */
  __pyx_t_1 = ((__pyx_v_xmlStr == NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":107
 *             cdef const XMLCh* xmlStr = text_node.getWholeText()
 *             if xmlStr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             return transcode( xmlStr ).decode("utf-8")
 *     property rawtext:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/xerces.pxi":106
 *             #return transcode( text_node.getNodeValue()).decode("utf-8")
 *             cdef const XMLCh* xmlStr = text_node.getWholeText()
 *             if xmlStr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             return transcode( xmlStr ).decode("utf-8")
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":108
 *             if xmlStr == NULL:
 *                 return None
 *             return transcode( xmlStr ).decode("utf-8")             # <<<<<<<<<<<<<<
 *     property rawtext:
 *         def __get__( self ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_xmlStr)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decode); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":100
 *             return b"{" + transcode( self._c_node.getNamespaceURI()) + b"}" + transcode( self._c_node.getLocalName())
 *     property text:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             cdef DOMText* text_node = <DOMText*>self._c_node.getFirstChild()
 *             if text_node == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("arelle.arelle_c._Element.text.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":110
 *             return transcode( xmlStr ).decode("utf-8")
 *     property rawtext:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             cdef DOMNode* text_node = self._c_node.getFirstChild()
 *             if text_node == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_7rawtext_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_7rawtext_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8_Element_7rawtext___get__(((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_7rawtext___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self) {
  xercesc::DOMNode *__pyx_v_text_node;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_xmlStr;
  char *__pyx_v_xmlStrBytes;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_strLen;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":111
 *     property rawtext:
 *         def __get__( self ):
 *             cdef DOMNode* text_node = self._c_node.getFirstChild()             # <<<<<<<<<<<<<<
 *             if text_node == NULL:
 *                 return None
 */
  __pyx_v_text_node = __pyx_v_self->_c_node->getFirstChild();

  /* "arelle_cython/arelle_c/xerces.pxi":112
 *         def __get__( self ):
 *             cdef DOMNode* text_node = self._c_node.getFirstChild()
 *             if text_node == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             cdef const XMLCh* xmlStr = text_node.getNodeValue()
 */
  __pyx_t_1 = ((__pyx_v_text_node == NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":113
 *             cdef DOMNode* text_node = self._c_node.getFirstChild()
 *             if text_node == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             cdef const XMLCh* xmlStr = text_node.getNodeValue()
 *             if xmlStr == NULL:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/xerces.pxi":112
 *         def __get__( self ):
 *             cdef DOMNode* text_node = self._c_node.getFirstChild()
 *             if text_node == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             cdef const XMLCh* xmlStr = text_node.getNodeValue()
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":114
 *             if text_node == NULL:
 *                 return None
 *             cdef const XMLCh* xmlStr = text_node.getNodeValue()             # <<<<<<<<<<<<<<
 *             if xmlStr == NULL:
 *                 return None
 */
  __pyx_v_xmlStr = __pyx_v_text_node->getNodeValue();

  /* "arelle_cython/arelle_c/xerces.pxi":115
 *                 return None
 *             cdef const XMLCh* xmlStr = text_node.getNodeValue()
 *             if xmlStr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             cdef char* xmlStrBytes = <char*>xmlStr
 */
  __pyx_t_1 = ((__pyx_v_xmlStr == NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":116
 *             cdef const XMLCh* xmlStr = text_node.getNodeValue()
 *             if xmlStr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             cdef char* xmlStrBytes = <char*>xmlStr
 *             cdef XMLSize_t strLen = stringLen(xmlStr)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/xerces.pxi":115
 *                 return None
 *             cdef const XMLCh* xmlStr = text_node.getNodeValue()
 *             if xmlStr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             cdef char* xmlStrBytes = <char*>xmlStr
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":117
 *             if xmlStr == NULL:
 *                 return None
 *             cdef char* xmlStrBytes = <char*>xmlStr             # <<<<<<<<<<<<<<
 *             cdef XMLSize_t strLen = stringLen(xmlStr)
 *             return xmlStrBytes[:strLen*2].decode("UTF_16LE")
 */
  __pyx_v_xmlStrBytes = ((char *)__pyx_v_xmlStr);

  /* "arelle_cython/arelle_c/xerces.pxi":118
 *                 return None
 *             cdef char* xmlStrBytes = <char*>xmlStr
 *             cdef XMLSize_t strLen = stringLen(xmlStr)             # <<<<<<<<<<<<<<
 *             return xmlStrBytes[:strLen*2].decode("UTF_16LE")
 *     property timeconversion:
 */
  __pyx_v_strLen = xercesc::XMLString::stringLen(__pyx_v_xmlStr);

  /* "arelle_cython/arelle_c/xerces.pxi":119
 *             cdef char* xmlStrBytes = <char*>xmlStr
 *             cdef XMLSize_t strLen = stringLen(xmlStr)
 *             return xmlStrBytes[:strLen*2].decode("UTF_16LE")             # <<<<<<<<<<<<<<
 *     property timeconversion:
 *         def __get__( self ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_xmlStrBytes + 0, (__pyx_v_strLen * 2) - 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_decode); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":110
 *             return transcode( xmlStr ).decode("utf-8")
 *     property rawtext:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             cdef DOMNode* text_node = self._c_node.getFirstChild()
 *             if text_node == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("arelle.arelle_c._Element.rawtext.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":121
 *             return xmlStrBytes[:strLen*2].decode("UTF_16LE")
 *     property timeconversion:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             cdef DOMNode* text_node = ( self._c_node.getFirstChild())
 *             cdef const XMLCh* xmlStr = text_node.getNodeValue()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_14timeconversion_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_14timeconversion_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8_Element_14timeconversion___get__(((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_14timeconversion___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self) {
  xercesc::DOMNode *__pyx_v_text_node;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_xmlStr;
  char *__pyx_v_xmlStrBytes;
  CYTHON_UNUSED int __pyx_v_i;
  PyObject *__pyx_v_t1 = NULL;
  PyObject *__pyx_v_strLen = NULL;
  PyObject *__pyx_v_pyStr1 = NULL;
  PyObject *__pyx_v_t2 = NULL;
  PyObject *__pyx_v_pyStr2 = NULL;
  PyObject *__pyx_v_t3 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":122
 *     property timeconversion:
 *         def __get__( self ):
 *             cdef DOMNode* text_node = ( self._c_node.getFirstChild())             # <<<<<<<<<<<<<<
 *             cdef const XMLCh* xmlStr = text_node.getNodeValue()
 *             cdef char* xmlStrBytes
 */
  __pyx_v_text_node = __pyx_v_self->_c_node->getFirstChild();

  /* "arelle_cython/arelle_c/xerces.pxi":123
 *         def __get__( self ):
 *             cdef DOMNode* text_node = ( self._c_node.getFirstChild())
 *             cdef const XMLCh* xmlStr = text_node.getNodeValue()             # <<<<<<<<<<<<<<
 *             cdef char* xmlStrBytes
 *             cdef XMLSize_t
 */
  __pyx_v_xmlStr = __pyx_v_text_node->getNodeValue();

  /* "arelle_cython/arelle_c/xerces.pxi":127
 *             cdef XMLSize_t
 *             cdef int i
 *             t1 = time()             # <<<<<<<<<<<<<<
 *             for i in range(2000000):
 *                 xmlStrBytes = <char*>xmlStr
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 127, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 127, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_t1 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":128
 *             cdef int i
 *             t1 = time()
 *             for i in range(2000000):             # <<<<<<<<<<<<<<
 *                 xmlStrBytes = <char*>xmlStr
 *                 strLen = stringLen(xmlStr)
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 0x1E8480; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "arelle_cython/arelle_c/xerces.pxi":129
 *             t1 = time()
 *             for i in range(2000000):
 *                 xmlStrBytes = <char*>xmlStr             # <<<<<<<<<<<<<<
 *                 strLen = stringLen(xmlStr)
 *                 pyStr1 = xmlStrBytes[:strLen*2].decode("UTF_16LE")
 */
    __pyx_v_xmlStrBytes = ((char *)__pyx_v_xmlStr);

    /* "arelle_cython/arelle_c/xerces.pxi":130
 *             for i in range(2000000):
 *                 xmlStrBytes = <char*>xmlStr
 *                 strLen = stringLen(xmlStr)             # <<<<<<<<<<<<<<
 *                 pyStr1 = xmlStrBytes[:strLen*2].decode("UTF_16LE")
 *             t2 = time()
 */
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(xercesc::XMLString::stringLen(__pyx_v_xmlStr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_strLen, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "arelle_cython/arelle_c/xerces.pxi":131
 *                 xmlStrBytes = <char*>xmlStr
 *                 strLen = stringLen(xmlStr)
 *                 pyStr1 = xmlStrBytes[:strLen*2].decode("UTF_16LE")             # <<<<<<<<<<<<<<
 *             t2 = time()
 *             for i in range(2000000):
 */
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_strLen, __pyx_int_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(6, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_xmlStrBytes + 0, __pyx_t_5 - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_pyStr1, __pyx_t_1);
    __pyx_t_1 = 0;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":132
 *                 strLen = stringLen(xmlStr)
 *                 pyStr1 = xmlStrBytes[:strLen*2].decode("UTF_16LE")
 *             t2 = time()             # <<<<<<<<<<<<<<
 *             for i in range(2000000):
 *                 xmlStrBytes = transcode(xmlStr)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 132, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 132, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_t2 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":133
 *                 pyStr1 = xmlStrBytes[:strLen*2].decode("UTF_16LE")
 *             t2 = time()
 *             for i in range(2000000):             # <<<<<<<<<<<<<<
 *                 xmlStrBytes = transcode(xmlStr)
 *                 pyStr2 = xmlStrBytes.decode("utf-8")
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 0x1E8480; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "arelle_cython/arelle_c/xerces.pxi":134
 *             t2 = time()
 *             for i in range(2000000):
 *                 xmlStrBytes = transcode(xmlStr)             # <<<<<<<<<<<<<<
 *                 pyStr2 = xmlStrBytes.decode("utf-8")
 *                 release(&xmlStrBytes)
 */
    __pyx_v_xmlStrBytes = xercesc::XMLString::transcode(__pyx_v_xmlStr);

    /* "arelle_cython/arelle_c/xerces.pxi":135
 *             for i in range(2000000):
 *                 xmlStrBytes = transcode(xmlStr)
 *                 pyStr2 = xmlStrBytes.decode("utf-8")             # <<<<<<<<<<<<<<
 *                 release(&xmlStrBytes)
 *             t3 = time()
 */
    __pyx_t_1 = __Pyx_PyUnicode_FromString(__pyx_v_xmlStrBytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_pyStr2, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "arelle_cython/arelle_c/xerces.pxi":136
 *                 xmlStrBytes = transcode(xmlStr)
 *                 pyStr2 = xmlStrBytes.decode("utf-8")
 *                 release(&xmlStrBytes)             # <<<<<<<<<<<<<<
 *             t3 = time()
 *             return "conversions strlen {} c1 {} c2 {} s1 {} s2 {}".format(strLen, t2-t1,t3-t2,pyStr1,pyStr2)
 */
    xercesc::XMLString::release((&__pyx_v_xmlStrBytes));
  }

  /* "arelle_cython/arelle_c/xerces.pxi":137
 *                 pyStr2 = xmlStrBytes.decode("utf-8")
 *                 release(&xmlStrBytes)
 *             t3 = time()             # <<<<<<<<<<<<<<
 *             return "conversions strlen {} c1 {} c2 {} s1 {} s2 {}".format(strLen, t2-t1,t3-t2,pyStr1,pyStr2)
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 137, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 137, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_t3 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":138
 *                 release(&xmlStrBytes)
 *             t3 = time()
 *             return "conversions strlen {} c1 {} c2 {} s1 {} s2 {}".format(strLen, t2-t1,t3-t2,pyStr1,pyStr2)             # <<<<<<<<<<<<<<
 * 
 *     property tail:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_conversions_strlen_c1_c2_s1_s2, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(!__pyx_v_strLen)) { __Pyx_RaiseUnboundLocalError("strLen"); __PYX_ERR(6, 138, __pyx_L1_error) }
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_t2, __pyx_v_t1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyNumber_Subtract(__pyx_v_t3, __pyx_v_t2); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (unlikely(!__pyx_v_pyStr1)) { __Pyx_RaiseUnboundLocalError("pyStr1"); __PYX_ERR(6, 138, __pyx_L1_error) }
  if (unlikely(!__pyx_v_pyStr2)) { __Pyx_RaiseUnboundLocalError("pyStr2"); __PYX_ERR(6, 138, __pyx_L1_error) }
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_7, __pyx_v_strLen, __pyx_t_3, __pyx_t_6, __pyx_v_pyStr1, __pyx_v_pyStr2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 138, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_7, __pyx_v_strLen, __pyx_t_3, __pyx_t_6, __pyx_v_pyStr1, __pyx_v_pyStr2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 5+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 138, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(5+__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_strLen);
    __Pyx_GIVEREF(__pyx_v_strLen);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_4, __pyx_v_strLen);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_4, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_4, __pyx_t_6);
    __Pyx_INCREF(__pyx_v_pyStr1);
    __Pyx_GIVEREF(__pyx_v_pyStr1);
    PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_4, __pyx_v_pyStr1);
    __Pyx_INCREF(__pyx_v_pyStr2);
    __Pyx_GIVEREF(__pyx_v_pyStr2);
    PyTuple_SET_ITEM(__pyx_t_8, 4+__pyx_t_4, __pyx_v_pyStr2);
    __pyx_t_3 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":121
 *             return xmlStrBytes[:strLen*2].decode("UTF_16LE")
 *     property timeconversion:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             cdef DOMNode* text_node = ( self._c_node.getFirstChild())
 *             cdef const XMLCh* xmlStr = text_node.getNodeValue()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("arelle.arelle_c._Element.timeconversion.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t1);
  __Pyx_XDECREF(__pyx_v_strLen);
  __Pyx_XDECREF(__pyx_v_pyStr1);
  __Pyx_XDECREF(__pyx_v_t2);
  __Pyx_XDECREF(__pyx_v_pyStr2);
  __Pyx_XDECREF(__pyx_v_t3);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":141
 * 
 *     property tail:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             cdef DOMNode* next = ( self._c_node.getNextSibling())
 *             if ( next is NULL or next.getNodeType() is not TEXT_NODE ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_4tail_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_4tail_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8_Element_4tail___get__(((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_4tail___get__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self) {
  xercesc::DOMNode *__pyx_v_next;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":142
 *     property tail:
 *         def __get__( self ):
 *             cdef DOMNode* next = ( self._c_node.getNextSibling())             # <<<<<<<<<<<<<<
 *             if ( next is NULL or next.getNodeType() is not TEXT_NODE ):
 *                 return None
 */
  __pyx_v_next = __pyx_v_self->_c_node->getNextSibling();

  /* "arelle_cython/arelle_c/xerces.pxi":143
 *         def __get__( self ):
 *             cdef DOMNode* next = ( self._c_node.getNextSibling())
 *             if ( next is NULL or next.getNodeType() is not TEXT_NODE ):             # <<<<<<<<<<<<<<
 *                 return None
 *             return transcode( next.getNodeValue())
 */
  __pyx_t_2 = ((__pyx_v_next == NULL) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_next->getNodeType() != xercesc::DOMNode::TEXT_NODE) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":144
 *             cdef DOMNode* next = ( self._c_node.getNextSibling())
 *             if ( next is NULL or next.getNodeType() is not TEXT_NODE ):
 *                 return None             # <<<<<<<<<<<<<<
 *             return transcode( next.getNodeValue())
 *     def __getitem__( self, x ):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/xerces.pxi":143
 *         def __get__( self ):
 *             cdef DOMNode* next = ( self._c_node.getNextSibling())
 *             if ( next is NULL or next.getNodeType() is not TEXT_NODE ):             # <<<<<<<<<<<<<<
 *                 return None
 *             return transcode( next.getNodeValue())
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":145
 *             if ( next is NULL or next.getNodeType() is not TEXT_NODE ):
 *                 return None
 *             return transcode( next.getNodeValue())             # <<<<<<<<<<<<<<
 *     def __getitem__( self, x ):
 *         return _element( self._c_node.getChildNodes().item( x ))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_next->getNodeValue())); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":141
 * 
 *     property tail:
 *         def __get__( self ):             # <<<<<<<<<<<<<<
 *             cdef DOMNode* next = ( self._c_node.getNextSibling())
 *             if ( next is NULL or next.getNodeType() is not TEXT_NODE ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("arelle.arelle_c._Element.tail.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":146
 *                 return None
 *             return transcode( next.getNodeValue())
 *     def __getitem__( self, x ):             # <<<<<<<<<<<<<<
 *         return _element( self._c_node.getChildNodes().item( x ))
 *     def getchildren( self ):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8_Element___getitem__(((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element___getitem__(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":147
 *             return transcode( next.getNodeValue())
 *     def __getitem__( self, x ):
 *         return _element( self._c_node.getChildNodes().item( x ))             # <<<<<<<<<<<<<<
 *     def getchildren( self ):
 *         result = []
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_x); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(6, 147, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_6arelle_8arelle_c__element(__pyx_v_self->_c_node->getChildNodes()->item(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":146
 *                 return None
 *             return transcode( next.getNodeValue())
 *     def __getitem__( self, x ):             # <<<<<<<<<<<<<<
 *         return _element( self._c_node.getChildNodes().item( x ))
 *     def getchildren( self ):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("arelle.arelle_c._Element.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":148
 *     def __getitem__( self, x ):
 *         return _element( self._c_node.getChildNodes().item( x ))
 *     def getchildren( self ):             # <<<<<<<<<<<<<<
 *         result = []
 *         cdef DOMNodeList* child_nodes = ( self._c_node.getChildNodes())
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_3getchildren(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_3getchildren(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getchildren (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8_Element_2getchildren(((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_2getchildren(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  xercesc::DOMNodeList *__pyx_v_child_nodes;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_length;
  xercesc::DOMNode *__pyx_v_child;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_2;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("getchildren", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":149
 *         return _element( self._c_node.getChildNodes().item( x ))
 *     def getchildren( self ):
 *         result = []             # <<<<<<<<<<<<<<
 *         cdef DOMNodeList* child_nodes = ( self._c_node.getChildNodes())
 *         cdef XMLSize_t length = child_nodes.getLength()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":150
 *     def getchildren( self ):
 *         result = []
 *         cdef DOMNodeList* child_nodes = ( self._c_node.getChildNodes())             # <<<<<<<<<<<<<<
 *         cdef XMLSize_t length = child_nodes.getLength()
 *         cdef DOMNode* child
 */
  __pyx_v_child_nodes = __pyx_v_self->_c_node->getChildNodes();

  /* "arelle_cython/arelle_c/xerces.pxi":151
 *         result = []
 *         cdef DOMNodeList* child_nodes = ( self._c_node.getChildNodes())
 *         cdef XMLSize_t length = child_nodes.getLength()             # <<<<<<<<<<<<<<
 *         cdef DOMNode* child
 *         for i in range( length ):
 */
  __pyx_v_length = __pyx_v_child_nodes->getLength();

  /* "arelle_cython/arelle_c/xerces.pxi":153
 *         cdef XMLSize_t length = child_nodes.getLength()
 *         cdef DOMNode* child
 *         for i in range( length ):             # <<<<<<<<<<<<<<
 *             child = child_nodes.item( i )
 *             if ( child.getNodeType() == ELEMENT_NODE ):
 */
  __pyx_t_2 = __pyx_v_length;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "arelle_cython/arelle_c/xerces.pxi":154
 *         cdef DOMNode* child
 *         for i in range( length ):
 *             child = child_nodes.item( i )             # <<<<<<<<<<<<<<
 *             if ( child.getNodeType() == ELEMENT_NODE ):
 *                 result.append( _element( child ))
 */
    __pyx_v_child = __pyx_v_child_nodes->item(__pyx_v_i);

    /* "arelle_cython/arelle_c/xerces.pxi":155
 *         for i in range( length ):
 *             child = child_nodes.item( i )
 *             if ( child.getNodeType() == ELEMENT_NODE ):             # <<<<<<<<<<<<<<
 *                 result.append( _element( child ))
 *         return result
 */
    __pyx_t_4 = ((__pyx_v_child->getNodeType() == xercesc::DOMNode::ELEMENT_NODE) != 0);
    if (__pyx_t_4) {

      /* "arelle_cython/arelle_c/xerces.pxi":156
 *             child = child_nodes.item( i )
 *             if ( child.getNodeType() == ELEMENT_NODE ):
 *                 result.append( _element( child ))             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
      __pyx_t_1 = __pyx_f_6arelle_8arelle_c__element(__pyx_v_child); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 156, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(6, 156, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "arelle_cython/arelle_c/xerces.pxi":155
 *         for i in range( length ):
 *             child = child_nodes.item( i )
 *             if ( child.getNodeType() == ELEMENT_NODE ):             # <<<<<<<<<<<<<<
 *                 result.append( _element( child ))
 *         return result
 */
    }
  }

  /* "arelle_cython/arelle_c/xerces.pxi":157
 *             if ( child.getNodeType() == ELEMENT_NODE ):
 *                 result.append( _element( child ))
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def lenchildren( self ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":148
 *     def __getitem__( self, x ):
 *         return _element( self._c_node.getChildNodes().item( x ))
 *     def getchildren( self ):             # <<<<<<<<<<<<<<
 *         result = []
 *         cdef DOMNodeList* child_nodes = ( self._c_node.getChildNodes())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c._Element.getchildren", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":159
 *         return result
 * 
 *     def lenchildren( self ):             # <<<<<<<<<<<<<<
 *         cdef DOMNodeList* child_nodes = ( self._c_node.getChildNodes())
 *         cdef XMLSize_t length = child_nodes.getLength()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_5lenchildren(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6arelle_8arelle_c_8_Element_5lenchildren(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lenchildren (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8_Element_4lenchildren(((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8_Element_4lenchildren(struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_self) {
  xercesc::DOMNodeList *__pyx_v_child_nodes;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lenchildren", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":160
 * 
 *     def lenchildren( self ):
 *         cdef DOMNodeList* child_nodes = ( self._c_node.getChildNodes())             # <<<<<<<<<<<<<<
 *         cdef XMLSize_t length = child_nodes.getLength()
 *         return length
 */
  __pyx_v_child_nodes = __pyx_v_self->_c_node->getChildNodes();

  /* "arelle_cython/arelle_c/xerces.pxi":161
 *     def lenchildren( self ):
 *         cdef DOMNodeList* child_nodes = ( self._c_node.getChildNodes())
 *         cdef XMLSize_t length = child_nodes.getLength()             # <<<<<<<<<<<<<<
 *         return length
 * 
 */
  __pyx_v_length = __pyx_v_child_nodes->getLength();

  /* "arelle_cython/arelle_c/xerces.pxi":162
 *         cdef DOMNodeList* child_nodes = ( self._c_node.getChildNodes())
 *         cdef XMLSize_t length = child_nodes.getLength()
 *         return length             # <<<<<<<<<<<<<<
 * 
 * cdef _element( DOMNode* node ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":159
 *         return result
 * 
 *     def lenchildren( self ):             # <<<<<<<<<<<<<<
 *         cdef DOMNodeList* child_nodes = ( self._c_node.getChildNodes())
 *         cdef XMLSize_t length = child_nodes.getLength()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c._Element.lenchildren", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":164
 *         return length
 * 
 * cdef _element( DOMNode* node ):             # <<<<<<<<<<<<<<
 *     el = _Element()
 *     el._c_node = node
 */

static PyObject *__pyx_f_6arelle_8arelle_c__element(xercesc::DOMNode *__pyx_v_node) {
  struct __pyx_obj_6arelle_8arelle_c__Element *__pyx_v_el = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_element", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":165
 * 
 * cdef _element( DOMNode* node ):
 *     el = _Element()             # <<<<<<<<<<<<<<
 *     el._c_node = node
 *     return el
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6arelle_8arelle_c__Element), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_el = ((struct __pyx_obj_6arelle_8arelle_c__Element *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":166
 * cdef _element( DOMNode* node ):
 *     el = _Element()
 *     el._c_node = node             # <<<<<<<<<<<<<<
 *     return el
 * 
 */
  __pyx_v_el->_c_node = __pyx_v_node;

  /* "arelle_cython/arelle_c/xerces.pxi":167
 *     el = _Element()
 *     el._c_node = node
 *     return el             # <<<<<<<<<<<<<<
 * 
 * def fromstring( s ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_el));
  __pyx_r = ((PyObject *)__pyx_v_el);
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":164
 *         return length
 * 
 * cdef _element( DOMNode* node ):             # <<<<<<<<<<<<<<
 *     el = _Element()
 *     el._c_node = node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("arelle.arelle_c._element", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_el);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":169
 *     return el
 * 
 * def fromstring( s ):             # <<<<<<<<<<<<<<
 *     cdef XercesDOMParser parser
 *     parser.setDoNamespaces( True )
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_7fromstring(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static PyMethodDef __pyx_mdef_6arelle_8arelle_c_7fromstring = {"fromstring", (PyCFunction)__pyx_pw_6arelle_8arelle_c_7fromstring, METH_O, 0};
static PyObject *__pyx_pw_6arelle_8arelle_c_7fromstring(PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fromstring (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_6fromstring(__pyx_self, ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_6fromstring(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  xercesc::XercesDOMParser __pyx_v_parser;
  std::string __pyx_v_std_s;
  bool __pyx_v_adoptBuffer;
  xercesc::MemBufInputSource *__pyx_v_inpSrc;
  xercesc::DOMDocument *__pyx_v_doc;
  xercesc::DOMNode *__pyx_v_root;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("fromstring", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":171
 * def fromstring( s ):
 *     cdef XercesDOMParser parser
 *     parser.setDoNamespaces( True )             # <<<<<<<<<<<<<<
 *     parser.setDoSchema( True )
 *     cdef string std_s = s
 */
  __pyx_v_parser.setDoNamespaces(1);

  /* "arelle_cython/arelle_c/xerces.pxi":172
 *     cdef XercesDOMParser parser
 *     parser.setDoNamespaces( True )
 *     parser.setDoSchema( True )             # <<<<<<<<<<<<<<
 *     cdef string std_s = s
 *     print ("input string len {}".format(std_s.size()))
 */
  __pyx_v_parser.setDoSchema(1);

  /* "arelle_cython/arelle_c/xerces.pxi":173
 *     parser.setDoNamespaces( True )
 *     parser.setDoSchema( True )
 *     cdef string std_s = s             # <<<<<<<<<<<<<<
 *     print ("input string len {}".format(std_s.size()))
 *     cdef bool adoptBuffer = False
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 173, __pyx_L1_error)
  __pyx_v_std_s = __pyx_t_1;

  /* "arelle_cython/arelle_c/xerces.pxi":174
 *     parser.setDoSchema( True )
 *     cdef string std_s = s
 *     print ("input string len {}".format(std_s.size()))             # <<<<<<<<<<<<<<
 *     cdef bool adoptBuffer = False
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_input_string_len, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_std_s.size()); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 174, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 174, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 174, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(6, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":175
 *     cdef string std_s = s
 *     print ("input string len {}".format(std_s.size()))
 *     cdef bool adoptBuffer = False             # <<<<<<<<<<<<<<
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 *     parser.parse( deref( inpSrc ))
 */
  __pyx_v_adoptBuffer = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":176
 *     print ("input string len {}".format(std_s.size()))
 *     cdef bool adoptBuffer = False
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))             # <<<<<<<<<<<<<<
 *     parser.parse( deref( inpSrc ))
 *     cdef DOMDocument* doc = parser.getDocument()
 */
  __pyx_v_inpSrc = new xercesc::MemBufInputSource(((__pyx_t_8arelle_c_13xerces_ctypes_XMLByte *)__pyx_v_std_s.c_str()), __pyx_v_std_s.size(), __pyx_v_6arelle_8arelle_c_nsNoNamespace, __pyx_v_adoptBuffer);

  /* "arelle_cython/arelle_c/xerces.pxi":177
 *     cdef bool adoptBuffer = False
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 *     parser.parse( deref( inpSrc ))             # <<<<<<<<<<<<<<
 *     cdef DOMDocument* doc = parser.getDocument()
 *     cdef DOMNode* root = doc.getDocumentElement()
 */
  __pyx_v_parser.parse((*__pyx_v_inpSrc));

  /* "arelle_cython/arelle_c/xerces.pxi":178
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 *     parser.parse( deref( inpSrc ))
 *     cdef DOMDocument* doc = parser.getDocument()             # <<<<<<<<<<<<<<
 *     cdef DOMNode* root = doc.getDocumentElement()
 *     return _element( root )
 */
  __pyx_v_doc = __pyx_v_parser.getDocument();

  /* "arelle_cython/arelle_c/xerces.pxi":179
 *     parser.parse( deref( inpSrc ))
 *     cdef DOMDocument* doc = parser.getDocument()
 *     cdef DOMNode* root = doc.getDocumentElement()             # <<<<<<<<<<<<<<
 *     return _element( root )
 * 
 */
  __pyx_v_root = __pyx_v_doc->getDocumentElement();

  /* "arelle_cython/arelle_c/xerces.pxi":180
 *     cdef DOMDocument* doc = parser.getDocument()
 *     cdef DOMNode* root = doc.getDocumentElement()
 *     return _element( root )             # <<<<<<<<<<<<<<
 * 
 * def fromfile( s ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6arelle_8arelle_c__element(__pyx_v_root); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":169
 *     return el
 * 
 * def fromstring( s ):             # <<<<<<<<<<<<<<
 *     cdef XercesDOMParser parser
 *     parser.setDoNamespaces( True )
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("arelle.arelle_c.fromstring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":182
 *     return _element( root )
 * 
 * def fromfile( s ):             # <<<<<<<<<<<<<<
 *     cdef XercesDOMParser parser
 *     parser.setDoNamespaces( True )
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_9fromfile(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static PyMethodDef __pyx_mdef_6arelle_8arelle_c_9fromfile = {"fromfile", (PyCFunction)__pyx_pw_6arelle_8arelle_c_9fromfile, METH_O, 0};
static PyObject *__pyx_pw_6arelle_8arelle_c_9fromfile(PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fromfile (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_8fromfile(__pyx_self, ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_8fromfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  xercesc::XercesDOMParser __pyx_v_parser;
  PyObject *__pyx_v_byte_s = NULL;
  char const *__pyx_v_c_s;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_xmlChFile;
  xercesc::LocalFileInputSource *__pyx_v_inpSrc;
  xercesc::DOMDocument *__pyx_v_doc;
  xercesc::DOMNode *__pyx_v_root;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("fromfile", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":184
 * def fromfile( s ):
 *     cdef XercesDOMParser parser
 *     parser.setDoNamespaces( True )             # <<<<<<<<<<<<<<
 *     parser.setDoSchema( True )
 *     byte_s = s.encode("utf-8")
 */
  __pyx_v_parser.setDoNamespaces(1);

  /* "arelle_cython/arelle_c/xerces.pxi":185
 *     cdef XercesDOMParser parser
 *     parser.setDoNamespaces( True )
 *     parser.setDoSchema( True )             # <<<<<<<<<<<<<<
 *     byte_s = s.encode("utf-8")
 *     cdef const char* c_s = byte_s
 */
  __pyx_v_parser.setDoSchema(1);

  /* "arelle_cython/arelle_c/xerces.pxi":186
 *     parser.setDoNamespaces( True )
 *     parser.setDoSchema( True )
 *     byte_s = s.encode("utf-8")             # <<<<<<<<<<<<<<
 *     cdef const char* c_s = byte_s
 *     print("trace1 {}".format(c_s))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_byte_s = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":187
 *     parser.setDoSchema( True )
 *     byte_s = s.encode("utf-8")
 *     cdef const char* c_s = byte_s             # <<<<<<<<<<<<<<
 *     print("trace1 {}".format(c_s))
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 */
  __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_v_byte_s); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(6, 187, __pyx_L1_error)
  __pyx_v_c_s = __pyx_t_3;

  /* "arelle_cython/arelle_c/xerces.pxi":188
 *     byte_s = s.encode("utf-8")
 *     cdef const char* c_s = byte_s
 *     print("trace1 {}".format(c_s))             # <<<<<<<<<<<<<<
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 *     print("trace2 {}".format(transcode(xmlChFile)))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_trace1, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyUnicode_FromString(__pyx_v_c_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 188, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 188, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(6, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":189
 *     cdef const char* c_s = byte_s
 *     print("trace1 {}".format(c_s))
 *     cdef XMLCh* xmlChFile = transcode(c_s)             # <<<<<<<<<<<<<<
 *     print("trace2 {}".format(transcode(xmlChFile)))
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))
 */
  __pyx_v_xmlChFile = xercesc::XMLString::transcode(__pyx_v_c_s);

  /* "arelle_cython/arelle_c/xerces.pxi":190
 *     print("trace1 {}".format(c_s))
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 *     print("trace2 {}".format(transcode(xmlChFile)))             # <<<<<<<<<<<<<<
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *     print("trace3")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_trace2, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_xmlChFile)); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 190, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 190, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 190, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(6, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":191
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 *     print("trace2 {}".format(transcode(xmlChFile)))
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))             # <<<<<<<<<<<<<<
 *     print("trace3")
 *     #release(&xmlChFile)
 */
  __pyx_v_inpSrc = new xercesc::LocalFileInputSource(__pyx_v_xmlChFile);

  /* "arelle_cython/arelle_c/xerces.pxi":192
 *     print("trace2 {}".format(transcode(xmlChFile)))
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *     print("trace3")             # <<<<<<<<<<<<<<
 *     #release(&xmlChFile)
 *     parser.parse( deref( inpSrc ))
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace3) < 0) __PYX_ERR(6, 192, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":194
 *     print("trace3")
 *     #release(&xmlChFile)
 *     parser.parse( deref( inpSrc ))             # <<<<<<<<<<<<<<
 *     print("trace4")
 *     cdef DOMDocument* doc = parser.getDocument()
 */
  __pyx_v_parser.parse((*__pyx_v_inpSrc));

  /* "arelle_cython/arelle_c/xerces.pxi":195
 *     #release(&xmlChFile)
 *     parser.parse( deref( inpSrc ))
 *     print("trace4")             # <<<<<<<<<<<<<<
 *     cdef DOMDocument* doc = parser.getDocument()
 *     cdef DOMNode* root = doc.getDocumentElement()
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace4) < 0) __PYX_ERR(6, 195, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":196
 *     parser.parse( deref( inpSrc ))
 *     print("trace4")
 *     cdef DOMDocument* doc = parser.getDocument()             # <<<<<<<<<<<<<<
 *     cdef DOMNode* root = doc.getDocumentElement()
 *     return _element( root )
 */
  __pyx_v_doc = __pyx_v_parser.getDocument();

  /* "arelle_cython/arelle_c/xerces.pxi":197
 *     print("trace4")
 *     cdef DOMDocument* doc = parser.getDocument()
 *     cdef DOMNode* root = doc.getDocumentElement()             # <<<<<<<<<<<<<<
 *     return _element( root )
 * 
 */
  __pyx_v_root = __pyx_v_doc->getDocumentElement();

  /* "arelle_cython/arelle_c/xerces.pxi":198
 *     cdef DOMDocument* doc = parser.getDocument()
 *     cdef DOMNode* root = doc.getDocumentElement()
 *     return _element( root )             # <<<<<<<<<<<<<<
 * 
 * cdef char* lastParsedQName = NULL
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6arelle_8arelle_c__element(__pyx_v_root); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":182
 *     return _element( root )
 * 
 * def fromfile( s ):             # <<<<<<<<<<<<<<
 *     cdef XercesDOMParser parser
 *     parser.setDoNamespaces( True )
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("arelle.arelle_c.fromfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_byte_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":205
 *     int classVar
 * 
 *     _ContentHandler(int _classVar) except +:             # <<<<<<<<<<<<<<
 *         #global classVar
 *         this.classVar = _classVar
 */

 __pyx_t_6arelle_8arelle_c__ContentHandler::__pyx_t_6arelle_8arelle_c__ContentHandler(int __pyx_v__classVar) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":207
 *     _ContentHandler(int _classVar) except +:
 *         #global classVar
 *         this.classVar = _classVar             # <<<<<<<<<<<<<<
 *         print("_ContentHandler initialization {}".format(this.classVar))
 *     void characters(const XMLCh* chars, const XMLSize_t length):
 */
  this->classVar = __pyx_v__classVar;

  /* "arelle_cython/arelle_c/xerces.pxi":208
 *         #global classVar
 *         this.classVar = _classVar
 *         print("_ContentHandler initialization {}".format(this.classVar))             # <<<<<<<<<<<<<<
 *     void characters(const XMLCh* chars, const XMLSize_t length):
 *         print("characters len: {} value: {}".format(length, transcode(chars))) #transcode(chars) if chars is not NULL else "null"))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_ContentHandler_initialization, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(this->classVar); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 208, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 208, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":205
 *     int classVar
 * 
 *     _ContentHandler(int _classVar) except +:             # <<<<<<<<<<<<<<
 *         #global classVar
 *         this.classVar = _classVar
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_ContentHandler.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":209
 *         this.classVar = _classVar
 *         print("_ContentHandler initialization {}".format(this.classVar))
 *     void characters(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         print("characters len: {} value: {}".format(length, transcode(chars))) #transcode(chars) if chars is not NULL else "null"))
 *     void endDocument():
 */

void __pyx_t_6arelle_8arelle_c__ContentHandler::characters(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_chars, __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const __pyx_v_length) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("characters", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":210
 *         print("_ContentHandler initialization {}".format(this.classVar))
 *     void characters(const XMLCh* chars, const XMLSize_t length):
 *         print("characters len: {} value: {}".format(length, transcode(chars))) #transcode(chars) if chars is not NULL else "null"))             # <<<<<<<<<<<<<<
 *     void endDocument():
 *         print("endDocument")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_characters_len_value, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_chars)); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 210, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 210, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":209
 *         this.classVar = _classVar
 *         print("_ContentHandler initialization {}".format(this.classVar))
 *     void characters(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         print("characters len: {} value: {}".format(length, transcode(chars))) #transcode(chars) if chars is not NULL else "null"))
 *     void endDocument():
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("_ContentHandler.characters", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":211
 *     void characters(const XMLCh* chars, const XMLSize_t length):
 *         print("characters len: {} value: {}".format(length, transcode(chars))) #transcode(chars) if chars is not NULL else "null"))
 *     void endDocument():             # <<<<<<<<<<<<<<
 *         print("endDocument")
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 */

void __pyx_t_6arelle_8arelle_c__ContentHandler::endDocument(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endDocument", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":212
 *         print("characters len: {} value: {}".format(length, transcode(chars))) #transcode(chars) if chars is not NULL else "null"))
 *     void endDocument():
 *         print("endDocument")             # <<<<<<<<<<<<<<
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 *         cdef XMLCh* _uri
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_endDocument) < 0) __PYX_ERR(6, 212, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":211
 *     void characters(const XMLCh* chars, const XMLSize_t length):
 *         print("characters len: {} value: {}".format(length, transcode(chars))) #transcode(chars) if chars is not NULL else "null"))
 *     void endDocument():             # <<<<<<<<<<<<<<
 *         print("endDocument")
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_ContentHandler.endDocument", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":213
 *     void endDocument():
 *         print("endDocument")
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):             # <<<<<<<<<<<<<<
 *         cdef XMLCh* _uri
 *         cdef XMLCh* _localname
 */

void __pyx_t_6arelle_8arelle_c__ContentHandler::endElement(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_uri, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_localname, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_qname) {
  CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v__localname;
  CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v__qname;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endElement", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":218
 *         cdef XMLCh* _qname
 *         #_uri = <XMLCh*>uri
 *         _localname = <XMLCh*>localname             # <<<<<<<<<<<<<<
 *         _qname = <XMLCh*>qname
 *         print("endElement")
 */
  __pyx_v__localname = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_localname);

  /* "arelle_cython/arelle_c/xerces.pxi":219
 *         #_uri = <XMLCh*>uri
 *         _localname = <XMLCh*>localname
 *         _qname = <XMLCh*>qname             # <<<<<<<<<<<<<<
 *         print("endElement")
 *         global lastParsedQName
 */
  __pyx_v__qname = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_qname);

  /* "arelle_cython/arelle_c/xerces.pxi":220
 *         _localname = <XMLCh*>localname
 *         _qname = <XMLCh*>qname
 *         print("endElement")             # <<<<<<<<<<<<<<
 *         global lastParsedQName
 *         #print("endElement uri:  localname: {} qname: {}".format(#transcode(_uri) if _uri != NULL else "null",
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_endElement) < 0) __PYX_ERR(6, 220, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":213
 *     void endDocument():
 *         print("endDocument")
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):             # <<<<<<<<<<<<<<
 *         cdef XMLCh* _uri
 *         cdef XMLCh* _localname
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_ContentHandler.endElement", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":225
 *         #                                                          transcode(_localname) if _localname != NULL else "null",
 *         #                                                          transcode(_qname) if _qname != NULL else "null"))
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         print("ignorableWhitespace")
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):
 */

void __pyx_t_6arelle_8arelle_c__ContentHandler::ignorableWhitespace(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_chars, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const __pyx_v_length) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ignorableWhitespace", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":226
 *         #                                                          transcode(_qname) if _qname != NULL else "null"))
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):
 *         print("ignorableWhitespace")             # <<<<<<<<<<<<<<
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):
 *         print("processingInstruction target: {} data: {}".format(transcode(target) if target is not NULL else "null",
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_ignorableWhitespace) < 0) __PYX_ERR(6, 226, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":225
 *         #                                                          transcode(_localname) if _localname != NULL else "null",
 *         #                                                          transcode(_qname) if _qname != NULL else "null"))
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         print("ignorableWhitespace")
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_ContentHandler.ignorableWhitespace", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":227
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):
 *         print("ignorableWhitespace")
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):             # <<<<<<<<<<<<<<
 *         print("processingInstruction target: {} data: {}".format(transcode(target) if target is not NULL else "null",
 *                                                                  transcode(data) if data is not NULL else "null"))
 */

void __pyx_t_6arelle_8arelle_c__ContentHandler::processingInstruction(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_target, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_data) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("processingInstruction", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":228
 *         print("ignorableWhitespace")
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):
 *         print("processingInstruction target: {} data: {}".format(transcode(target) if target is not NULL else "null",             # <<<<<<<<<<<<<<
 *                                                                  transcode(data) if data is not NULL else "null"))
 *     void setDocumentLocator(const Locator* const locator):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_processingInstruction_target_dat, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (((__pyx_v_target != NULL) != 0)) {
    __pyx_t_4 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_target)); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_n_s_null);
    __pyx_t_3 = __pyx_n_s_null;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":229
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):
 *         print("processingInstruction target: {} data: {}".format(transcode(target) if target is not NULL else "null",
 *                                                                  transcode(data) if data is not NULL else "null"))             # <<<<<<<<<<<<<<
 *     void setDocumentLocator(const Locator* const locator):
 *         print("setDocumentLocator pubId: {} sysId: {} ".format(transcode(locator.getPublicId()) if locator.getPublicId() is not NULL else "null",
 */
  if (((__pyx_v_data != NULL) != 0)) {
    __pyx_t_5 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_data)); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __pyx_t_5;
    __pyx_t_5 = 0;
  } else {
    __Pyx_INCREF(__pyx_n_s_null);
    __pyx_t_4 = __pyx_n_s_null;
  }
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 228, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 228, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":227
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):
 *         print("ignorableWhitespace")
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):             # <<<<<<<<<<<<<<
 *         print("processingInstruction target: {} data: {}".format(transcode(target) if target is not NULL else "null",
 *                                                                  transcode(data) if data is not NULL else "null"))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("_ContentHandler.processingInstruction", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":230
 *         print("processingInstruction target: {} data: {}".format(transcode(target) if target is not NULL else "null",
 *                                                                  transcode(data) if data is not NULL else "null"))
 *     void setDocumentLocator(const Locator* const locator):             # <<<<<<<<<<<<<<
 *         print("setDocumentLocator pubId: {} sysId: {} ".format(transcode(locator.getPublicId()) if locator.getPublicId() is not NULL else "null",
 *                                                        transcode(locator.getSystemId()) if locator.getSystemId() is not NULL else "null"))
 */

void __pyx_t_6arelle_8arelle_c__ContentHandler::setDocumentLocator(xercesc::Locator const *const __pyx_v_locator) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("setDocumentLocator", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":231
 *                                                                  transcode(data) if data is not NULL else "null"))
 *     void setDocumentLocator(const Locator* const locator):
 *         print("setDocumentLocator pubId: {} sysId: {} ".format(transcode(locator.getPublicId()) if locator.getPublicId() is not NULL else "null",             # <<<<<<<<<<<<<<
 *                                                        transcode(locator.getSystemId()) if locator.getSystemId() is not NULL else "null"))
 *     void startDocument():
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_setDocumentLocator_pubId_sysId, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (((__pyx_v_locator->getPublicId() != NULL) != 0)) {
    __pyx_t_4 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_locator->getPublicId())); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_n_s_null);
    __pyx_t_3 = __pyx_n_s_null;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":232
 *     void setDocumentLocator(const Locator* const locator):
 *         print("setDocumentLocator pubId: {} sysId: {} ".format(transcode(locator.getPublicId()) if locator.getPublicId() is not NULL else "null",
 *                                                        transcode(locator.getSystemId()) if locator.getSystemId() is not NULL else "null"))             # <<<<<<<<<<<<<<
 *     void startDocument():
 *         print("startDocument")
 */
  if (((__pyx_v_locator->getSystemId() != NULL) != 0)) {
    __pyx_t_5 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_locator->getSystemId())); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __pyx_t_5;
    __pyx_t_5 = 0;
  } else {
    __Pyx_INCREF(__pyx_n_s_null);
    __pyx_t_4 = __pyx_n_s_null;
  }
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 231, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 231, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":230
 *         print("processingInstruction target: {} data: {}".format(transcode(target) if target is not NULL else "null",
 *                                                                  transcode(data) if data is not NULL else "null"))
 *     void setDocumentLocator(const Locator* const locator):             # <<<<<<<<<<<<<<
 *         print("setDocumentLocator pubId: {} sysId: {} ".format(transcode(locator.getPublicId()) if locator.getPublicId() is not NULL else "null",
 *                                                        transcode(locator.getSystemId()) if locator.getSystemId() is not NULL else "null"))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("_ContentHandler.setDocumentLocator", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":233
 *         print("setDocumentLocator pubId: {} sysId: {} ".format(transcode(locator.getPublicId()) if locator.getPublicId() is not NULL else "null",
 *                                                        transcode(locator.getSystemId()) if locator.getSystemId() is not NULL else "null"))
 *     void startDocument():             # <<<<<<<<<<<<<<
 *         print("startDocument")
 *         print("classVar {}".format(this.classVar))
 */

void __pyx_t_6arelle_8arelle_c__ContentHandler::startDocument(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("startDocument", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":234
 *                                                        transcode(locator.getSystemId()) if locator.getSystemId() is not NULL else "null"))
 *     void startDocument():
 *         print("startDocument")             # <<<<<<<<<<<<<<
 *         print("classVar {}".format(this.classVar))
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_startDocument) < 0) __PYX_ERR(6, 234, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":235
 *     void startDocument():
 *         print("startDocument")
 *         print("classVar {}".format(this.classVar))             # <<<<<<<<<<<<<<
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):
 *         cdef XMLCh* _uri
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_classVar, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(this->classVar); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 235, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 235, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 235, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":233
 *         print("setDocumentLocator pubId: {} sysId: {} ".format(transcode(locator.getPublicId()) if locator.getPublicId() is not NULL else "null",
 *                                                        transcode(locator.getSystemId()) if locator.getSystemId() is not NULL else "null"))
 *     void startDocument():             # <<<<<<<<<<<<<<
 *         print("startDocument")
 *         print("classVar {}".format(this.classVar))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("_ContentHandler.startDocument", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":236
 *         print("startDocument")
 *         print("classVar {}".format(this.classVar))
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):             # <<<<<<<<<<<<<<
 *         cdef XMLCh* _uri
 *         cdef XMLCh* _localname
 */

void __pyx_t_6arelle_8arelle_c__ContentHandler::startElement(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_uri, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_localname, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_qname, xercesc::Attributes const &__pyx_v_attrs) {
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v__uri;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v__localname;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v__qname;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v__value;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_attrLen;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_i;
  PyObject *__pyx_v_pyAttrs = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_2;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("startElement", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":241
 *         cdef XMLCh* _qname
 *         cdef XMLCh* _value
 *         cdef XMLSize_t attrLen = attrs.getLength()             # <<<<<<<<<<<<<<
 *         cdef XMLSize_t i
 *         pyAttrs = {}
 */
  __pyx_v_attrLen = __pyx_v_attrs.getLength();

  /* "arelle_cython/arelle_c/xerces.pxi":243
 *         cdef XMLSize_t attrLen = attrs.getLength()
 *         cdef XMLSize_t i
 *         pyAttrs = {}             # <<<<<<<<<<<<<<
 *         for i in range(attrLen):
 *             _qname = <XMLCh*>attrs.getQName(i)
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pyAttrs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":244
 *         cdef XMLSize_t i
 *         pyAttrs = {}
 *         for i in range(attrLen):             # <<<<<<<<<<<<<<
 *             _qname = <XMLCh*>attrs.getQName(i)
 *             _value = <XMLCh*>attrs.getValue(i)
 */
  __pyx_t_2 = __pyx_v_attrLen;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "arelle_cython/arelle_c/xerces.pxi":245
 *         pyAttrs = {}
 *         for i in range(attrLen):
 *             _qname = <XMLCh*>attrs.getQName(i)             # <<<<<<<<<<<<<<
 *             _value = <XMLCh*>attrs.getValue(i)
 *             pyAttrs[transcode(_qname)] = transcode(_value)
 */
    __pyx_v__qname = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_attrs.getQName(__pyx_v_i));

    /* "arelle_cython/arelle_c/xerces.pxi":246
 *         for i in range(attrLen):
 *             _qname = <XMLCh*>attrs.getQName(i)
 *             _value = <XMLCh*>attrs.getValue(i)             # <<<<<<<<<<<<<<
 *             pyAttrs[transcode(_qname)] = transcode(_value)
 *         _uri = <XMLCh*>uri
 */
    __pyx_v__value = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_attrs.getValue(__pyx_v_i));

    /* "arelle_cython/arelle_c/xerces.pxi":247
 *             _qname = <XMLCh*>attrs.getQName(i)
 *             _value = <XMLCh*>attrs.getValue(i)
 *             pyAttrs[transcode(_qname)] = transcode(_value)             # <<<<<<<<<<<<<<
 *         _uri = <XMLCh*>uri
 *         _localname = <XMLCh*>localname
 */
    __pyx_t_1 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v__value)); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v__qname)); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PyDict_SetItem(__pyx_v_pyAttrs, __pyx_t_4, __pyx_t_1) < 0)) __PYX_ERR(6, 247, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":248
 *             _value = <XMLCh*>attrs.getValue(i)
 *             pyAttrs[transcode(_qname)] = transcode(_value)
 *         _uri = <XMLCh*>uri             # <<<<<<<<<<<<<<
 *         _localname = <XMLCh*>localname
 *         _qname = <XMLCh*>qname
 */
  __pyx_v__uri = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_uri);

  /* "arelle_cython/arelle_c/xerces.pxi":249
 *             pyAttrs[transcode(_qname)] = transcode(_value)
 *         _uri = <XMLCh*>uri
 *         _localname = <XMLCh*>localname             # <<<<<<<<<<<<<<
 *         _qname = <XMLCh*>qname
 *         global lastParsedQName
 */
  __pyx_v__localname = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_localname);

  /* "arelle_cython/arelle_c/xerces.pxi":250
 *         _uri = <XMLCh*>uri
 *         _localname = <XMLCh*>localname
 *         _qname = <XMLCh*>qname             # <<<<<<<<<<<<<<
 *         global lastParsedQName
 *         if lastParsedQName != NULL:
 */
  __pyx_v__qname = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_qname);

  /* "arelle_cython/arelle_c/xerces.pxi":252
 *         _qname = <XMLCh*>qname
 *         global lastParsedQName
 *         if lastParsedQName != NULL:             # <<<<<<<<<<<<<<
 *             release(&lastParsedQName)
 *         lastParsedQName = transcode(_qname)
 */
  __pyx_t_5 = ((__pyx_v_6arelle_8arelle_c_lastParsedQName != NULL) != 0);
  if (__pyx_t_5) {

    /* "arelle_cython/arelle_c/xerces.pxi":253
 *         global lastParsedQName
 *         if lastParsedQName != NULL:
 *             release(&lastParsedQName)             # <<<<<<<<<<<<<<
 *         lastParsedQName = transcode(_qname)
 *         print("startElement trace1 localname raw {}".format(<char*>_localname))
 */
    xercesc::XMLString::release((&__pyx_v_6arelle_8arelle_c_lastParsedQName));

    /* "arelle_cython/arelle_c/xerces.pxi":252
 *         _qname = <XMLCh*>qname
 *         global lastParsedQName
 *         if lastParsedQName != NULL:             # <<<<<<<<<<<<<<
 *             release(&lastParsedQName)
 *         lastParsedQName = transcode(_qname)
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":254
 *         if lastParsedQName != NULL:
 *             release(&lastParsedQName)
 *         lastParsedQName = transcode(_qname)             # <<<<<<<<<<<<<<
 *         print("startElement trace1 localname raw {}".format(<char*>_localname))
 *         print("startElement uri: {} localname: {} qname: {} attrs: {}".format(
 */
  __pyx_v_6arelle_8arelle_c_lastParsedQName = xercesc::XMLString::transcode(__pyx_v__qname);

  /* "arelle_cython/arelle_c/xerces.pxi":255
 *             release(&lastParsedQName)
 *         lastParsedQName = transcode(_qname)
 *         print("startElement trace1 localname raw {}".format(<char*>_localname))             # <<<<<<<<<<<<<<
 *         print("startElement uri: {} localname: {} qname: {} attrs: {}".format(
 *             transcode(_uri) if _uri is not NULL else "null",
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_startElement_trace1_localname_ra, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyUnicode_FromString(((char *)__pyx_v__localname)); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 255, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 255, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 255, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 255, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 255, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":256
 *         lastParsedQName = transcode(_qname)
 *         print("startElement trace1 localname raw {}".format(<char*>_localname))
 *         print("startElement uri: {} localname: {} qname: {} attrs: {}".format(             # <<<<<<<<<<<<<<
 *             transcode(_uri) if _uri is not NULL else "null",
 *             transcode(_localname) if _localname is not NULL else "null",
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_startElement_uri_localname_qname, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "arelle_cython/arelle_c/xerces.pxi":257
 *         print("startElement trace1 localname raw {}".format(<char*>_localname))
 *         print("startElement uri: {} localname: {} qname: {} attrs: {}".format(
 *             transcode(_uri) if _uri is not NULL else "null",             # <<<<<<<<<<<<<<
 *             transcode(_localname) if _localname is not NULL else "null",
 *             transcode(_qname) if _qname is not NULL else "null",
 */
  if (((__pyx_v__uri != NULL) != 0)) {
    __pyx_t_6 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v__uri)); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __pyx_t_6;
    __pyx_t_6 = 0;
  } else {
    __Pyx_INCREF(__pyx_n_s_null);
    __pyx_t_8 = __pyx_n_s_null;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":258
 *         print("startElement uri: {} localname: {} qname: {} attrs: {}".format(
 *             transcode(_uri) if _uri is not NULL else "null",
 *             transcode(_localname) if _localname is not NULL else "null",             # <<<<<<<<<<<<<<
 *             transcode(_qname) if _qname is not NULL else "null",
 *             pyAttrs))
 */
  if (((__pyx_v__localname != NULL) != 0)) {
    __pyx_t_7 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v__localname)); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __pyx_t_7;
    __pyx_t_7 = 0;
  } else {
    __Pyx_INCREF(__pyx_n_s_null);
    __pyx_t_6 = __pyx_n_s_null;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":259
 *             transcode(_uri) if _uri is not NULL else "null",
 *             transcode(_localname) if _localname is not NULL else "null",
 *             transcode(_qname) if _qname is not NULL else "null",             # <<<<<<<<<<<<<<
 *             pyAttrs))
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 */
  if (((__pyx_v__qname != NULL) != 0)) {
    __pyx_t_9 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v__qname)); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = __pyx_t_9;
    __pyx_t_9 = 0;
  } else {
    __Pyx_INCREF(__pyx_n_s_null);
    __pyx_t_7 = __pyx_n_s_null;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":260
 *             transcode(_localname) if _localname is not NULL else "null",
 *             transcode(_qname) if _qname is not NULL else "null",
 *             pyAttrs))             # <<<<<<<<<<<<<<
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         print("startPrefixMapping prefix: {} uri: {}".format(transcode(prefix),transcode(uri)))
 */
  __pyx_t_9 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_9, __pyx_t_8, __pyx_t_6, __pyx_t_7, __pyx_v_pyAttrs};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 4+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 256, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[5] = {__pyx_t_9, __pyx_t_8, __pyx_t_6, __pyx_t_7, __pyx_v_pyAttrs};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 4+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 256, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(4+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(6, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_10, __pyx_t_7);
    __Pyx_INCREF(__pyx_v_pyAttrs);
    __Pyx_GIVEREF(__pyx_v_pyAttrs);
    PyTuple_SET_ITEM(__pyx_t_11, 3+__pyx_t_10, __pyx_v_pyAttrs);
    __pyx_t_8 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 256, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":236
 *         print("startDocument")
 *         print("classVar {}".format(this.classVar))
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):             # <<<<<<<<<<<<<<
 *         cdef XMLCh* _uri
 *         cdef XMLCh* _localname
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_WriteUnraisable("_ContentHandler.startElement", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyAttrs);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":261
 *             transcode(_qname) if _qname is not NULL else "null",
 *             pyAttrs))
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):             # <<<<<<<<<<<<<<
 *         print("startPrefixMapping prefix: {} uri: {}".format(transcode(prefix),transcode(uri)))
 *     void endPrefixMapping(const XMLCh* prefix):
 */

void __pyx_t_6arelle_8arelle_c__ContentHandler::startPrefixMapping(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_prefix, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_uri) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("startPrefixMapping", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":262
 *             pyAttrs))
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         print("startPrefixMapping prefix: {} uri: {}".format(transcode(prefix),transcode(uri)))             # <<<<<<<<<<<<<<
 *     void endPrefixMapping(const XMLCh* prefix):
 *         print("endPrefixMapping prefix: {}".format(transcode(prefix)))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_startPrefixMapping_prefix_uri, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_prefix)); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_uri)); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 262, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 262, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":261
 *             transcode(_qname) if _qname is not NULL else "null",
 *             pyAttrs))
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):             # <<<<<<<<<<<<<<
 *         print("startPrefixMapping prefix: {} uri: {}".format(transcode(prefix),transcode(uri)))
 *     void endPrefixMapping(const XMLCh* prefix):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("_ContentHandler.startPrefixMapping", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":263
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         print("startPrefixMapping prefix: {} uri: {}".format(transcode(prefix),transcode(uri)))
 *     void endPrefixMapping(const XMLCh* prefix):             # <<<<<<<<<<<<<<
 *         print("endPrefixMapping prefix: {}".format(transcode(prefix)))
 *     void skippedEntity(const XMLCh* name):
 */

void __pyx_t_6arelle_8arelle_c__ContentHandler::endPrefixMapping(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_prefix) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("endPrefixMapping", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":264
 *         print("startPrefixMapping prefix: {} uri: {}".format(transcode(prefix),transcode(uri)))
 *     void endPrefixMapping(const XMLCh* prefix):
 *         print("endPrefixMapping prefix: {}".format(transcode(prefix)))             # <<<<<<<<<<<<<<
 *     void skippedEntity(const XMLCh* name):
 *         print("skippedEntity: {}".format(transcode(name)))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_endPrefixMapping_prefix, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_prefix)); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 264, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 264, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 264, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 264, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 264, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":263
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         print("startPrefixMapping prefix: {} uri: {}".format(transcode(prefix),transcode(uri)))
 *     void endPrefixMapping(const XMLCh* prefix):             # <<<<<<<<<<<<<<
 *         print("endPrefixMapping prefix: {}".format(transcode(prefix)))
 *     void skippedEntity(const XMLCh* name):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("_ContentHandler.endPrefixMapping", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":265
 *     void endPrefixMapping(const XMLCh* prefix):
 *         print("endPrefixMapping prefix: {}".format(transcode(prefix)))
 *     void skippedEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         print("skippedEntity: {}".format(transcode(name)))
 * 
 */

void __pyx_t_6arelle_8arelle_c__ContentHandler::skippedEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("skippedEntity", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":266
 *         print("endPrefixMapping prefix: {}".format(transcode(prefix)))
 *     void skippedEntity(const XMLCh* name):
 *         print("skippedEntity: {}".format(transcode(name)))             # <<<<<<<<<<<<<<
 * 
 * cdef cppclass _LexicalHandler(LexicalHandler):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_skippedEntity, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_name)); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 266, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 266, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 266, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 266, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 266, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":265
 *     void endPrefixMapping(const XMLCh* prefix):
 *         print("endPrefixMapping prefix: {}".format(transcode(prefix)))
 *     void skippedEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         print("skippedEntity: {}".format(transcode(name)))
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("_ContentHandler.skippedEntity", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":271
 *     int classVar
 * 
 *     _LexicalHandler(int _classVar) except +:             # <<<<<<<<<<<<<<
 *         global classVar
 *         classVar = _classVar
 */

 __pyx_t_6arelle_8arelle_c__LexicalHandler::__pyx_t_6arelle_8arelle_c__LexicalHandler(int __pyx_v__classVar) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":273
 *     _LexicalHandler(int _classVar) except +:
 *         global classVar
 *         classVar = _classVar             # <<<<<<<<<<<<<<
 *         print("_LexicalHandler initialization {}".format(classVar))
 *     void comment(const XMLCh* chars, const XMLSize_t length):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v__classVar); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_classVar_2, __pyx_t_1) < 0) __PYX_ERR(6, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":274
 *         global classVar
 *         classVar = _classVar
 *         print("_LexicalHandler initialization {}".format(classVar))             # <<<<<<<<<<<<<<
 *     void comment(const XMLCh* chars, const XMLSize_t length):
 *         print("comment {}".format(transcode(chars) if chars is not NULL else "null"))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_LexicalHandler_initialization, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_classVar_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 274, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 274, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 274, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":271
 *     int classVar
 * 
 *     _LexicalHandler(int _classVar) except +:             # <<<<<<<<<<<<<<
 *         global classVar
 *         classVar = _classVar
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_LexicalHandler.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":275
 *         classVar = _classVar
 *         print("_LexicalHandler initialization {}".format(classVar))
 *     void comment(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         print("comment {}".format(transcode(chars) if chars is not NULL else "null"))
 *     void endCDATA():
 */

void __pyx_t_6arelle_8arelle_c__LexicalHandler::comment(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_chars, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const __pyx_v_length) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("comment", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":276
 *         print("_LexicalHandler initialization {}".format(classVar))
 *     void comment(const XMLCh* chars, const XMLSize_t length):
 *         print("comment {}".format(transcode(chars) if chars is not NULL else "null"))             # <<<<<<<<<<<<<<
 *     void endCDATA():
 *         print("endCDATA")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_comment, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (((__pyx_v_chars != NULL) != 0)) {
    __pyx_t_4 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_chars)); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_n_s_null);
    __pyx_t_3 = __pyx_n_s_null;
  }
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 276, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 276, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 276, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":275
 *         classVar = _classVar
 *         print("_LexicalHandler initialization {}".format(classVar))
 *     void comment(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         print("comment {}".format(transcode(chars) if chars is not NULL else "null"))
 *     void endCDATA():
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("_LexicalHandler.comment", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":277
 *     void comment(const XMLCh* chars, const XMLSize_t length):
 *         print("comment {}".format(transcode(chars) if chars is not NULL else "null"))
 *     void endCDATA():             # <<<<<<<<<<<<<<
 *         print("endCDATA")
 *     void endDTD():
 */

void __pyx_t_6arelle_8arelle_c__LexicalHandler::endCDATA(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endCDATA", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":278
 *         print("comment {}".format(transcode(chars) if chars is not NULL else "null"))
 *     void endCDATA():
 *         print("endCDATA")             # <<<<<<<<<<<<<<
 *     void endDTD():
 *         print("endDTD")
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_endCDATA) < 0) __PYX_ERR(6, 278, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":277
 *     void comment(const XMLCh* chars, const XMLSize_t length):
 *         print("comment {}".format(transcode(chars) if chars is not NULL else "null"))
 *     void endCDATA():             # <<<<<<<<<<<<<<
 *         print("endCDATA")
 *     void endDTD():
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_LexicalHandler.endCDATA", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":279
 *     void endCDATA():
 *         print("endCDATA")
 *     void endDTD():             # <<<<<<<<<<<<<<
 *         print("endDTD")
 *     void endEntity(const XMLCh* name):
 */

void __pyx_t_6arelle_8arelle_c__LexicalHandler::endDTD(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endDTD", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":280
 *         print("endCDATA")
 *     void endDTD():
 *         print("endDTD")             # <<<<<<<<<<<<<<
 *     void endEntity(const XMLCh* name):
 *         print("endEntity name: {}".format(transcode(name)))
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_endDTD) < 0) __PYX_ERR(6, 280, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":279
 *     void endCDATA():
 *         print("endCDATA")
 *     void endDTD():             # <<<<<<<<<<<<<<
 *         print("endDTD")
 *     void endEntity(const XMLCh* name):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_LexicalHandler.endDTD", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":281
 *     void endDTD():
 *         print("endDTD")
 *     void endEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         print("endEntity name: {}".format(transcode(name)))
 *     void startCDATA():
 */

void __pyx_t_6arelle_8arelle_c__LexicalHandler::endEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("endEntity", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":282
 *         print("endDTD")
 *     void endEntity(const XMLCh* name):
 *         print("endEntity name: {}".format(transcode(name)))             # <<<<<<<<<<<<<<
 *     void startCDATA():
 *         print("startCDATA")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_endEntity_name, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_name)); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 282, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 282, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 282, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":281
 *     void endDTD():
 *         print("endDTD")
 *     void endEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         print("endEntity name: {}".format(transcode(name)))
 *     void startCDATA():
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("_LexicalHandler.endEntity", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":283
 *     void endEntity(const XMLCh* name):
 *         print("endEntity name: {}".format(transcode(name)))
 *     void startCDATA():             # <<<<<<<<<<<<<<
 *         print("startCDATA")
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):
 */

void __pyx_t_6arelle_8arelle_c__LexicalHandler::startCDATA(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startCDATA", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":284
 *         print("endEntity name: {}".format(transcode(name)))
 *     void startCDATA():
 *         print("startCDATA")             # <<<<<<<<<<<<<<
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):
 *         print("startDTD")
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_startCDATA) < 0) __PYX_ERR(6, 284, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":283
 *     void endEntity(const XMLCh* name):
 *         print("endEntity name: {}".format(transcode(name)))
 *     void startCDATA():             # <<<<<<<<<<<<<<
 *         print("startCDATA")
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_LexicalHandler.startCDATA", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":285
 *     void startCDATA():
 *         print("startCDATA")
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):             # <<<<<<<<<<<<<<
 *         print("startDTD")
 *     void startEntity(const XMLCh* name):
 */

void __pyx_t_6arelle_8arelle_c__LexicalHandler::startDTD(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_publicId, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_systemId) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startDTD", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":286
 *         print("startCDATA")
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):
 *         print("startDTD")             # <<<<<<<<<<<<<<
 *     void startEntity(const XMLCh* name):
 *         print("startEntity")
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_startDTD) < 0) __PYX_ERR(6, 286, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":285
 *     void startCDATA():
 *         print("startCDATA")
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):             # <<<<<<<<<<<<<<
 *         print("startDTD")
 *     void startEntity(const XMLCh* name):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_LexicalHandler.startDTD", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":287
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):
 *         print("startDTD")
 *     void startEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         print("startEntity")
 *     void elementDecl(const XMLCh* name, const XMLCh* model):
 */

void __pyx_t_6arelle_8arelle_c__LexicalHandler::startEntity(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startEntity", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":288
 *         print("startDTD")
 *     void startEntity(const XMLCh* name):
 *         print("startEntity")             # <<<<<<<<<<<<<<
 *     void elementDecl(const XMLCh* name, const XMLCh* model):
 *         print("elementDecl")
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_startEntity) < 0) __PYX_ERR(6, 288, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":287
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):
 *         print("startDTD")
 *     void startEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         print("startEntity")
 *     void elementDecl(const XMLCh* name, const XMLCh* model):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_LexicalHandler.startEntity", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":289
 *     void startEntity(const XMLCh* name):
 *         print("startEntity")
 *     void elementDecl(const XMLCh* name, const XMLCh* model):             # <<<<<<<<<<<<<<
 *         print("elementDecl")
 * 
 */

void __pyx_t_6arelle_8arelle_c__LexicalHandler::elementDecl(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_model) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("elementDecl", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":290
 *         print("startEntity")
 *     void elementDecl(const XMLCh* name, const XMLCh* model):
 *         print("elementDecl")             # <<<<<<<<<<<<<<
 * 
 * cdef cppclass _ErrorHandler(ErrorHandler):
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_elementDecl) < 0) __PYX_ERR(6, 290, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":289
 *     void startEntity(const XMLCh* name):
 *         print("startEntity")
 *     void elementDecl(const XMLCh* name, const XMLCh* model):             # <<<<<<<<<<<<<<
 *         print("elementDecl")
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_LexicalHandler.elementDecl", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":293
 * 
 * cdef cppclass _ErrorHandler(ErrorHandler):
 *     _ErrorHandler() except +:             # <<<<<<<<<<<<<<
 *         print("_ErrorHandler initialization")
 *     void error(const SAXParseException& exc):
 */

 __pyx_t_6arelle_8arelle_c__ErrorHandler::__pyx_t_6arelle_8arelle_c__ErrorHandler(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":294
 * cdef cppclass _ErrorHandler(ErrorHandler):
 *     _ErrorHandler() except +:
 *         print("_ErrorHandler initialization")             # <<<<<<<<<<<<<<
 *     void error(const SAXParseException& exc):
 *         cdef const XMLCh* msg = exc.getMessage()
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_ErrorHandler_initialization) < 0) __PYX_ERR(6, 294, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":293
 * 
 * cdef cppclass _ErrorHandler(ErrorHandler):
 *     _ErrorHandler() except +:             # <<<<<<<<<<<<<<
 *         print("_ErrorHandler initialization")
 *     void error(const SAXParseException& exc):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_ErrorHandler.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":295
 *     _ErrorHandler() except +:
 *         print("_ErrorHandler initialization")
 *     void error(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* msg = exc.getMessage()
 *         if msg != NULL:
 */

void __pyx_t_6arelle_8arelle_c__ErrorHandler::error(xercesc::SAXParseException const &__pyx_v_exc) {
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_msg;
  PyObject *__pyx_v_msgText = NULL;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v__file;
  PyObject *__pyx_v_fileName = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("error", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":296
 *         print("_ErrorHandler initialization")
 *     void error(const SAXParseException& exc):
 *         cdef const XMLCh* msg = exc.getMessage()             # <<<<<<<<<<<<<<
 *         if msg != NULL:
 *             msgText = transcode(msg)
 */
  __pyx_v_msg = __pyx_v_exc.getMessage();

  /* "arelle_cython/arelle_c/xerces.pxi":297
 *     void error(const SAXParseException& exc):
 *         cdef const XMLCh* msg = exc.getMessage()
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             msgText = transcode(msg)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":298
 *         cdef const XMLCh* msg = exc.getMessage()
 *         if msg != NULL:
 *             msgText = transcode(msg)             # <<<<<<<<<<<<<<
 *         else:
 *             msgText = "null"
 */
    __pyx_t_2 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_msg)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_msgText = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "arelle_cython/arelle_c/xerces.pxi":297
 *     void error(const SAXParseException& exc):
 *         cdef const XMLCh* msg = exc.getMessage()
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             msgText = transcode(msg)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":300
 *             msgText = transcode(msg)
 *         else:
 *             msgText = "null"             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_n_s_null);
    __pyx_v_msgText = __pyx_n_s_null;
  }
  __pyx_L3:;

  /* "arelle_cython/arelle_c/xerces.pxi":301
 *         else:
 *             msgText = "null"
 *         cdef const XMLCh* _file = exc.getSystemId()             # <<<<<<<<<<<<<<
 *         if _file != NULL:
 *             fileName = transcode(_file)
 */
  __pyx_v__file = __pyx_v_exc.getSystemId();

  /* "arelle_cython/arelle_c/xerces.pxi":302
 *             msgText = "null"
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             fileName = transcode(_file)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v__file != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":303
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:
 *             fileName = transcode(_file)             # <<<<<<<<<<<<<<
 *         else:
 *             fileName = "null"
 */
    __pyx_t_2 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v__file)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_fileName = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "arelle_cython/arelle_c/xerces.pxi":302
 *             msgText = "null"
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             fileName = transcode(_file)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":305
 *             fileName = transcode(_file)
 *         else:
 *             fileName = "null"             # <<<<<<<<<<<<<<
 *         print("error msg={} line={} col={} file={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber(),fileName))
 *     void fatalError(const SAXParseException& exc):
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_n_s_null);
    __pyx_v_fileName = __pyx_n_s_null;
  }
  __pyx_L4:;

  /* "arelle_cython/arelle_c/xerces.pxi":306
 *         else:
 *             fileName = "null"
 *         print("error msg={} line={} col={} file={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber(),fileName))             # <<<<<<<<<<<<<<
 *     void fatalError(const SAXParseException& exc):
 *         cdef const XMLCh* msg = exc.getMessage()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_error_msg_line_col_file, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_exc.getLineNumber()); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_exc.getColumnNumber()); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_v_msgText, __pyx_t_4, __pyx_t_5, __pyx_v_fileName};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 306, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_6, __pyx_v_msgText, __pyx_t_4, __pyx_t_5, __pyx_v_fileName};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 306, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_msgText);
    __Pyx_GIVEREF(__pyx_v_msgText);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_msgText);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_fileName);
    __Pyx_GIVEREF(__pyx_v_fileName);
    PyTuple_SET_ITEM(__pyx_t_8, 3+__pyx_t_7, __pyx_v_fileName);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(6, 306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":295
 *     _ErrorHandler() except +:
 *         print("_ErrorHandler initialization")
 *     void error(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* msg = exc.getMessage()
 *         if msg != NULL:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("_ErrorHandler.error", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msgText);
  __Pyx_XDECREF(__pyx_v_fileName);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":307
 *             fileName = "null"
 *         print("error msg={} line={} col={} file={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber(),fileName))
 *     void fatalError(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* msg = exc.getMessage()
 *         if msg != NULL:
 */

void __pyx_t_6arelle_8arelle_c__ErrorHandler::fatalError(xercesc::SAXParseException const &__pyx_v_exc) {
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_msg;
  PyObject *__pyx_v_msgText = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("fatalError", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":308
 *         print("error msg={} line={} col={} file={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber(),fileName))
 *     void fatalError(const SAXParseException& exc):
 *         cdef const XMLCh* msg = exc.getMessage()             # <<<<<<<<<<<<<<
 *         if msg != NULL:
 *             msgText = transcode(exc.getMessage())
 */
  __pyx_v_msg = __pyx_v_exc.getMessage();

  /* "arelle_cython/arelle_c/xerces.pxi":309
 *     void fatalError(const SAXParseException& exc):
 *         cdef const XMLCh* msg = exc.getMessage()
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             msgText = transcode(exc.getMessage())
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":310
 *         cdef const XMLCh* msg = exc.getMessage()
 *         if msg != NULL:
 *             msgText = transcode(exc.getMessage())             # <<<<<<<<<<<<<<
 *         else:
 *             msgText = "null"
 */
    __pyx_t_2 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_exc.getMessage())); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_msgText = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "arelle_cython/arelle_c/xerces.pxi":309
 *     void fatalError(const SAXParseException& exc):
 *         cdef const XMLCh* msg = exc.getMessage()
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             msgText = transcode(exc.getMessage())
 *         else:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":312
 *             msgText = transcode(exc.getMessage())
 *         else:
 *             msgText = "null"             # <<<<<<<<<<<<<<
 *         print("fatal error msg={} line={} col={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber()))
 *     void warning(const SAXParseException& exc):
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_n_s_null);
    __pyx_v_msgText = __pyx_n_s_null;
  }
  __pyx_L3:;

  /* "arelle_cython/arelle_c/xerces.pxi":313
 *         else:
 *             msgText = "null"
 *         print("fatal error msg={} line={} col={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber()))             # <<<<<<<<<<<<<<
 *     void warning(const SAXParseException& exc):
 *         print("warning")
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_fatal_error_msg_line_col, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_exc.getLineNumber()); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_exc.getColumnNumber()); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_msgText, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 313, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_msgText, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 313, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_msgText);
    __Pyx_GIVEREF(__pyx_v_msgText);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_msgText);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(6, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":307
 *             fileName = "null"
 *         print("error msg={} line={} col={} file={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber(),fileName))
 *     void fatalError(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* msg = exc.getMessage()
 *         if msg != NULL:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("_ErrorHandler.fatalError", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_msgText);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":314
 *             msgText = "null"
 *         print("fatal error msg={} line={} col={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber()))
 *     void warning(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         print("warning")
 *     void resetErrors():
 */

void __pyx_t_6arelle_8arelle_c__ErrorHandler::warning(CYTHON_UNUSED xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("warning", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":315
 *         print("fatal error msg={} line={} col={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber()))
 *     void warning(const SAXParseException& exc):
 *         print("warning")             # <<<<<<<<<<<<<<
 *     void resetErrors():
 *         print("resetErrors")
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_warning) < 0) __PYX_ERR(6, 315, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":314
 *             msgText = "null"
 *         print("fatal error msg={} line={} col={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber()))
 *     void warning(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         print("warning")
 *     void resetErrors():
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_ErrorHandler.warning", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":316
 *     void warning(const SAXParseException& exc):
 *         print("warning")
 *     void resetErrors():             # <<<<<<<<<<<<<<
 *         print("resetErrors")
 * 
 */

void __pyx_t_6arelle_8arelle_c__ErrorHandler::resetErrors(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resetErrors", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":317
 *         print("warning")
 *     void resetErrors():
 *         print("resetErrors")             # <<<<<<<<<<<<<<
 * 
 * cdef struct eltDescEntry:
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_resetErrors) < 0) __PYX_ERR(6, 317, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":316
 *     void warning(const SAXParseException& exc):
 *         print("warning")
 *     void resetErrors():             # <<<<<<<<<<<<<<
 *         print("resetErrors")
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_ErrorHandler.resetErrors", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":333
 *     void* pyRootDictPtr
 * 
 *     _LXMLSAX2Handler(void* pyRootDictPtr) except +:             # <<<<<<<<<<<<<<
 *         global EMPTYSTR
 *         print("_LXMLSAX2Handler initialization")
 */

 __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::__pyx_t_6arelle_8arelle_c__LXMLSAX2Handler(void *__pyx_v_pyRootDictPtr) {
  struct __pyx_t_6arelle_8arelle_c_eltDescEntry *__pyx_v_eltDesc;
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":335
 *     _LXMLSAX2Handler(void* pyRootDictPtr) except +:
 *         global EMPTYSTR
 *         print("_LXMLSAX2Handler initialization")             # <<<<<<<<<<<<<<
 *         #this.eltDescs = <eltDescEntry*>PyMem_Malloc(1000 * sizeof(eltDescEntry))
 *         print("size {} {}".format(sizeof(eltDescEntry), 1000 * sizeof(eltDescEntry)))
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_LXMLSAX2Handler_initialization) < 0) __PYX_ERR(6, 335, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":337
 *         print("_LXMLSAX2Handler initialization")
 *         #this.eltDescs = <eltDescEntry*>PyMem_Malloc(1000 * sizeof(eltDescEntry))
 *         print("size {} {}".format(sizeof(eltDescEntry), 1000 * sizeof(eltDescEntry)))             # <<<<<<<<<<<<<<
 *         this.eltDescs = <eltDescEntry*>malloc(1000 * sizeof(eltDescEntry))
 *         cdef eltDescEntry* eltDesc
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_size, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(struct __pyx_t_6arelle_8arelle_c_eltDescEntry))); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_FromSize_t((0x3E8 * (sizeof(struct __pyx_t_6arelle_8arelle_c_eltDescEntry)))); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 337, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 337, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":338
 *         #this.eltDescs = <eltDescEntry*>PyMem_Malloc(1000 * sizeof(eltDescEntry))
 *         print("size {} {}".format(sizeof(eltDescEntry), 1000 * sizeof(eltDescEntry)))
 *         this.eltDescs = <eltDescEntry*>malloc(1000 * sizeof(eltDescEntry))             # <<<<<<<<<<<<<<
 *         cdef eltDescEntry* eltDesc
 *         cdef int i
 */
  this->eltDescs = ((struct __pyx_t_6arelle_8arelle_c_eltDescEntry *)malloc((0x3E8 * (sizeof(struct __pyx_t_6arelle_8arelle_c_eltDescEntry)))));

  /* "arelle_cython/arelle_c/xerces.pxi":341
 *         cdef eltDescEntry* eltDesc
 *         cdef int i
 *         for i in range(1000):             # <<<<<<<<<<<<<<
 *             eltDesc = &this.eltDescs[i]
 *             eltDesc.lastElementQname = NULL
 */
  for (__pyx_t_6 = 0; __pyx_t_6 < 0x3E8; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "arelle_cython/arelle_c/xerces.pxi":342
 *         cdef int i
 *         for i in range(1000):
 *             eltDesc = &this.eltDescs[i]             # <<<<<<<<<<<<<<
 *             eltDesc.lastElementQname = NULL
 *             eltDesc.lastEltPyQname = EMPTYSTR
 */
    __pyx_v_eltDesc = (&(this->eltDescs[__pyx_v_i]));

    /* "arelle_cython/arelle_c/xerces.pxi":343
 *         for i in range(1000):
 *             eltDesc = &this.eltDescs[i]
 *             eltDesc.lastElementQname = NULL             # <<<<<<<<<<<<<<
 *             eltDesc.lastEltPyQname = EMPTYSTR
 *             eltDesc.lastChars = NULL
 */
    __pyx_v_eltDesc->lastElementQname = NULL;

    /* "arelle_cython/arelle_c/xerces.pxi":344
 *             eltDesc = &this.eltDescs[i]
 *             eltDesc.lastElementQname = NULL
 *             eltDesc.lastEltPyQname = EMPTYSTR             # <<<<<<<<<<<<<<
 *             eltDesc.lastChars = NULL
 *             eltDesc.lastLength = 0
 */
    __pyx_v_eltDesc->lastEltPyQname = __pyx_v_6arelle_8arelle_c_EMPTYSTR;

    /* "arelle_cython/arelle_c/xerces.pxi":345
 *             eltDesc.lastElementQname = NULL
 *             eltDesc.lastEltPyQname = EMPTYSTR
 *             eltDesc.lastChars = NULL             # <<<<<<<<<<<<<<
 *             eltDesc.lastLength = 0
 *         this.eltDepth = 0
 */
    __pyx_v_eltDesc->lastChars = NULL;

    /* "arelle_cython/arelle_c/xerces.pxi":346
 *             eltDesc.lastEltPyQname = EMPTYSTR
 *             eltDesc.lastChars = NULL
 *             eltDesc.lastLength = 0             # <<<<<<<<<<<<<<
 *         this.eltDepth = 0
 *         this.pyRootDictPtr = pyRootDictPtr
 */
    __pyx_v_eltDesc->lastLength = 0;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":347
 *             eltDesc.lastChars = NULL
 *             eltDesc.lastLength = 0
 *         this.eltDepth = 0             # <<<<<<<<<<<<<<
 *         this.pyRootDictPtr = pyRootDictPtr
 *         print
 */
  this->eltDepth = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":348
 *             eltDesc.lastLength = 0
 *         this.eltDepth = 0
 *         this.pyRootDictPtr = pyRootDictPtr             # <<<<<<<<<<<<<<
 *         print
 *         print("eltdescs {}".format(<unsigned long long> <void*>this.eltDescs))
 */
  this->pyRootDictPtr = __pyx_v_pyRootDictPtr;

  /* "arelle_cython/arelle_c/xerces.pxi":349
 *         this.eltDepth = 0
 *         this.pyRootDictPtr = pyRootDictPtr
 *         print             # <<<<<<<<<<<<<<
 *         print("eltdescs {}".format(<unsigned long long> <void*>this.eltDescs))
 *     close():
 */
  if (__Pyx_Print(0, __pyx_empty_tuple, 1) < 0) __PYX_ERR(6, 349, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":350
 *         this.pyRootDictPtr = pyRootDictPtr
 *         print
 *         print("eltdescs {}".format(<unsigned long long> <void*>this.eltDescs))             # <<<<<<<<<<<<<<
 *     close():
 *         print("_LXMLSAX2Handler destructor")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_eltdescs, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)((void *)this->eltDescs))); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 350, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 350, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 350, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":333
 *     void* pyRootDictPtr
 * 
 *     _LXMLSAX2Handler(void* pyRootDictPtr) except +:             # <<<<<<<<<<<<<<
 *         global EMPTYSTR
 *         print("_LXMLSAX2Handler initialization")
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_LXMLSAX2Handler.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":351
 *         print
 *         print("eltdescs {}".format(<unsigned long long> <void*>this.eltDescs))
 *     close():             # <<<<<<<<<<<<<<
 *         print("_LXMLSAX2Handler destructor")
 *         #PyMem_Free(this.lastElementQname)
 */

PyObject *__pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::close(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":352
 *         print("eltdescs {}".format(<unsigned long long> <void*>this.eltDescs))
 *     close():
 *         print("_LXMLSAX2Handler destructor")             # <<<<<<<<<<<<<<
 *         #PyMem_Free(this.lastElementQname)
 *         #this.lastElementQname = NULL
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_LXMLSAX2Handler_destructor) < 0) __PYX_ERR(6, 352, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":359
 *         #PyMem_Free(this.lastLength)
 *         #this.lastLength = NULL
 *         PyMem_Free(this.eltDescs)             # <<<<<<<<<<<<<<
 *         this.eltDescs = NULL
 *         print("_LXMLSAX2Handler done")
 */
  PyMem_Free(this->eltDescs);

  /* "arelle_cython/arelle_c/xerces.pxi":360
 *         #this.lastLength = NULL
 *         PyMem_Free(this.eltDescs)
 *         this.eltDescs = NULL             # <<<<<<<<<<<<<<
 *         print("_LXMLSAX2Handler done")
 *     # document handlers
 */
  this->eltDescs = NULL;

  /* "arelle_cython/arelle_c/xerces.pxi":361
 *         PyMem_Free(this.eltDescs)
 *         this.eltDescs = NULL
 *         print("_LXMLSAX2Handler done")             # <<<<<<<<<<<<<<
 *     # document handlers
 *     void characters(const XMLCh* chars, const XMLSize_t length):
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_LXMLSAX2Handler_done) < 0) __PYX_ERR(6, 361, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":351
 *         print
 *         print("eltdescs {}".format(<unsigned long long> <void*>this.eltDescs))
 *     close():             # <<<<<<<<<<<<<<
 *         print("_LXMLSAX2Handler destructor")
 *         #PyMem_Free(this.lastElementQname)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_LXMLSAX2Handler.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":363
 *         print("_LXMLSAX2Handler done")
 *     # document handlers
 *     void characters(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:
 *             i = length+1 + stringLen(this.eltDescs[this.eltDepth].lastChars)
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::characters(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_chars, __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const __pyx_v_length) {
  PyObject *__pyx_v_i = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("characters", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":364
 *     # document handlers
 *     void characters(const XMLCh* chars, const XMLSize_t length):
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:             # <<<<<<<<<<<<<<
 *             i = length+1 + stringLen(this.eltDescs[this.eltDepth].lastChars)
 *             #this.lastChars[this.eltDepth] = <XMLCh*>PyMem_Realloc(this.lastChars[this.eltDepth], i * sizeof(XMLCh))
 */
  __pyx_t_1 = (((this->eltDescs[this->eltDepth]).lastChars != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":365
 *     void characters(const XMLCh* chars, const XMLSize_t length):
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:
 *             i = length+1 + stringLen(this.eltDescs[this.eltDepth].lastChars)             # <<<<<<<<<<<<<<
 *             #this.lastChars[this.eltDepth] = <XMLCh*>PyMem_Realloc(this.lastChars[this.eltDepth], i * sizeof(XMLCh))
 *             this.eltDescs[this.eltDepth].lastChars = <XMLCh*>PyMem_Realloc(this.eltDescs[this.eltDepth].lastChars, i * sizeof(XMLCh))
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(((__pyx_v_length + 1) + xercesc::XMLString::stringLen((this->eltDescs[this->eltDepth]).lastChars))); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_i = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "arelle_cython/arelle_c/xerces.pxi":367
 *             i = length+1 + stringLen(this.eltDescs[this.eltDepth].lastChars)
 *             #this.lastChars[this.eltDepth] = <XMLCh*>PyMem_Realloc(this.lastChars[this.eltDepth], i * sizeof(XMLCh))
 *             this.eltDescs[this.eltDepth].lastChars = <XMLCh*>PyMem_Realloc(this.eltDescs[this.eltDepth].lastChars, i * sizeof(XMLCh))             # <<<<<<<<<<<<<<
 *             catString( this.eltDescs[this.eltDepth].lastChars, chars )
 *         else:
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh))); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_i, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(6, 367, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (this->eltDescs[this->eltDepth]).lastChars = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)PyMem_Realloc((this->eltDescs[this->eltDepth]).lastChars, __pyx_t_4));

    /* "arelle_cython/arelle_c/xerces.pxi":368
 *             #this.lastChars[this.eltDepth] = <XMLCh*>PyMem_Realloc(this.lastChars[this.eltDepth], i * sizeof(XMLCh))
 *             this.eltDescs[this.eltDepth].lastChars = <XMLCh*>PyMem_Realloc(this.eltDescs[this.eltDepth].lastChars, i * sizeof(XMLCh))
 *             catString( this.eltDescs[this.eltDepth].lastChars, chars )             # <<<<<<<<<<<<<<
 *         else:
 *             this.eltDescs[this.eltDepth].lastChars = <XMLCh*>PyMem_Malloc((length+1) * sizeof(XMLCh))
 */
    xercesc::XMLString::catString((this->eltDescs[this->eltDepth]).lastChars, __pyx_v_chars);

    /* "arelle_cython/arelle_c/xerces.pxi":364
 *     # document handlers
 *     void characters(const XMLCh* chars, const XMLSize_t length):
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:             # <<<<<<<<<<<<<<
 *             i = length+1 + stringLen(this.eltDescs[this.eltDepth].lastChars)
 *             #this.lastChars[this.eltDepth] = <XMLCh*>PyMem_Realloc(this.lastChars[this.eltDepth], i * sizeof(XMLCh))
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":370
 *             catString( this.eltDescs[this.eltDepth].lastChars, chars )
 *         else:
 *             this.eltDescs[this.eltDepth].lastChars = <XMLCh*>PyMem_Malloc((length+1) * sizeof(XMLCh))             # <<<<<<<<<<<<<<
 *             copyString(this.eltDescs[this.eltDepth].lastChars, chars)
 *         pass #print("characters len: {} value: {}".format(length, transcode(chars))) #transcode(chars) if chars is not NULL else "null"))
 */
  /*else*/ {
    (this->eltDescs[this->eltDepth]).lastChars = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)PyMem_Malloc(((__pyx_v_length + 1) * (sizeof(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh)))));

    /* "arelle_cython/arelle_c/xerces.pxi":371
 *         else:
 *             this.eltDescs[this.eltDepth].lastChars = <XMLCh*>PyMem_Malloc((length+1) * sizeof(XMLCh))
 *             copyString(this.eltDescs[this.eltDepth].lastChars, chars)             # <<<<<<<<<<<<<<
 *         pass #print("characters len: {} value: {}".format(length, transcode(chars))) #transcode(chars) if chars is not NULL else "null"))
 *     void endDocument():
 */
    xercesc::XMLString::copyString((this->eltDescs[this->eltDepth]).lastChars, __pyx_v_chars);
  }
  __pyx_L3:;

  /* "arelle_cython/arelle_c/xerces.pxi":363
 *         print("_LXMLSAX2Handler done")
 *     # document handlers
 *     void characters(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:
 *             i = length+1 + stringLen(this.eltDescs[this.eltDepth].lastChars)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("_LXMLSAX2Handler.characters", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":373
 *             copyString(this.eltDescs[this.eltDepth].lastChars, chars)
 *         pass #print("characters len: {} value: {}".format(length, transcode(chars))) #transcode(chars) if chars is not NULL else "null"))
 *     void endDocument():             # <<<<<<<<<<<<<<
 *         pass #print("endDocument")
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::endDocument(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endDocument", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":375
 *     void endDocument():
 *         pass #print("endDocument")
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):             # <<<<<<<<<<<<<<
 *         cdef XMLCh* _uri
 *         cdef XMLCh* _localname
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::endElement(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_uri, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_localname, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_qname) {
  char *__pyx_v__text;
  PyObject *__pyx_v_pyRootDict = 0;
  struct __pyx_t_6arelle_8arelle_c_eltDescEntry *__pyx_v_eltDesc;
  unsigned int __pyx_v_i;
  PyObject *__pyx_v_pyDepthDict = NULL;
  char *__pyx_v__depthPyQName;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  char *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("endElement", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":383
 *         cdef eltDescEntry* eltDesc
 *         cdef unsigned int i
 *         eltDesc = &this.eltDescs[this.eltDepth]             # <<<<<<<<<<<<<<
 *         pyRootDict = <object>this.pyRootDictPtr
 *         pyDepthDict = pyRootDict
 */
  __pyx_v_eltDesc = (&(this->eltDescs[this->eltDepth]));

  /* "arelle_cython/arelle_c/xerces.pxi":384
 *         cdef unsigned int i
 *         eltDesc = &this.eltDescs[this.eltDepth]
 *         pyRootDict = <object>this.pyRootDictPtr             # <<<<<<<<<<<<<<
 *         pyDepthDict = pyRootDict
 *         for i from 1 <= i <= this.eltDepth:
 */
  __pyx_t_1 = ((PyObject *)this->pyRootDictPtr);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_pyRootDict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":385
 *         eltDesc = &this.eltDescs[this.eltDepth]
 *         pyRootDict = <object>this.pyRootDictPtr
 *         pyDepthDict = pyRootDict             # <<<<<<<<<<<<<<
 *         for i from 1 <= i <= this.eltDepth:
 *             _depthPyQName = this.eltDescs[i].lastEltPyQname
 */
  __Pyx_INCREF(__pyx_v_pyRootDict);
  __pyx_v_pyDepthDict = __pyx_v_pyRootDict;

  /* "arelle_cython/arelle_c/xerces.pxi":386
 *         pyRootDict = <object>this.pyRootDictPtr
 *         pyDepthDict = pyRootDict
 *         for i from 1 <= i <= this.eltDepth:             # <<<<<<<<<<<<<<
 *             _depthPyQName = this.eltDescs[i].lastEltPyQname
 *             pyDepthDict = pyDepthDict[_depthPyQName]
 */
  __pyx_t_2 = this->eltDepth;
  for (__pyx_v_i = 1; __pyx_v_i <= __pyx_t_2; __pyx_v_i++) {

    /* "arelle_cython/arelle_c/xerces.pxi":387
 *         pyDepthDict = pyRootDict
 *         for i from 1 <= i <= this.eltDepth:
 *             _depthPyQName = this.eltDescs[i].lastEltPyQname             # <<<<<<<<<<<<<<
 *             pyDepthDict = pyDepthDict[_depthPyQName]
 *         eltDesc.lastElementQname = NULL
 */
    __pyx_t_3 = (this->eltDescs[__pyx_v_i]).lastEltPyQname;
    __pyx_v__depthPyQName = __pyx_t_3;

    /* "arelle_cython/arelle_c/xerces.pxi":388
 *         for i from 1 <= i <= this.eltDepth:
 *             _depthPyQName = this.eltDescs[i].lastEltPyQname
 *             pyDepthDict = pyDepthDict[_depthPyQName]             # <<<<<<<<<<<<<<
 *         eltDesc.lastElementQname = NULL
 *         if eltDesc.lastChars != NULL:
 */
    __pyx_t_1 = __Pyx_PyUnicode_FromString(__pyx_v__depthPyQName); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_GetItem(__pyx_v_pyDepthDict, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 388, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_pyDepthDict, __pyx_t_4);
    __pyx_t_4 = 0;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":389
 *             _depthPyQName = this.eltDescs[i].lastEltPyQname
 *             pyDepthDict = pyDepthDict[_depthPyQName]
 *         eltDesc.lastElementQname = NULL             # <<<<<<<<<<<<<<
 *         if eltDesc.lastChars != NULL:
 *             _text = transcode(eltDesc.lastChars)
 */
  __pyx_v_eltDesc->lastElementQname = NULL;

  /* "arelle_cython/arelle_c/xerces.pxi":390
 *             pyDepthDict = pyDepthDict[_depthPyQName]
 *         eltDesc.lastElementQname = NULL
 *         if eltDesc.lastChars != NULL:             # <<<<<<<<<<<<<<
 *             _text = transcode(eltDesc.lastChars)
 *             pyDepthDict[b"@text"] = _text
 */
  __pyx_t_5 = ((__pyx_v_eltDesc->lastChars != NULL) != 0);
  if (__pyx_t_5) {

    /* "arelle_cython/arelle_c/xerces.pxi":391
 *         eltDesc.lastElementQname = NULL
 *         if eltDesc.lastChars != NULL:
 *             _text = transcode(eltDesc.lastChars)             # <<<<<<<<<<<<<<
 *             pyDepthDict[b"@text"] = _text
 *             release(&_text)
 */
    __pyx_v__text = xercesc::XMLString::transcode(__pyx_v_eltDesc->lastChars);

    /* "arelle_cython/arelle_c/xerces.pxi":392
 *         if eltDesc.lastChars != NULL:
 *             _text = transcode(eltDesc.lastChars)
 *             pyDepthDict[b"@text"] = _text             # <<<<<<<<<<<<<<
 *             release(&_text)
 *             PyMem_Free(eltDesc.lastChars)
 */
    __pyx_t_4 = __Pyx_PyUnicode_FromString(__pyx_v__text); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PyObject_SetItem(__pyx_v_pyDepthDict, __pyx_kp_b_text, __pyx_t_4) < 0)) __PYX_ERR(6, 392, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "arelle_cython/arelle_c/xerces.pxi":393
 *             _text = transcode(eltDesc.lastChars)
 *             pyDepthDict[b"@text"] = _text
 *             release(&_text)             # <<<<<<<<<<<<<<
 *             PyMem_Free(eltDesc.lastChars)
 *         eltDesc.lastChars = NULL
 */
    xercesc::XMLString::release((&__pyx_v__text));

    /* "arelle_cython/arelle_c/xerces.pxi":394
 *             pyDepthDict[b"@text"] = _text
 *             release(&_text)
 *             PyMem_Free(eltDesc.lastChars)             # <<<<<<<<<<<<<<
 *         eltDesc.lastChars = NULL
 *         eltDesc.lastLength = 0
 */
    PyMem_Free(__pyx_v_eltDesc->lastChars);

    /* "arelle_cython/arelle_c/xerces.pxi":390
 *             pyDepthDict = pyDepthDict[_depthPyQName]
 *         eltDesc.lastElementQname = NULL
 *         if eltDesc.lastChars != NULL:             # <<<<<<<<<<<<<<
 *             _text = transcode(eltDesc.lastChars)
 *             pyDepthDict[b"@text"] = _text
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":395
 *             release(&_text)
 *             PyMem_Free(eltDesc.lastChars)
 *         eltDesc.lastChars = NULL             # <<<<<<<<<<<<<<
 *         eltDesc.lastLength = 0
 *         release(&eltDesc.lastEltPyQname)
 */
  __pyx_v_eltDesc->lastChars = NULL;

  /* "arelle_cython/arelle_c/xerces.pxi":396
 *             PyMem_Free(eltDesc.lastChars)
 *         eltDesc.lastChars = NULL
 *         eltDesc.lastLength = 0             # <<<<<<<<<<<<<<
 *         release(&eltDesc.lastEltPyQname)
 *         eltDesc.lastEltPyQname = EMPTYSTR
 */
  __pyx_v_eltDesc->lastLength = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":397
 *         eltDesc.lastChars = NULL
 *         eltDesc.lastLength = 0
 *         release(&eltDesc.lastEltPyQname)             # <<<<<<<<<<<<<<
 *         eltDesc.lastEltPyQname = EMPTYSTR
 *         this.eltDepth -= 1
 */
  xercesc::XMLString::release((&__pyx_v_eltDesc->lastEltPyQname));

  /* "arelle_cython/arelle_c/xerces.pxi":398
 *         eltDesc.lastLength = 0
 *         release(&eltDesc.lastEltPyQname)
 *         eltDesc.lastEltPyQname = EMPTYSTR             # <<<<<<<<<<<<<<
 *         this.eltDepth -= 1
 * 
 */
  __pyx_v_eltDesc->lastEltPyQname = __pyx_v_6arelle_8arelle_c_EMPTYSTR;

  /* "arelle_cython/arelle_c/xerces.pxi":399
 *         release(&eltDesc.lastEltPyQname)
 *         eltDesc.lastEltPyQname = EMPTYSTR
 *         this.eltDepth -= 1             # <<<<<<<<<<<<<<
 * 
 *         #print("endElement uri:  localname: {} qname: {}".format(#transcode(_uri) if _uri != NULL else "null",
 */
  this->eltDepth = (this->eltDepth - 1);

  /* "arelle_cython/arelle_c/xerces.pxi":375
 *     void endDocument():
 *         pass #print("endDocument")
 *     void endElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname):             # <<<<<<<<<<<<<<
 *         cdef XMLCh* _uri
 *         cdef XMLCh* _localname
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("_LXMLSAX2Handler.endElement", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyRootDict);
  __Pyx_XDECREF(__pyx_v_pyDepthDict);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":404
 *         #                                                          transcode(_localname) if _localname != NULL else "null",
 *         #                                                          transcode(_qname) if _qname != NULL else "null"))
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         pass #print("ignorableWhitespace")
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::ignorableWhitespace(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_chars, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const __pyx_v_length) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ignorableWhitespace", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":406
 *     void ignorableWhitespace(const XMLCh* chars, const XMLSize_t length):
 *         pass #print("ignorableWhitespace")
 *     void processingInstruction(const XMLCh* target, const XMLCh* data):             # <<<<<<<<<<<<<<
 *         pass #print("processingInstruction target: {} data: {}".format(transcode(target) if target is not NULL else "null",
 *         #                                                         transcode(data) if data is not NULL else "null"))
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::processingInstruction(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_target, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_data) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("processingInstruction", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":409
 *         pass #print("processingInstruction target: {} data: {}".format(transcode(target) if target is not NULL else "null",
 *         #                                                         transcode(data) if data is not NULL else "null"))
 *     void setDocumentLocator(const Locator* const locator):             # <<<<<<<<<<<<<<
 *         pass #print("setDocumentLocator pubId: {} sysId: {} ".format(transcode(locator.getPublicId()) if locator.getPublicId() is not NULL else "null",
 *         #                                               transcode(locator.getSystemId()) if locator.getSystemId() is not NULL else "null"))
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::setDocumentLocator(CYTHON_UNUSED xercesc::Locator const *const __pyx_v_locator) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDocumentLocator", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":412
 *         pass #print("setDocumentLocator pubId: {} sysId: {} ".format(transcode(locator.getPublicId()) if locator.getPublicId() is not NULL else "null",
 *         #                                               transcode(locator.getSystemId()) if locator.getSystemId() is not NULL else "null"))
 *     void startDocument():             # <<<<<<<<<<<<<<
 *         pass #print("startDocument")
 *         #print("classVar {}".format(this.classVar))
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::startDocument(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startDocument", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":415
 *         pass #print("startDocument")
 *         #print("classVar {}".format(this.classVar))
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):             # <<<<<<<<<<<<<<
 *         cdef XMLCh* _uri
 *         cdef XMLCh* _localname
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::startElement(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_uri, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_localname, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_qname, CYTHON_UNUSED xercesc::Attributes const &__pyx_v_attrs) {
  CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v__uri;
  CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v__localname;
  PyObject *__pyx_v_pyDepthDict = 0;
  struct __pyx_t_6arelle_8arelle_c_eltDescEntry *__pyx_v_eltDesc;
  PyObject *__pyx_v_pyRootDict = 0;
  unsigned int __pyx_v_i;
  char *__pyx_v__depthPyQName;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  unsigned int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("startElement", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":424
 *         cdef unsigned int i
 *         cpdef char* _depthPyQName
 *         _uri = <XMLCh*>uri             # <<<<<<<<<<<<<<
 *         _localname = <XMLCh*>localname
 *         this.eltDepth += 1
 */
  __pyx_v__uri = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_uri);

  /* "arelle_cython/arelle_c/xerces.pxi":425
 *         cpdef char* _depthPyQName
 *         _uri = <XMLCh*>uri
 *         _localname = <XMLCh*>localname             # <<<<<<<<<<<<<<
 *         this.eltDepth += 1
 *         eltDesc = &this.eltDescs[this.eltDepth]
 */
  __pyx_v__localname = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_localname);

  /* "arelle_cython/arelle_c/xerces.pxi":426
 *         _uri = <XMLCh*>uri
 *         _localname = <XMLCh*>localname
 *         this.eltDepth += 1             # <<<<<<<<<<<<<<
 *         eltDesc = &this.eltDescs[this.eltDepth]
 *         eltDesc.lastElementQname = <XMLCh*>qname
 */
  this->eltDepth = (this->eltDepth + 1);

  /* "arelle_cython/arelle_c/xerces.pxi":427
 *         _localname = <XMLCh*>localname
 *         this.eltDepth += 1
 *         eltDesc = &this.eltDescs[this.eltDepth]             # <<<<<<<<<<<<<<
 *         eltDesc.lastElementQname = <XMLCh*>qname
 *         eltDesc.lastEltPyQname = transcode(qname)
 */
  __pyx_v_eltDesc = (&(this->eltDescs[this->eltDepth]));

  /* "arelle_cython/arelle_c/xerces.pxi":428
 *         this.eltDepth += 1
 *         eltDesc = &this.eltDescs[this.eltDepth]
 *         eltDesc.lastElementQname = <XMLCh*>qname             # <<<<<<<<<<<<<<
 *         eltDesc.lastEltPyQname = transcode(qname)
 *         eltDesc.lastChars = NULL
 */
  __pyx_v_eltDesc->lastElementQname = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_qname);

  /* "arelle_cython/arelle_c/xerces.pxi":429
 *         eltDesc = &this.eltDescs[this.eltDepth]
 *         eltDesc.lastElementQname = <XMLCh*>qname
 *         eltDesc.lastEltPyQname = transcode(qname)             # <<<<<<<<<<<<<<
 *         eltDesc.lastChars = NULL
 *         _depthPyQName = this.eltDescs[this.eltDepth].lastEltPyQname
 */
  __pyx_v_eltDesc->lastEltPyQname = xercesc::XMLString::transcode(__pyx_v_qname);

  /* "arelle_cython/arelle_c/xerces.pxi":430
 *         eltDesc.lastElementQname = <XMLCh*>qname
 *         eltDesc.lastEltPyQname = transcode(qname)
 *         eltDesc.lastChars = NULL             # <<<<<<<<<<<<<<
 *         _depthPyQName = this.eltDescs[this.eltDepth].lastEltPyQname
 *         #print("eltDepth1qn {}".format(_depthPyQName))
 */
  __pyx_v_eltDesc->lastChars = NULL;

  /* "arelle_cython/arelle_c/xerces.pxi":431
 *         eltDesc.lastEltPyQname = transcode(qname)
 *         eltDesc.lastChars = NULL
 *         _depthPyQName = this.eltDescs[this.eltDepth].lastEltPyQname             # <<<<<<<<<<<<<<
 *         #print("eltDepth1qn {}".format(_depthPyQName))
 *         #this.lastElementAttrs = attrs
 */
  __pyx_t_1 = (this->eltDescs[this->eltDepth]).lastEltPyQname;
  __pyx_v__depthPyQName = __pyx_t_1;

  /* "arelle_cython/arelle_c/xerces.pxi":439
 *         #    transcode(_localname) if _localname is not NULL else "null",
 *         #    transcode(_qname) if _qname is not NULL else "null"))
 *         pyRootDict = <object>this.pyRootDictPtr             # <<<<<<<<<<<<<<
 *         pyDepthDict = pyRootDict
 *         #print("trace 14c 0 {}".format(this.eltDescs[0].lastLength))
 */
  __pyx_t_2 = ((PyObject *)this->pyRootDictPtr);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pyRootDict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":440
 *         #    transcode(_qname) if _qname is not NULL else "null"))
 *         pyRootDict = <object>this.pyRootDictPtr
 *         pyDepthDict = pyRootDict             # <<<<<<<<<<<<<<
 *         #print("trace 14c 0 {}".format(this.eltDescs[0].lastLength))
 *         #print("trace 14c 1 {}".format(this.eltDescs[1].lastLength))
 */
  __Pyx_INCREF(__pyx_v_pyRootDict);
  __pyx_v_pyDepthDict = __pyx_v_pyRootDict;

  /* "arelle_cython/arelle_c/xerces.pxi":443
 *         #print("trace 14c 0 {}".format(this.eltDescs[0].lastLength))
 *         #print("trace 14c 1 {}".format(this.eltDescs[1].lastLength))
 *         for i from 1 <= i <= this.eltDepth:             # <<<<<<<<<<<<<<
 *             eltDesc = &this.eltDescs[i]
 *             _depthPyQName = eltDesc.lastEltPyQname
 */
  __pyx_t_3 = this->eltDepth;
  for (__pyx_v_i = 1; __pyx_v_i <= __pyx_t_3; __pyx_v_i++) {

    /* "arelle_cython/arelle_c/xerces.pxi":444
 *         #print("trace 14c 1 {}".format(this.eltDescs[1].lastLength))
 *         for i from 1 <= i <= this.eltDepth:
 *             eltDesc = &this.eltDescs[i]             # <<<<<<<<<<<<<<
 *             _depthPyQName = eltDesc.lastEltPyQname
 *             if _depthPyQName not in pyDepthDict:
 */
    __pyx_v_eltDesc = (&(this->eltDescs[__pyx_v_i]));

    /* "arelle_cython/arelle_c/xerces.pxi":445
 *         for i from 1 <= i <= this.eltDepth:
 *             eltDesc = &this.eltDescs[i]
 *             _depthPyQName = eltDesc.lastEltPyQname             # <<<<<<<<<<<<<<
 *             if _depthPyQName not in pyDepthDict:
 *                 pyDepthDict[_depthPyQName] = OrderedDict()
 */
    __pyx_t_1 = __pyx_v_eltDesc->lastEltPyQname;
    __pyx_v__depthPyQName = __pyx_t_1;

    /* "arelle_cython/arelle_c/xerces.pxi":446
 *             eltDesc = &this.eltDescs[i]
 *             _depthPyQName = eltDesc.lastEltPyQname
 *             if _depthPyQName not in pyDepthDict:             # <<<<<<<<<<<<<<
 *                 pyDepthDict[_depthPyQName] = OrderedDict()
 *             pyDepthDict = pyDepthDict[_depthPyQName]
 */
    __pyx_t_2 = __Pyx_PyUnicode_FromString(__pyx_v__depthPyQName); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_v_pyDepthDict, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(6, 446, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "arelle_cython/arelle_c/xerces.pxi":447
 *             _depthPyQName = eltDesc.lastEltPyQname
 *             if _depthPyQName not in pyDepthDict:
 *                 pyDepthDict[_depthPyQName] = OrderedDict()             # <<<<<<<<<<<<<<
 *             pyDepthDict = pyDepthDict[_depthPyQName]
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (__pyx_t_7) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 447, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 447, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyUnicode_FromString(__pyx_v__depthPyQName); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(PyObject_SetItem(__pyx_v_pyDepthDict, __pyx_t_6, __pyx_t_2) < 0)) __PYX_ERR(6, 447, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "arelle_cython/arelle_c/xerces.pxi":446
 *             eltDesc = &this.eltDescs[i]
 *             _depthPyQName = eltDesc.lastEltPyQname
 *             if _depthPyQName not in pyDepthDict:             # <<<<<<<<<<<<<<
 *                 pyDepthDict[_depthPyQName] = OrderedDict()
 *             pyDepthDict = pyDepthDict[_depthPyQName]
 */
    }

    /* "arelle_cython/arelle_c/xerces.pxi":448
 *             if _depthPyQName not in pyDepthDict:
 *                 pyDepthDict[_depthPyQName] = OrderedDict()
 *             pyDepthDict = pyDepthDict[_depthPyQName]             # <<<<<<<<<<<<<<
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         pass #print("startPrefixMapping prefix: {} uri: {}".format(transcode(prefix),transcode(uri)))
 */
    __pyx_t_2 = __Pyx_PyUnicode_FromString(__pyx_v__depthPyQName); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(__pyx_v_pyDepthDict, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_pyDepthDict, __pyx_t_6);
    __pyx_t_6 = 0;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":415
 *         pass #print("startDocument")
 *         #print("classVar {}".format(this.classVar))
 *     void startElement(const XMLCh* uri, const XMLCh* localname, const XMLCh* qname, const Attributes& attrs):             # <<<<<<<<<<<<<<
 *         cdef XMLCh* _uri
 *         cdef XMLCh* _localname
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("_LXMLSAX2Handler.startElement", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyDepthDict);
  __Pyx_XDECREF(__pyx_v_pyRootDict);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":449
 *                 pyDepthDict[_depthPyQName] = OrderedDict()
 *             pyDepthDict = pyDepthDict[_depthPyQName]
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):             # <<<<<<<<<<<<<<
 *         pass #print("startPrefixMapping prefix: {} uri: {}".format(transcode(prefix),transcode(uri)))
 *     void endPrefixMapping(const XMLCh* prefix):
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::startPrefixMapping(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_prefix, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_uri) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startPrefixMapping", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":451
 *     void startPrefixMapping(const XMLCh* prefix, const XMLCh* uri):
 *         pass #print("startPrefixMapping prefix: {} uri: {}".format(transcode(prefix),transcode(uri)))
 *     void endPrefixMapping(const XMLCh* prefix):             # <<<<<<<<<<<<<<
 *         pass #print("endPrefixMapping prefix: {}".format(transcode(prefix)))
 *     void skippedEntity(const XMLCh* name):
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::endPrefixMapping(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_prefix) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endPrefixMapping", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":453
 *     void endPrefixMapping(const XMLCh* prefix):
 *         pass #print("endPrefixMapping prefix: {}".format(transcode(prefix)))
 *     void skippedEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         pass #print("skippedEntity: {}".format(transcode(name)))    # lexical handlers
 *     void comment(const XMLCh* chars, const XMLSize_t length):
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::skippedEntity(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skippedEntity", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":455
 *     void skippedEntity(const XMLCh* name):
 *         pass #print("skippedEntity: {}".format(transcode(name)))    # lexical handlers
 *     void comment(const XMLCh* chars, const XMLSize_t length):             # <<<<<<<<<<<<<<
 *         pass #print("comment {}".format(transcode(chars) if chars is not NULL else "null"))
 *     void endCDATA():
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::comment(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_chars, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t const __pyx_v_length) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("comment", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":457
 *     void comment(const XMLCh* chars, const XMLSize_t length):
 *         pass #print("comment {}".format(transcode(chars) if chars is not NULL else "null"))
 *     void endCDATA():             # <<<<<<<<<<<<<<
 *         pass #print("endCDATA")
 *     void endDTD():
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::endCDATA(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endCDATA", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":459
 *     void endCDATA():
 *         pass #print("endCDATA")
 *     void endDTD():             # <<<<<<<<<<<<<<
 *         pass #print("endDTD")
 *     void endEntity(const XMLCh* name):
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::endDTD(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endDTD", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":461
 *     void endDTD():
 *         pass #print("endDTD")
 *     void endEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         pass #print("endEntity name: {}".format(transcode(name)))
 *     void startCDATA():
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::endEntity(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endEntity", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":463
 *     void endEntity(const XMLCh* name):
 *         pass #print("endEntity name: {}".format(transcode(name)))
 *     void startCDATA():             # <<<<<<<<<<<<<<
 *         pass #print("startCDATA")
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::startCDATA(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startCDATA", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":465
 *     void startCDATA():
 *         pass #print("startCDATA")
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):             # <<<<<<<<<<<<<<
 *         pass #print("startDTD")
 *     void startEntity(const XMLCh* name):
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::startDTD(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_publicId, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_systemId) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startDTD", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":467
 *     void startDTD(const XMLCh* name, const XMLCh* publicId, const XMLCh* systemId):
 *         pass #print("startDTD")
 *     void startEntity(const XMLCh* name):             # <<<<<<<<<<<<<<
 *         pass #print("startEntity")
 *     void elementDecl(const XMLCh* name, const XMLCh* model):
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::startEntity(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("startEntity", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":469
 *     void startEntity(const XMLCh* name):
 *         pass #print("startEntity")
 *     void elementDecl(const XMLCh* name, const XMLCh* model):             # <<<<<<<<<<<<<<
 *         pass #print("elementDecl")
 *     # error handlers
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::elementDecl(CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_name, CYTHON_UNUSED __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_model) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("elementDecl", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":472
 *         pass #print("elementDecl")
 *     # error handlers
 *     void error(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* msg = exc.getMessage()
 *         cdef char* msgText
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::error(xercesc::SAXParseException const &__pyx_v_exc) {
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_msg;
  char *__pyx_v_msgText;
  char *__pyx_v_fileName;
  char *__pyx_v_eltQn;
  char *__pyx_v_eltVal;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v__file;
  PyObject *__pyx_v__msg = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("error", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":473
 *     # error handlers
 *     void error(const SAXParseException& exc):
 *         cdef const XMLCh* msg = exc.getMessage()             # <<<<<<<<<<<<<<
 *         cdef char* msgText
 *         cdef char* fileName
 */
  __pyx_v_msg = __pyx_v_exc.getMessage();

  /* "arelle_cython/arelle_c/xerces.pxi":478
 *         cdef char* eltQn
 *         cdef char* eltVal
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             msgText = transcode(msg)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":479
 *         cdef char* eltVal
 *         if msg != NULL:
 *             msgText = transcode(msg)             # <<<<<<<<<<<<<<
 *         else:
 *             msgText = b"null"
 */
    __pyx_v_msgText = xercesc::XMLString::transcode(__pyx_v_msg);

    /* "arelle_cython/arelle_c/xerces.pxi":478
 *         cdef char* eltQn
 *         cdef char* eltVal
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             msgText = transcode(msg)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":481
 *             msgText = transcode(msg)
 *         else:
 *             msgText = b"null"             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:
 */
  /*else*/ {
    __pyx_v_msgText = ((char *)"null");
  }
  __pyx_L3:;

  /* "arelle_cython/arelle_c/xerces.pxi":482
 *         else:
 *             msgText = b"null"
 *         cdef const XMLCh* _file = exc.getSystemId()             # <<<<<<<<<<<<<<
 *         if _file != NULL:
 *             fileName = transcode(_file)
 */
  __pyx_v__file = __pyx_v_exc.getSystemId();

  /* "arelle_cython/arelle_c/xerces.pxi":483
 *             msgText = b"null"
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             fileName = transcode(_file)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v__file != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":484
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:
 *             fileName = transcode(_file)             # <<<<<<<<<<<<<<
 *         else:
 *             fileName = b"null"
 */
    __pyx_v_fileName = xercesc::XMLString::transcode(__pyx_v__file);

    /* "arelle_cython/arelle_c/xerces.pxi":483
 *             msgText = b"null"
 *         cdef const XMLCh* _file = exc.getSystemId()
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             fileName = transcode(_file)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":486
 *             fileName = transcode(_file)
 *         else:
 *             fileName = b"null"             # <<<<<<<<<<<<<<
 *         if this.eltDescs[this.eltDepth].lastElementQname != NULL:
 *             eltQn = transcode(this.eltDescs[this.eltDepth].lastElementQname)
 */
  /*else*/ {
    __pyx_v_fileName = ((char *)"null");
  }
  __pyx_L4:;

  /* "arelle_cython/arelle_c/xerces.pxi":487
 *         else:
 *             fileName = b"null"
 *         if this.eltDescs[this.eltDepth].lastElementQname != NULL:             # <<<<<<<<<<<<<<
 *             eltQn = transcode(this.eltDescs[this.eltDepth].lastElementQname)
 *         else:
 */
  __pyx_t_1 = (((this->eltDescs[this->eltDepth]).lastElementQname != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":488
 *             fileName = b"null"
 *         if this.eltDescs[this.eltDepth].lastElementQname != NULL:
 *             eltQn = transcode(this.eltDescs[this.eltDepth].lastElementQname)             # <<<<<<<<<<<<<<
 *         else:
 *             eltQn = b""
 */
    __pyx_v_eltQn = xercesc::XMLString::transcode((this->eltDescs[this->eltDepth]).lastElementQname);

    /* "arelle_cython/arelle_c/xerces.pxi":487
 *         else:
 *             fileName = b"null"
 *         if this.eltDescs[this.eltDepth].lastElementQname != NULL:             # <<<<<<<<<<<<<<
 *             eltQn = transcode(this.eltDescs[this.eltDepth].lastElementQname)
 *         else:
 */
    goto __pyx_L5;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":490
 *             eltQn = transcode(this.eltDescs[this.eltDepth].lastElementQname)
 *         else:
 *             eltQn = b""             # <<<<<<<<<<<<<<
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:
 *             eltVal = transcode(this.eltDescs[this.eltDepth].lastChars)
 */
  /*else*/ {
    __pyx_v_eltQn = ((char *)"");
  }
  __pyx_L5:;

  /* "arelle_cython/arelle_c/xerces.pxi":491
 *         else:
 *             eltQn = b""
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:             # <<<<<<<<<<<<<<
 *             eltVal = transcode(this.eltDescs[this.eltDepth].lastChars)
 *         else:
 */
  __pyx_t_1 = (((this->eltDescs[this->eltDepth]).lastChars != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":492
 *             eltQn = b""
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:
 *             eltVal = transcode(this.eltDescs[this.eltDepth].lastChars)             # <<<<<<<<<<<<<<
 *         else:
 *             eltVal = b""
 */
    __pyx_v_eltVal = xercesc::XMLString::transcode((this->eltDescs[this->eltDepth]).lastChars);

    /* "arelle_cython/arelle_c/xerces.pxi":491
 *         else:
 *             eltQn = b""
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:             # <<<<<<<<<<<<<<
 *             eltVal = transcode(this.eltDescs[this.eltDepth].lastChars)
 *         else:
 */
    goto __pyx_L6;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":494
 *             eltVal = transcode(this.eltDescs[this.eltDepth].lastChars)
 *         else:
 *             eltVal = b""             # <<<<<<<<<<<<<<
 *         _msg = "error msg={} line={} col={} file={} elt={} val={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber(),fileName,eltQn,eltVal)
 *         print(_msg)
 */
  /*else*/ {
    __pyx_v_eltVal = ((char *)"");
  }
  __pyx_L6:;

  /* "arelle_cython/arelle_c/xerces.pxi":495
 *         else:
 *             eltVal = b""
 *         _msg = "error msg={} line={} col={} file={} elt={} val={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber(),fileName,eltQn,eltVal)             # <<<<<<<<<<<<<<
 *         print(_msg)
 *         if msg != NULL:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_error_msg_line_col_file_elt_val, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyUnicode_FromString(__pyx_v_msgText); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_exc.getLineNumber()); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_exc.getColumnNumber()); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyUnicode_FromString(__pyx_v_fileName); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyUnicode_FromString(__pyx_v_eltQn); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyUnicode_FromString(__pyx_v_eltVal); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_11 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[7] = {__pyx_t_10, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_11, 6+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 495, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[7] = {__pyx_t_10, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_11, 6+__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 495, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_12 = PyTuple_New(6+__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(6, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_12, 2+__pyx_t_11, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_12, 3+__pyx_t_11, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_12, 4+__pyx_t_11, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_12, 5+__pyx_t_11, __pyx_t_9);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v__msg = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":496
 *             eltVal = b""
 *         _msg = "error msg={} line={} col={} file={} elt={} val={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber(),fileName,eltQn,eltVal)
 *         print(_msg)             # <<<<<<<<<<<<<<
 *         if msg != NULL:
 *             release(&msgText)
 */
  if (__Pyx_PrintOne(0, __pyx_v__msg) < 0) __PYX_ERR(6, 496, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":497
 *         _msg = "error msg={} line={} col={} file={} elt={} val={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber(),fileName,eltQn,eltVal)
 *         print(_msg)
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             release(&msgText)
 *         if _file != NULL:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":498
 *         print(_msg)
 *         if msg != NULL:
 *             release(&msgText)             # <<<<<<<<<<<<<<
 *         if _file != NULL:
 *             release(&fileName)
 */
    xercesc::XMLString::release((&__pyx_v_msgText));

    /* "arelle_cython/arelle_c/xerces.pxi":497
 *         _msg = "error msg={} line={} col={} file={} elt={} val={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber(),fileName,eltQn,eltVal)
 *         print(_msg)
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             release(&msgText)
 *         if _file != NULL:
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":499
 *         if msg != NULL:
 *             release(&msgText)
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             release(&fileName)
 *         if this.eltDescs[this.eltDepth].lastElementQname != NULL:
 */
  __pyx_t_1 = ((__pyx_v__file != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":500
 *             release(&msgText)
 *         if _file != NULL:
 *             release(&fileName)             # <<<<<<<<<<<<<<
 *         if this.eltDescs[this.eltDepth].lastElementQname != NULL:
 *             release(&eltQn)
 */
    xercesc::XMLString::release((&__pyx_v_fileName));

    /* "arelle_cython/arelle_c/xerces.pxi":499
 *         if msg != NULL:
 *             release(&msgText)
 *         if _file != NULL:             # <<<<<<<<<<<<<<
 *             release(&fileName)
 *         if this.eltDescs[this.eltDepth].lastElementQname != NULL:
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":501
 *         if _file != NULL:
 *             release(&fileName)
 *         if this.eltDescs[this.eltDepth].lastElementQname != NULL:             # <<<<<<<<<<<<<<
 *             release(&eltQn)
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:
 */
  __pyx_t_1 = (((this->eltDescs[this->eltDepth]).lastElementQname != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":502
 *             release(&fileName)
 *         if this.eltDescs[this.eltDepth].lastElementQname != NULL:
 *             release(&eltQn)             # <<<<<<<<<<<<<<
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:
 *             release(&eltVal)
 */
    xercesc::XMLString::release((&__pyx_v_eltQn));

    /* "arelle_cython/arelle_c/xerces.pxi":501
 *         if _file != NULL:
 *             release(&fileName)
 *         if this.eltDescs[this.eltDepth].lastElementQname != NULL:             # <<<<<<<<<<<<<<
 *             release(&eltQn)
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":503
 *         if this.eltDescs[this.eltDepth].lastElementQname != NULL:
 *             release(&eltQn)
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:             # <<<<<<<<<<<<<<
 *             release(&eltVal)
 *     void fatalError(const SAXParseException& exc):
 */
  __pyx_t_1 = (((this->eltDescs[this->eltDepth]).lastChars != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":504
 *             release(&eltQn)
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:
 *             release(&eltVal)             # <<<<<<<<<<<<<<
 *     void fatalError(const SAXParseException& exc):
 *         cdef const XMLCh* msg = exc.getMessage()
 */
    xercesc::XMLString::release((&__pyx_v_eltVal));

    /* "arelle_cython/arelle_c/xerces.pxi":503
 *         if this.eltDescs[this.eltDepth].lastElementQname != NULL:
 *             release(&eltQn)
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:             # <<<<<<<<<<<<<<
 *             release(&eltVal)
 *     void fatalError(const SAXParseException& exc):
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":472
 *         pass #print("elementDecl")
 *     # error handlers
 *     void error(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* msg = exc.getMessage()
 *         cdef char* msgText
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("_LXMLSAX2Handler.error", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__msg);
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":505
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:
 *             release(&eltVal)
 *     void fatalError(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* msg = exc.getMessage()
 *         cdef char* msgText
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::fatalError(xercesc::SAXParseException const &__pyx_v_exc) {
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_msg;
  char *__pyx_v_msgText;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("fatalError", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":506
 *             release(&eltVal)
 *     void fatalError(const SAXParseException& exc):
 *         cdef const XMLCh* msg = exc.getMessage()             # <<<<<<<<<<<<<<
 *         cdef char* msgText
 *         if msg != NULL:
 */
  __pyx_v_msg = __pyx_v_exc.getMessage();

  /* "arelle_cython/arelle_c/xerces.pxi":508
 *         cdef const XMLCh* msg = exc.getMessage()
 *         cdef char* msgText
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             msgText = transcode(exc.getMessage())
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":509
 *         cdef char* msgText
 *         if msg != NULL:
 *             msgText = transcode(exc.getMessage())             # <<<<<<<<<<<<<<
 *         else:
 *             msgText = "null"
 */
    __pyx_v_msgText = xercesc::XMLString::transcode(__pyx_v_exc.getMessage());

    /* "arelle_cython/arelle_c/xerces.pxi":508
 *         cdef const XMLCh* msg = exc.getMessage()
 *         cdef char* msgText
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             msgText = transcode(exc.getMessage())
 *         else:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":511
 *             msgText = transcode(exc.getMessage())
 *         else:
 *             msgText = "null"             # <<<<<<<<<<<<<<
 *         print("fatal error msg={} line={} col={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber()))
 *         if msg != NULL:
 */
  /*else*/ {
    __pyx_v_msgText = ((char *)"null");
  }
  __pyx_L3:;

  /* "arelle_cython/arelle_c/xerces.pxi":512
 *         else:
 *             msgText = "null"
 *         print("fatal error msg={} line={} col={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber()))             # <<<<<<<<<<<<<<
 *         if msg != NULL:
 *             release(&msgText)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_fatal_error_msg_line_col, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyUnicode_FromString(__pyx_v_msgText); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_exc.getLineNumber()); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_exc.getColumnNumber()); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 512, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 512, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_6);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(6, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":513
 *             msgText = "null"
 *         print("fatal error msg={} line={} col={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber()))
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             release(&msgText)
 *     void warning(const SAXParseException& exc):
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":514
 *         print("fatal error msg={} line={} col={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber()))
 *         if msg != NULL:
 *             release(&msgText)             # <<<<<<<<<<<<<<
 *     void warning(const SAXParseException& exc):
 *         print("warning")
 */
    xercesc::XMLString::release((&__pyx_v_msgText));

    /* "arelle_cython/arelle_c/xerces.pxi":513
 *             msgText = "null"
 *         print("fatal error msg={} line={} col={}".format(msgText, exc.getLineNumber(),exc.getColumnNumber()))
 *         if msg != NULL:             # <<<<<<<<<<<<<<
 *             release(&msgText)
 *     void warning(const SAXParseException& exc):
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":505
 *         if this.eltDescs[this.eltDepth].lastChars != NULL:
 *             release(&eltVal)
 *     void fatalError(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* msg = exc.getMessage()
 *         cdef char* msgText
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("_LXMLSAX2Handler.fatalError", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":515
 *         if msg != NULL:
 *             release(&msgText)
 *     void warning(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         print("warning")
 *     void resetErrors():
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::warning(CYTHON_UNUSED xercesc::SAXParseException const &__pyx_v_exc) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("warning", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":516
 *             release(&msgText)
 *     void warning(const SAXParseException& exc):
 *         print("warning")             # <<<<<<<<<<<<<<
 *     void resetErrors():
 *         print("resetErrors")
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_warning) < 0) __PYX_ERR(6, 516, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":515
 *         if msg != NULL:
 *             release(&msgText)
 *     void warning(const SAXParseException& exc):             # <<<<<<<<<<<<<<
 *         print("warning")
 *     void resetErrors():
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_LXMLSAX2Handler.warning", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":517
 *     void warning(const SAXParseException& exc):
 *         print("warning")
 *     void resetErrors():             # <<<<<<<<<<<<<<
 *         print("resetErrors")
 * 
 */

void __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler::resetErrors(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resetErrors", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":518
 *         print("warning")
 *     void resetErrors():
 *         print("resetErrors")             # <<<<<<<<<<<<<<
 * 
 * cdef cppclass _LXMLSAX2Resolver(EntityResolver):
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_resetErrors) < 0) __PYX_ERR(6, 518, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":517
 *     void warning(const SAXParseException& exc):
 *         print("warning")
 *     void resetErrors():             # <<<<<<<<<<<<<<
 *         print("resetErrors")
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_LXMLSAX2Handler.resetErrors", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "arelle_cython/arelle_c/xerces.pxi":521
 * 
 * cdef cppclass _LXMLSAX2Resolver(EntityResolver):
 *     InputSource* resolveEntity(const XMLCh* const publicId, const XMLCh* const systemId):             # <<<<<<<<<<<<<<
 *         cdef char* _publicId
 *         if publicId != NULL:
 */

xercesc::InputSource *__pyx_t_6arelle_8arelle_c__LXMLSAX2Resolver::resolveEntity(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *const __pyx_v_publicId, __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *const __pyx_v_systemId) {
  char *__pyx_v__publicId;
  char *__pyx_v__systemId;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_http;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_cachePath;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_localFile;
  xercesc::InputSource *__pyx_v_fileSource;
  xercesc::InputSource *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("resolveEntity", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":523
 *     InputSource* resolveEntity(const XMLCh* const publicId, const XMLCh* const systemId):
 *         cdef char* _publicId
 *         if publicId != NULL:             # <<<<<<<<<<<<<<
 *             _publicId = transcode(publicId)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_publicId != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":524
 *         cdef char* _publicId
 *         if publicId != NULL:
 *             _publicId = transcode(publicId)             # <<<<<<<<<<<<<<
 *         else:
 *             _publicId = "null"
 */
    __pyx_v__publicId = xercesc::XMLString::transcode(__pyx_v_publicId);

    /* "arelle_cython/arelle_c/xerces.pxi":523
 *     InputSource* resolveEntity(const XMLCh* const publicId, const XMLCh* const systemId):
 *         cdef char* _publicId
 *         if publicId != NULL:             # <<<<<<<<<<<<<<
 *             _publicId = transcode(publicId)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":526
 *             _publicId = transcode(publicId)
 *         else:
 *             _publicId = "null"             # <<<<<<<<<<<<<<
 *         cdef char* _systemId
 *         if systemId != NULL:
 */
  /*else*/ {
    __pyx_v__publicId = ((char *)"null");
  }
  __pyx_L3:;

  /* "arelle_cython/arelle_c/xerces.pxi":528
 *             _publicId = "null"
 *         cdef char* _systemId
 *         if systemId != NULL:             # <<<<<<<<<<<<<<
 *             _systemId = transcode(systemId)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_systemId != NULL) != 0);
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":529
 *         cdef char* _systemId
 *         if systemId != NULL:
 *             _systemId = transcode(systemId)             # <<<<<<<<<<<<<<
 *         else:
 *             _systemId = "null"
 */
    __pyx_v__systemId = xercesc::XMLString::transcode(__pyx_v_systemId);

    /* "arelle_cython/arelle_c/xerces.pxi":528
 *             _publicId = "null"
 *         cdef char* _systemId
 *         if systemId != NULL:             # <<<<<<<<<<<<<<
 *             _systemId = transcode(systemId)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":531
 *             _systemId = transcode(systemId)
 *         else:
 *             _systemId = "null"             # <<<<<<<<<<<<<<
 *         print("resolveEntity pub {} sys {}".format(_publicId, _systemId))
 *         cdef const XMLCh* http = transcode(b"http:")
 */
  /*else*/ {
    __pyx_v__systemId = ((char *)"null");
  }
  __pyx_L4:;

  /* "arelle_cython/arelle_c/xerces.pxi":532
 *         else:
 *             _systemId = "null"
 *         print("resolveEntity pub {} sys {}".format(_publicId, _systemId))             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* http = transcode(b"http:")
 *         cdef const XMLCh* cachePath = transcode(b"/Users/hermf/Library/Caches/Arelle/http/")
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_resolveEntity_pub_sys, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyUnicode_FromString(__pyx_v__publicId); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyUnicode_FromString(__pyx_v__systemId); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 532, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 532, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(6, 532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":533
 *             _systemId = "null"
 *         print("resolveEntity pub {} sys {}".format(_publicId, _systemId))
 *         cdef const XMLCh* http = transcode(b"http:")             # <<<<<<<<<<<<<<
 *         cdef const XMLCh* cachePath = transcode(b"/Users/hermf/Library/Caches/Arelle/http/")
 *         cdef XMLCh* localFile
 */
  __pyx_v_http = xercesc::XMLString::transcode(((char const *)"http:"));

  /* "arelle_cython/arelle_c/xerces.pxi":534
 *         print("resolveEntity pub {} sys {}".format(_publicId, _systemId))
 *         cdef const XMLCh* http = transcode(b"http:")
 *         cdef const XMLCh* cachePath = transcode(b"/Users/hermf/Library/Caches/Arelle/http/")             # <<<<<<<<<<<<<<
 *         cdef XMLCh* localFile
 *         cdef InputSource* fileSource
 */
  __pyx_v_cachePath = xercesc::XMLString::transcode(((char const *)"/Users/hermf/Library/Caches/Arelle/http/"));

  /* "arelle_cython/arelle_c/xerces.pxi":538
 *         cdef InputSource* fileSource
 *         cdef LocalFileInputSource* inpSrc
 *         if systemId != NULL and startsWith(<const XMLCh*>systemId, http):             # <<<<<<<<<<<<<<
 *             localFile = <XMLCh*>PyMem_Malloc((2000) * sizeof(XMLCh))
 *             copyString(localFile, cachePath)
 */
  __pyx_t_9 = ((__pyx_v_systemId != NULL) != 0);
  if (__pyx_t_9) {
  } else {
    __pyx_t_1 = __pyx_t_9;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_9 = (xercesc::XMLString::startsWith(((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *)__pyx_v_systemId), __pyx_v_http) != 0);
  __pyx_t_1 = __pyx_t_9;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "arelle_cython/arelle_c/xerces.pxi":539
 *         cdef LocalFileInputSource* inpSrc
 *         if systemId != NULL and startsWith(<const XMLCh*>systemId, http):
 *             localFile = <XMLCh*>PyMem_Malloc((2000) * sizeof(XMLCh))             # <<<<<<<<<<<<<<
 *             copyString(localFile, cachePath)
 *             catString(localFile, systemId + 7)
 */
    __pyx_v_localFile = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)PyMem_Malloc((0x7D0 * (sizeof(__pyx_t_8arelle_c_13xerces_ctypes_XMLCh)))));

    /* "arelle_cython/arelle_c/xerces.pxi":540
 *         if systemId != NULL and startsWith(<const XMLCh*>systemId, http):
 *             localFile = <XMLCh*>PyMem_Malloc((2000) * sizeof(XMLCh))
 *             copyString(localFile, cachePath)             # <<<<<<<<<<<<<<
 *             catString(localFile, systemId + 7)
 *             print("  revectored file {}".format(transcode(localFile)))
 */
    xercesc::XMLString::copyString(__pyx_v_localFile, __pyx_v_cachePath);

    /* "arelle_cython/arelle_c/xerces.pxi":541
 *             localFile = <XMLCh*>PyMem_Malloc((2000) * sizeof(XMLCh))
 *             copyString(localFile, cachePath)
 *             catString(localFile, systemId + 7)             # <<<<<<<<<<<<<<
 *             print("  revectored file {}".format(transcode(localFile)))
 *             fileSource = new LocalFileInputSource( localFile )
 */
    xercesc::XMLString::catString(__pyx_v_localFile, (__pyx_v_systemId + 7));

    /* "arelle_cython/arelle_c/xerces.pxi":542
 *             copyString(localFile, cachePath)
 *             catString(localFile, systemId + 7)
 *             print("  revectored file {}".format(transcode(localFile)))             # <<<<<<<<<<<<<<
 *             fileSource = new LocalFileInputSource( localFile )
 *             fileSource.setPublicId(systemId)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_revectored_file, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_localFile)); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 542, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 542, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 542, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 542, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 542, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(6, 542, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "arelle_cython/arelle_c/xerces.pxi":543
 *             catString(localFile, systemId + 7)
 *             print("  revectored file {}".format(transcode(localFile)))
 *             fileSource = new LocalFileInputSource( localFile )             # <<<<<<<<<<<<<<
 *             fileSource.setPublicId(systemId)
 *             #PyMem_Free(localFile)
 */
    __pyx_v_fileSource = new xercesc::LocalFileInputSource(__pyx_v_localFile);

    /* "arelle_cython/arelle_c/xerces.pxi":544
 *             print("  revectored file {}".format(transcode(localFile)))
 *             fileSource = new LocalFileInputSource( localFile )
 *             fileSource.setPublicId(systemId)             # <<<<<<<<<<<<<<
 *             #PyMem_Free(localFile)
 *             localFile = NULL
 */
    __pyx_v_fileSource->setPublicId(__pyx_v_systemId);

    /* "arelle_cython/arelle_c/xerces.pxi":546
 *             fileSource.setPublicId(systemId)
 *             #PyMem_Free(localFile)
 *             localFile = NULL             # <<<<<<<<<<<<<<
 *             return fileSource
 *         return NULL
 */
    __pyx_v_localFile = NULL;

    /* "arelle_cython/arelle_c/xerces.pxi":547
 *             #PyMem_Free(localFile)
 *             localFile = NULL
 *             return fileSource             # <<<<<<<<<<<<<<
 *         return NULL
 * 
 */
    __pyx_r = __pyx_v_fileSource;
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/xerces.pxi":538
 *         cdef InputSource* fileSource
 *         cdef LocalFileInputSource* inpSrc
 *         if systemId != NULL and startsWith(<const XMLCh*>systemId, http):             # <<<<<<<<<<<<<<
 *             localFile = <XMLCh*>PyMem_Malloc((2000) * sizeof(XMLCh))
 *             copyString(localFile, cachePath)
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":548
 *             localFile = NULL
 *             return fileSource
 *         return NULL             # <<<<<<<<<<<<<<
 * 
 * def testschema( s ):
 */
  __pyx_r = NULL;
  goto __pyx_L0;

  /* "arelle_cython/arelle_c/xerces.pxi":521
 * 
 * cdef cppclass _LXMLSAX2Resolver(EntityResolver):
 *     InputSource* resolveEntity(const XMLCh* const publicId, const XMLCh* const systemId):             # <<<<<<<<<<<<<<
 *         cdef char* _publicId
 *         if publicId != NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("_LXMLSAX2Resolver.resolveEntity", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":550
 *         return NULL
 * 
 * def testschema( s ):             # <<<<<<<<<<<<<<
 *     print("trace1")
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_11testschema(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static PyMethodDef __pyx_mdef_6arelle_8arelle_c_11testschema = {"testschema", (PyCFunction)__pyx_pw_6arelle_8arelle_c_11testschema, METH_O, 0};
static PyObject *__pyx_pw_6arelle_8arelle_c_11testschema(PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("testschema (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_10testschema(__pyx_self, ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_10testschema(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  xercesc::XMLGrammarPool *__pyx_v_grammarPool;
  xercesc::SAX2XMLReader *__pyx_v_parser;
  __pyx_t_6arelle_8arelle_c__ErrorHandler *__pyx_v_errorHandler;
  __pyx_t_6arelle_8arelle_c__LXMLSAX2Resolver *__pyx_v_lxmlSaxResolver;
  std::string __pyx_v_std_s;
  bool __pyx_v_adoptBuffer;
  xercesc::MemBufInputSource *__pyx_v_inpSrc;
  xercesc::SchemaGrammar *__pyx_v_schemaGrammar;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_targetNS;
  __pyx_t_8arelle_c_16xerces_framework_XSAnnotationList *__pyx_v_annotations;
  xercesc::XSAnnotation *__pyx_v_annotation;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_annotationText;
  xercesc::XSElementDeclaration *__pyx_v_xsElement;
  xercesc::XSTypeDefinition *__pyx_v_xsTypeDefinition;
  bool __pyx_v_modelWasChanged;
  xercesc::XSModel *__pyx_v_xsModel;
  __pyx_t_8arelle_c_16xerces_framework_StringList const *__pyx_v_namespaceDocumentLocations;
  __pyx_t_8arelle_c_16xerces_framework_XSNamespaceItemList *__pyx_v_namespaceItems;
  xercesc::XSNamespaceItem *__pyx_v_namespaceItem;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_namespacesSize;
  unsigned int __pyx_v_i;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_nameSpace;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_nameSpaceDocLocation;
  xercesc::XSNamedMap<xercesc::XSObject>  *__pyx_v_xsObjects;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_j;
  char const *__pyx_v_ns;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_6arelle_8arelle_c__ErrorHandler *__pyx_t_1;
  __pyx_t_6arelle_8arelle_c__LXMLSAX2Resolver *__pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_10;
  unsigned int __pyx_t_11;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_12;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  __Pyx_RefNannySetupContext("testschema", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":551
 * 
 * def testschema( s ):
 *     print("trace1")             # <<<<<<<<<<<<<<
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace1_2) < 0) __PYX_ERR(6, 551, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":552
 * def testschema( s ):
 *     print("trace1")
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)             # <<<<<<<<<<<<<<
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)
 *     parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)
 */
  __pyx_v_grammarPool = new xercesc::XMLGrammarPoolImpl(xercesc::XMLPlatformUtils::fgMemoryManager);

  /* "arelle_cython/arelle_c/xerces.pxi":553
 *     print("trace1")
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)             # <<<<<<<<<<<<<<
 *     parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)
 */
  __pyx_v_parser = xercesc::XMLReaderFactory::createXMLReader(xercesc::XMLPlatformUtils::fgMemoryManager, __pyx_v_grammarPool);

  /* "arelle_cython/arelle_c/xerces.pxi":554
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)
 *     parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)
 *     parser.setFeature(fgXercesSchema, True)
 */
  __pyx_v_parser->setProperty(xercesc::XMLUni::fgXercesScannerName, ((void *)xercesc::XMLUni::fgSGXMLScanner));

  /* "arelle_cython/arelle_c/xerces.pxi":555
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)
 *     parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesSchema, True)
 *     parser.setFeature(fgXercesSchemaFullChecking, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgSAX2CoreNameSpaces, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":556
 *     parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)
 *     parser.setFeature(fgXercesSchema, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesSchemaFullChecking, True)
 *     parser.setFeature(fgXercesCacheGrammarFromParse, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesSchema, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":557
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)
 *     parser.setFeature(fgXercesSchema, True)
 *     parser.setFeature(fgXercesSchemaFullChecking, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesCacheGrammarFromParse, True)
 *     parser.setFeature(fgXercesUseCachedGrammarInParse, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesSchemaFullChecking, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":558
 *     parser.setFeature(fgXercesSchema, True)
 *     parser.setFeature(fgXercesSchemaFullChecking, True)
 *     parser.setFeature(fgXercesCacheGrammarFromParse, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesUseCachedGrammarInParse, True)
 *     parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesCacheGrammarFromParse, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":559
 *     parser.setFeature(fgXercesSchemaFullChecking, True)
 *     parser.setFeature(fgXercesCacheGrammarFromParse, True)
 *     parser.setFeature(fgXercesUseCachedGrammarInParse, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 *     parser.setFeature(fgSAX2CoreValidation, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesUseCachedGrammarInParse, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":560
 *     parser.setFeature(fgXercesCacheGrammarFromParse, True)
 *     parser.setFeature(fgXercesUseCachedGrammarInParse, True)
 *     parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgSAX2CoreValidation, True)
 *     parser.setFeature(fgXercesDynamic, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgSAX2CoreNameSpacePrefixes, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":561
 *     parser.setFeature(fgXercesUseCachedGrammarInParse, True)
 *     parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 *     parser.setFeature(fgSAX2CoreValidation, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesDynamic, True)
 *     parser.setFeature(fgXercesValidateAnnotations, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgSAX2CoreValidation, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":562
 *     parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 *     parser.setFeature(fgSAX2CoreValidation, True)
 *     parser.setFeature(fgXercesDynamic, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesValidateAnnotations, True)
 *     parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesDynamic, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":563
 *     parser.setFeature(fgSAX2CoreValidation, True)
 *     parser.setFeature(fgXercesDynamic, True)
 *     parser.setFeature(fgXercesValidateAnnotations, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesValidateAnnotations, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":564
 *     parser.setFeature(fgXercesDynamic, True)
 *     parser.setFeature(fgXercesValidateAnnotations, True)
 *     parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)             # <<<<<<<<<<<<<<
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     parser.setErrorHandler(errorHandler)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesGenerateSyntheticAnnotations, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":565
 *     parser.setFeature(fgXercesValidateAnnotations, True)
 *     parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()             # <<<<<<<<<<<<<<
 *     parser.setErrorHandler(errorHandler)
 *     cdef _LXMLSAX2Resolver * lxmlSaxResolver = new _LXMLSAX2Resolver()
 */
  try {
    __pyx_t_1 = new __pyx_t_6arelle_8arelle_c__ErrorHandler();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 565, __pyx_L1_error)
  }
  __pyx_v_errorHandler = __pyx_t_1;

  /* "arelle_cython/arelle_c/xerces.pxi":566
 *     parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     parser.setErrorHandler(errorHandler)             # <<<<<<<<<<<<<<
 *     cdef _LXMLSAX2Resolver * lxmlSaxResolver = new _LXMLSAX2Resolver()
 *     parser.setEntityResolver(lxmlSaxResolver)
 */
  __pyx_v_parser->setErrorHandler(__pyx_v_errorHandler);

  /* "arelle_cython/arelle_c/xerces.pxi":567
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     parser.setErrorHandler(errorHandler)
 *     cdef _LXMLSAX2Resolver * lxmlSaxResolver = new _LXMLSAX2Resolver()             # <<<<<<<<<<<<<<
 *     parser.setEntityResolver(lxmlSaxResolver)
 *     print("trace2")
 */
  try {
    __pyx_t_2 = new __pyx_t_6arelle_8arelle_c__LXMLSAX2Resolver();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 567, __pyx_L1_error)
  }
  __pyx_v_lxmlSaxResolver = __pyx_t_2;

  /* "arelle_cython/arelle_c/xerces.pxi":568
 *     parser.setErrorHandler(errorHandler)
 *     cdef _LXMLSAX2Resolver * lxmlSaxResolver = new _LXMLSAX2Resolver()
 *     parser.setEntityResolver(lxmlSaxResolver)             # <<<<<<<<<<<<<<
 *     print("trace2")
 *     cdef string std_s = s
 */
  __pyx_v_parser->setEntityResolver(__pyx_v_lxmlSaxResolver);

  /* "arelle_cython/arelle_c/xerces.pxi":569
 *     cdef _LXMLSAX2Resolver * lxmlSaxResolver = new _LXMLSAX2Resolver()
 *     parser.setEntityResolver(lxmlSaxResolver)
 *     print("trace2")             # <<<<<<<<<<<<<<
 *     cdef string std_s = s
 *     cdef bool adoptBuffer = False
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace2_2) < 0) __PYX_ERR(6, 569, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":570
 *     parser.setEntityResolver(lxmlSaxResolver)
 *     print("trace2")
 *     cdef string std_s = s             # <<<<<<<<<<<<<<
 *     cdef bool adoptBuffer = False
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 */
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 570, __pyx_L1_error)
  __pyx_v_std_s = __pyx_t_3;

  /* "arelle_cython/arelle_c/xerces.pxi":571
 *     print("trace2")
 *     cdef string std_s = s
 *     cdef bool adoptBuffer = False             # <<<<<<<<<<<<<<
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 *     print("trace3")
 */
  __pyx_v_adoptBuffer = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":572
 *     cdef string std_s = s
 *     cdef bool adoptBuffer = False
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))             # <<<<<<<<<<<<<<
 *     print("trace3")
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)
 */
  __pyx_v_inpSrc = new xercesc::MemBufInputSource(((__pyx_t_8arelle_c_13xerces_ctypes_XMLByte *)__pyx_v_std_s.c_str()), __pyx_v_std_s.size(), __pyx_v_6arelle_8arelle_c_nsNoNamespace, __pyx_v_adoptBuffer);

  /* "arelle_cython/arelle_c/xerces.pxi":573
 *     cdef bool adoptBuffer = False
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 *     print("trace3")             # <<<<<<<<<<<<<<
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)
 *     cdef XMLCh* targetNS
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace3) < 0) __PYX_ERR(6, 573, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":574
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 *     print("trace3")
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)             # <<<<<<<<<<<<<<
 *     cdef XMLCh* targetNS
 *     targetNS = <XMLCh*>schemaGrammar.getTargetNamespace()
 */
  __pyx_v_schemaGrammar = ((xercesc::SchemaGrammar *)__pyx_v_parser->loadGrammar((*__pyx_v_inpSrc), xercesc::Grammar::SchemaGrammarType, 1));

  /* "arelle_cython/arelle_c/xerces.pxi":576
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)
 *     cdef XMLCh* targetNS
 *     targetNS = <XMLCh*>schemaGrammar.getTargetNamespace()             # <<<<<<<<<<<<<<
 *     if schemaGrammar == NULL:
 *         print("null grammar")
 */
  __pyx_v_targetNS = ((__pyx_t_8arelle_c_13xerces_ctypes_XMLCh *)__pyx_v_schemaGrammar->getTargetNamespace());

  /* "arelle_cython/arelle_c/xerces.pxi":577
 *     cdef XMLCh* targetNS
 *     targetNS = <XMLCh*>schemaGrammar.getTargetNamespace()
 *     if schemaGrammar == NULL:             # <<<<<<<<<<<<<<
 *         print("null grammar")
 *         return
 */
  __pyx_t_4 = ((__pyx_v_schemaGrammar == NULL) != 0);
  if (__pyx_t_4) {

    /* "arelle_cython/arelle_c/xerces.pxi":578
 *     targetNS = <XMLCh*>schemaGrammar.getTargetNamespace()
 *     if schemaGrammar == NULL:
 *         print("null grammar")             # <<<<<<<<<<<<<<
 *         return
 *     print("target namespace {}".format(transcode(targetNS)))
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_null_grammar) < 0) __PYX_ERR(6, 578, __pyx_L1_error)

    /* "arelle_cython/arelle_c/xerces.pxi":579
 *     if schemaGrammar == NULL:
 *         print("null grammar")
 *         return             # <<<<<<<<<<<<<<
 *     print("target namespace {}".format(transcode(targetNS)))
 *     print("trace4")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/xerces.pxi":577
 *     cdef XMLCh* targetNS
 *     targetNS = <XMLCh*>schemaGrammar.getTargetNamespace()
 *     if schemaGrammar == NULL:             # <<<<<<<<<<<<<<
 *         print("null grammar")
 *         return
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":580
 *         print("null grammar")
 *         return
 *     print("target namespace {}".format(transcode(targetNS)))             # <<<<<<<<<<<<<<
 *     print("trace4")
 *     cdef XSAnnotationList* annotations
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_target_namespace, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_targetNS)); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 580, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 580, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 580, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 580, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 580, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 580, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":581
 *         return
 *     print("target namespace {}".format(transcode(targetNS)))
 *     print("trace4")             # <<<<<<<<<<<<<<
 *     cdef XSAnnotationList* annotations
 *     cdef XSAnnotation* annotation = schemaGrammar.getAnnotation()
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace4) < 0) __PYX_ERR(6, 581, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":583
 *     print("trace4")
 *     cdef XSAnnotationList* annotations
 *     cdef XSAnnotation* annotation = schemaGrammar.getAnnotation()             # <<<<<<<<<<<<<<
 *     cdef XMLCh* annotationText
 *     while (annotation != NULL):
 */
  __pyx_v_annotation = __pyx_v_schemaGrammar->getAnnotation();

  /* "arelle_cython/arelle_c/xerces.pxi":585
 *     cdef XSAnnotation* annotation = schemaGrammar.getAnnotation()
 *     cdef XMLCh* annotationText
 *     while (annotation != NULL):             # <<<<<<<<<<<<<<
 *         annotationText = annotation.getAnnotationString()
 *         if annotationText == NULL:
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_annotation != NULL) != 0);
    if (!__pyx_t_4) break;

    /* "arelle_cython/arelle_c/xerces.pxi":586
 *     cdef XMLCh* annotationText
 *     while (annotation != NULL):
 *         annotationText = annotation.getAnnotationString()             # <<<<<<<<<<<<<<
 *         if annotationText == NULL:
 *             print("null annotation text")
 */
    __pyx_v_annotationText = __pyx_v_annotation->getAnnotationString();

    /* "arelle_cython/arelle_c/xerces.pxi":587
 *     while (annotation != NULL):
 *         annotationText = annotation.getAnnotationString()
 *         if annotationText == NULL:             # <<<<<<<<<<<<<<
 *             print("null annotation text")
 *         else:
 */
    __pyx_t_4 = ((__pyx_v_annotationText == NULL) != 0);
    if (__pyx_t_4) {

      /* "arelle_cython/arelle_c/xerces.pxi":588
 *         annotationText = annotation.getAnnotationString()
 *         if annotationText == NULL:
 *             print("null annotation text")             # <<<<<<<<<<<<<<
 *         else:
 *             print("annotation={}".format(transcode(annotationText)))
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_null_annotation_text) < 0) __PYX_ERR(6, 588, __pyx_L1_error)

      /* "arelle_cython/arelle_c/xerces.pxi":587
 *     while (annotation != NULL):
 *         annotationText = annotation.getAnnotationString()
 *         if annotationText == NULL:             # <<<<<<<<<<<<<<
 *             print("null annotation text")
 *         else:
 */
      goto __pyx_L6;
    }

    /* "arelle_cython/arelle_c/xerces.pxi":590
 *             print("null annotation text")
 *         else:
 *             print("annotation={}".format(transcode(annotationText)))             # <<<<<<<<<<<<<<
 *         annotation = annotation.getNext()
 *     cdef XSElementDeclaration *xsElement
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_annotation, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 590, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_annotationText)); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 590, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 590, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_9};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 590, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_9};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 590, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 590, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 590, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 590, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_L6:;

    /* "arelle_cython/arelle_c/xerces.pxi":591
 *         else:
 *             print("annotation={}".format(transcode(annotationText)))
 *         annotation = annotation.getNext()             # <<<<<<<<<<<<<<
 *     cdef XSElementDeclaration *xsElement
 *     cdef XSTypeDefinition *xsTypeDefinition
 */
    __pyx_v_annotation = __pyx_v_annotation->getNext();
  }

  /* "arelle_cython/arelle_c/xerces.pxi":595
 *     cdef XSTypeDefinition *xsTypeDefinition
 *     cdef unsigned int nsNbr
 *     cdef bool modelWasChanged = 0 # true if this is a first time call and a new model is created             # <<<<<<<<<<<<<<
 *     cdef XSModel* xsModel = grammarPool.getXSModel(modelWasChanged)
 *     cdef StringList *namespaces
 */
  __pyx_v_modelWasChanged = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":596
 *     cdef unsigned int nsNbr
 *     cdef bool modelWasChanged = 0 # true if this is a first time call and a new model is created
 *     cdef XSModel* xsModel = grammarPool.getXSModel(modelWasChanged)             # <<<<<<<<<<<<<<
 *     cdef StringList *namespaces
 *     cdef const StringList *namespaceDocumentLocations
 */
  __pyx_v_xsModel = __pyx_v_grammarPool->getXSModel(__pyx_v_modelWasChanged);

  /* "arelle_cython/arelle_c/xerces.pxi":607
 *     cdef XSNamedMap[XSObject]* xsObjects
 *     cdef XMLSize_t j
 *     if xsModel != NULL:             # <<<<<<<<<<<<<<
 *         namespaceItems = xsModel.getNamespaceItems()
 *         namespacesSize = namespaceItems.size()
 */
  __pyx_t_4 = ((__pyx_v_xsModel != NULL) != 0);
  if (__pyx_t_4) {

    /* "arelle_cython/arelle_c/xerces.pxi":608
 *     cdef XMLSize_t j
 *     if xsModel != NULL:
 *         namespaceItems = xsModel.getNamespaceItems()             # <<<<<<<<<<<<<<
 *         namespacesSize = namespaceItems.size()
 *         print("namespaces size {}".format(namespacesSize))
 */
    __pyx_v_namespaceItems = __pyx_v_xsModel->getNamespaceItems();

    /* "arelle_cython/arelle_c/xerces.pxi":609
 *     if xsModel != NULL:
 *         namespaceItems = xsModel.getNamespaceItems()
 *         namespacesSize = namespaceItems.size()             # <<<<<<<<<<<<<<
 *         print("namespaces size {}".format(namespacesSize))
 *         for i in range(namespacesSize):
 */
    __pyx_v_namespacesSize = __pyx_v_namespaceItems->size();

    /* "arelle_cython/arelle_c/xerces.pxi":610
 *         namespaceItems = xsModel.getNamespaceItems()
 *         namespacesSize = namespaceItems.size()
 *         print("namespaces size {}".format(namespacesSize))             # <<<<<<<<<<<<<<
 *         for i in range(namespacesSize):
 *             namespaceItem = namespaceItems.elementAt(i)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_namespaces_size, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_namespacesSize); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 610, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 610, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 610, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 610, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 610, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 610, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "arelle_cython/arelle_c/xerces.pxi":611
 *         namespacesSize = namespaceItems.size()
 *         print("namespaces size {}".format(namespacesSize))
 *         for i in range(namespacesSize):             # <<<<<<<<<<<<<<
 *             namespaceItem = namespaceItems.elementAt(i)
 *             nameSpace = namespaceItem.getSchemaNamespace()
 */
    __pyx_t_10 = __pyx_v_namespacesSize;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_i = __pyx_t_11;

      /* "arelle_cython/arelle_c/xerces.pxi":612
 *         print("namespaces size {}".format(namespacesSize))
 *         for i in range(namespacesSize):
 *             namespaceItem = namespaceItems.elementAt(i)             # <<<<<<<<<<<<<<
 *             nameSpace = namespaceItem.getSchemaNamespace()
 *             ns = transcode(nameSpace)
 */
      __pyx_v_namespaceItem = __pyx_v_namespaceItems->elementAt(__pyx_v_i);

      /* "arelle_cython/arelle_c/xerces.pxi":613
 *         for i in range(namespacesSize):
 *             namespaceItem = namespaceItems.elementAt(i)
 *             nameSpace = namespaceItem.getSchemaNamespace()             # <<<<<<<<<<<<<<
 *             ns = transcode(nameSpace)
 *             print("namespace {}".format(ns))
 */
      __pyx_v_nameSpace = __pyx_v_namespaceItem->getSchemaNamespace();

      /* "arelle_cython/arelle_c/xerces.pxi":614
 *             namespaceItem = namespaceItems.elementAt(i)
 *             nameSpace = namespaceItem.getSchemaNamespace()
 *             ns = transcode(nameSpace)             # <<<<<<<<<<<<<<
 *             print("namespace {}".format(ns))
 *             namespaceDocumentLocations = namespaceItem.getDocumentLocations()
 */
      __pyx_v_ns = xercesc::XMLString::transcode(__pyx_v_nameSpace);

      /* "arelle_cython/arelle_c/xerces.pxi":615
 *             nameSpace = namespaceItem.getSchemaNamespace()
 *             ns = transcode(nameSpace)
 *             print("namespace {}".format(ns))             # <<<<<<<<<<<<<<
 *             namespaceDocumentLocations = namespaceItem.getDocumentLocations()
 *             if namespaceDocumentLocations == NULL:
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_namespace, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyUnicode_FromString(__pyx_v_ns); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 615, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (!__pyx_t_8) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 615, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 615, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 615, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 615, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_7);
          __pyx_t_7 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 615, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 615, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "arelle_cython/arelle_c/xerces.pxi":616
 *             ns = transcode(nameSpace)
 *             print("namespace {}".format(ns))
 *             namespaceDocumentLocations = namespaceItem.getDocumentLocations()             # <<<<<<<<<<<<<<
 *             if namespaceDocumentLocations == NULL:
 *                 print("namespace locations list null")
 */
      __pyx_v_namespaceDocumentLocations = __pyx_v_namespaceItem->getDocumentLocations();

      /* "arelle_cython/arelle_c/xerces.pxi":617
 *             print("namespace {}".format(ns))
 *             namespaceDocumentLocations = namespaceItem.getDocumentLocations()
 *             if namespaceDocumentLocations == NULL:             # <<<<<<<<<<<<<<
 *                 print("namespace locations list null")
 *             else:
 */
      __pyx_t_4 = ((__pyx_v_namespaceDocumentLocations == NULL) != 0);
      if (__pyx_t_4) {

        /* "arelle_cython/arelle_c/xerces.pxi":618
 *             namespaceDocumentLocations = namespaceItem.getDocumentLocations()
 *             if namespaceDocumentLocations == NULL:
 *                 print("namespace locations list null")             # <<<<<<<<<<<<<<
 *             else:
 *                 for j in range(namespaceDocumentLocations.size()):
 */
        if (__Pyx_PrintOne(0, __pyx_kp_s_namespace_locations_list_null) < 0) __PYX_ERR(6, 618, __pyx_L1_error)

        /* "arelle_cython/arelle_c/xerces.pxi":617
 *             print("namespace {}".format(ns))
 *             namespaceDocumentLocations = namespaceItem.getDocumentLocations()
 *             if namespaceDocumentLocations == NULL:             # <<<<<<<<<<<<<<
 *                 print("namespace locations list null")
 *             else:
 */
        goto __pyx_L10;
      }

      /* "arelle_cython/arelle_c/xerces.pxi":620
 *                 print("namespace locations list null")
 *             else:
 *                 for j in range(namespaceDocumentLocations.size()):             # <<<<<<<<<<<<<<
 *                     nameSpaceDocLocation = namespaceDocumentLocations.elementAt(j)
 *                     if nameSpaceDocLocation == NULL:
 */
      /*else*/ {
        __pyx_t_12 = __pyx_v_namespaceDocumentLocations->size();
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_v_j = __pyx_t_13;

          /* "arelle_cython/arelle_c/xerces.pxi":621
 *             else:
 *                 for j in range(namespaceDocumentLocations.size()):
 *                     nameSpaceDocLocation = namespaceDocumentLocations.elementAt(j)             # <<<<<<<<<<<<<<
 *                     if nameSpaceDocLocation == NULL:
 *                         print("namespace doc null")
 */
          __pyx_v_nameSpaceDocLocation = __pyx_v_namespaceDocumentLocations->elementAt(__pyx_v_j);

          /* "arelle_cython/arelle_c/xerces.pxi":622
 *                 for j in range(namespaceDocumentLocations.size()):
 *                     nameSpaceDocLocation = namespaceDocumentLocations.elementAt(j)
 *                     if nameSpaceDocLocation == NULL:             # <<<<<<<<<<<<<<
 *                         print("namespace doc null")
 *                     else:
 */
          __pyx_t_4 = ((__pyx_v_nameSpaceDocLocation == NULL) != 0);
          if (__pyx_t_4) {

            /* "arelle_cython/arelle_c/xerces.pxi":623
 *                     nameSpaceDocLocation = namespaceDocumentLocations.elementAt(j)
 *                     if nameSpaceDocLocation == NULL:
 *                         print("namespace doc null")             # <<<<<<<<<<<<<<
 *                     else:
 *                         ns = transcode(nameSpaceDocLocation)
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_namespace_doc_null) < 0) __PYX_ERR(6, 623, __pyx_L1_error)

            /* "arelle_cython/arelle_c/xerces.pxi":622
 *                 for j in range(namespaceDocumentLocations.size()):
 *                     nameSpaceDocLocation = namespaceDocumentLocations.elementAt(j)
 *                     if nameSpaceDocLocation == NULL:             # <<<<<<<<<<<<<<
 *                         print("namespace doc null")
 *                     else:
 */
            goto __pyx_L13;
          }

          /* "arelle_cython/arelle_c/xerces.pxi":625
 *                         print("namespace doc null")
 *                     else:
 *                         ns = transcode(nameSpaceDocLocation)             # <<<<<<<<<<<<<<
 *                         print("namespace doc {}".format(ns))
 *             #if "xbrl.org" in ns or "fasb" in ns or "w3c.org" in ns:
 */
          /*else*/ {
            __pyx_v_ns = xercesc::XMLString::transcode(__pyx_v_nameSpaceDocLocation);

            /* "arelle_cython/arelle_c/xerces.pxi":626
 *                     else:
 *                         ns = transcode(nameSpaceDocLocation)
 *                         print("namespace doc {}".format(ns))             # <<<<<<<<<<<<<<
 *             #if "xbrl.org" in ns or "fasb" in ns or "w3c.org" in ns:
 *             #    continue
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_namespace_doc, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 626, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_9 = __Pyx_PyUnicode_FromString(__pyx_v_ns); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 626, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_7 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_7)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_7);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
              }
            }
            if (!__pyx_t_7) {
              __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 626, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_GOTREF(__pyx_t_5);
            } else {
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_6)) {
                PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_9};
                __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 626, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
                PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_9};
                __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 626, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              {
                __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 626, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
                __Pyx_GIVEREF(__pyx_t_9);
                PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_9);
                __pyx_t_9 = 0;
                __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 626, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              }
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 626, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __pyx_L13:;
        }
      }
      __pyx_L10:;

      /* "arelle_cython/arelle_c/xerces.pxi":629
 *             #if "xbrl.org" in ns or "fasb" in ns or "w3c.org" in ns:
 *             #    continue
 *             annotations = namespaceItem.getAnnotations()             # <<<<<<<<<<<<<<
 *             print("namespace {} annotations {}".format(i, annotations.size()))
 *             for j in range(0, annotations.size()):
 */
      __pyx_v_annotations = __pyx_v_namespaceItem->getAnnotations();

      /* "arelle_cython/arelle_c/xerces.pxi":630
 *             #    continue
 *             annotations = namespaceItem.getAnnotations()
 *             print("namespace {} annotations {}".format(i, annotations.size()))             # <<<<<<<<<<<<<<
 *             for j in range(0, annotations.size()):
 *                 annotation = annotations.elementAt(j)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_namespace_annotations, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyInt_From_unsigned_int(__pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyInt_FromSize_t(__pyx_v_annotations->size()); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 630, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_14 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_8, __pyx_t_9};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 630, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_8, __pyx_t_9};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 630, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_15 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(6, 630, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_14, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_14, __pyx_t_9);
        __pyx_t_8 = 0;
        __pyx_t_9 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 630, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 630, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "arelle_cython/arelle_c/xerces.pxi":631
 *             annotations = namespaceItem.getAnnotations()
 *             print("namespace {} annotations {}".format(i, annotations.size()))
 *             for j in range(0, annotations.size()):             # <<<<<<<<<<<<<<
 *                 annotation = annotations.elementAt(j)
 *                 if annotation == NULL:
 */
      __pyx_t_12 = __pyx_v_annotations->size();
      for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
        __pyx_v_j = __pyx_t_13;

        /* "arelle_cython/arelle_c/xerces.pxi":632
 *             print("namespace {} annotations {}".format(i, annotations.size()))
 *             for j in range(0, annotations.size()):
 *                 annotation = annotations.elementAt(j)             # <<<<<<<<<<<<<<
 *                 if annotation == NULL:
 *                     print("annotation {} is NULL".format(j))
 */
        __pyx_v_annotation = __pyx_v_annotations->elementAt(__pyx_v_j);

        /* "arelle_cython/arelle_c/xerces.pxi":633
 *             for j in range(0, annotations.size()):
 *                 annotation = annotations.elementAt(j)
 *                 if annotation == NULL:             # <<<<<<<<<<<<<<
 *                     print("annotation {} is NULL".format(j))
 *                 while (annotation != NULL):
 */
        __pyx_t_4 = ((__pyx_v_annotation == NULL) != 0);
        if (__pyx_t_4) {

          /* "arelle_cython/arelle_c/xerces.pxi":634
 *                 annotation = annotations.elementAt(j)
 *                 if annotation == NULL:
 *                     print("annotation {} is NULL".format(j))             # <<<<<<<<<<<<<<
 *                 while (annotation != NULL):
 *                     annotationText = annotation.getAnnotationString()
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_annotation_is_NULL, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 634, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_15 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_15)) __PYX_ERR(6, 634, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
            }
          }
          if (!__pyx_t_9) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 634, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_GOTREF(__pyx_t_5);
          } else {
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_6)) {
              PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_15};
              __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 634, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
              PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_15};
              __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 634, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            } else
            #endif
            {
              __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 634, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
              __Pyx_GIVEREF(__pyx_t_15);
              PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_15);
              __pyx_t_15 = 0;
              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 634, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 634, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "arelle_cython/arelle_c/xerces.pxi":633
 *             for j in range(0, annotations.size()):
 *                 annotation = annotations.elementAt(j)
 *                 if annotation == NULL:             # <<<<<<<<<<<<<<
 *                     print("annotation {} is NULL".format(j))
 *                 while (annotation != NULL):
 */
        }

        /* "arelle_cython/arelle_c/xerces.pxi":635
 *                 if annotation == NULL:
 *                     print("annotation {} is NULL".format(j))
 *                 while (annotation != NULL):             # <<<<<<<<<<<<<<
 *                     annotationText = annotation.getAnnotationString()
 *                     if annotationText != NULL:
 */
        while (1) {
          __pyx_t_4 = ((__pyx_v_annotation != NULL) != 0);
          if (!__pyx_t_4) break;

          /* "arelle_cython/arelle_c/xerces.pxi":636
 *                     print("annotation {} is NULL".format(j))
 *                 while (annotation != NULL):
 *                     annotationText = annotation.getAnnotationString()             # <<<<<<<<<<<<<<
 *                     if annotationText != NULL:
 *                         print("    annotation{} ={}".format(j, transcode(annotationText)))
 */
          __pyx_v_annotationText = __pyx_v_annotation->getAnnotationString();

          /* "arelle_cython/arelle_c/xerces.pxi":637
 *                 while (annotation != NULL):
 *                     annotationText = annotation.getAnnotationString()
 *                     if annotationText != NULL:             # <<<<<<<<<<<<<<
 *                         print("    annotation{} ={}".format(j, transcode(annotationText)))
 *                     else:
 */
          __pyx_t_4 = ((__pyx_v_annotationText != NULL) != 0);
          if (__pyx_t_4) {

            /* "arelle_cython/arelle_c/xerces.pxi":638
 *                     annotationText = annotation.getAnnotationString()
 *                     if annotationText != NULL:
 *                         print("    annotation{} ={}".format(j, transcode(annotationText)))             # <<<<<<<<<<<<<<
 *                     else:
 *                         print("    null annotation string {}".format(j))
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_annotation_2, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 638, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 638, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_15 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_annotationText)); if (unlikely(!__pyx_t_15)) __PYX_ERR(6, 638, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_9 = NULL;
            __pyx_t_14 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_9)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_9);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
                __pyx_t_14 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_6)) {
              PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_8, __pyx_t_15};
              __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 638, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
              PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_8, __pyx_t_15};
              __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 638, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            } else
            #endif
            {
              __pyx_t_7 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 638, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              if (__pyx_t_9) {
                __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_8);
              PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_14, __pyx_t_8);
              __Pyx_GIVEREF(__pyx_t_15);
              PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_14, __pyx_t_15);
              __pyx_t_8 = 0;
              __pyx_t_15 = 0;
              __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 638, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 638, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "arelle_cython/arelle_c/xerces.pxi":637
 *                 while (annotation != NULL):
 *                     annotationText = annotation.getAnnotationString()
 *                     if annotationText != NULL:             # <<<<<<<<<<<<<<
 *                         print("    annotation{} ={}".format(j, transcode(annotationText)))
 *                     else:
 */
            goto __pyx_L19;
          }

          /* "arelle_cython/arelle_c/xerces.pxi":640
 *                         print("    annotation{} ={}".format(j, transcode(annotationText)))
 *                     else:
 *                         print("    null annotation string {}".format(j))             # <<<<<<<<<<<<<<
 *                     annotation = annotation.getNext()
 *             for j in range(1,15):
 */
          /*else*/ {
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_null_annotation_string, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 640, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 640, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_15 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
              }
            }
            if (!__pyx_t_15) {
              __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 640, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_GOTREF(__pyx_t_5);
            } else {
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_6)) {
                PyObject *__pyx_temp[2] = {__pyx_t_15, __pyx_t_7};
                __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 640, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
                PyObject *__pyx_temp[2] = {__pyx_t_15, __pyx_t_7};
                __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 640, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              } else
              #endif
              {
                __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 640, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_15); __pyx_t_15 = NULL;
                __Pyx_GIVEREF(__pyx_t_7);
                PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_7);
                __pyx_t_7 = 0;
                __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 640, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              }
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 640, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __pyx_L19:;

          /* "arelle_cython/arelle_c/xerces.pxi":641
 *                     else:
 *                         print("    null annotation string {}".format(j))
 *                     annotation = annotation.getNext()             # <<<<<<<<<<<<<<
 *             for j in range(1,15):
 *                 xsObjects = xsModel.getComponentsByNamespace(<COMPONENT_TYPE>j, nameSpace)
 */
          __pyx_v_annotation = __pyx_v_annotation->getNext();
        }
      }

      /* "arelle_cython/arelle_c/xerces.pxi":642
 *                         print("    null annotation string {}".format(j))
 *                     annotation = annotation.getNext()
 *             for j in range(1,15):             # <<<<<<<<<<<<<<
 *                 xsObjects = xsModel.getComponentsByNamespace(<COMPONENT_TYPE>j, nameSpace)
 *                 print("object {} count {}".format(j, xsObjects.getLength() if xsObjects != NULL else None))
 */
      for (__pyx_t_12 = 1; __pyx_t_12 < 15; __pyx_t_12+=1) {
        __pyx_v_j = __pyx_t_12;

        /* "arelle_cython/arelle_c/xerces.pxi":643
 *                     annotation = annotation.getNext()
 *             for j in range(1,15):
 *                 xsObjects = xsModel.getComponentsByNamespace(<COMPONENT_TYPE>j, nameSpace)             # <<<<<<<<<<<<<<
 *                 print("object {} count {}".format(j, xsObjects.getLength() if xsObjects != NULL else None))
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 */
        __pyx_v_xsObjects = __pyx_v_xsModel->getComponentsByNamespace(((xercesc::XSConstants::COMPONENT_TYPE)__pyx_v_j), __pyx_v_nameSpace);

        /* "arelle_cython/arelle_c/xerces.pxi":644
 *             for j in range(1,15):
 *                 xsObjects = xsModel.getComponentsByNamespace(<COMPONENT_TYPE>j, nameSpace)
 *                 print("object {} count {}".format(j, xsObjects.getLength() if xsObjects != NULL else None))             # <<<<<<<<<<<<<<
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_object_count, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 644, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 644, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (((__pyx_v_xsObjects != NULL) != 0)) {
          __pyx_t_15 = __Pyx_PyInt_FromSize_t(__pyx_v_xsObjects->getLength()); if (unlikely(!__pyx_t_15)) __PYX_ERR(6, 644, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_7 = __pyx_t_15;
          __pyx_t_15 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_7 = Py_None;
        }
        __pyx_t_15 = NULL;
        __pyx_t_14 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_14 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_8, __pyx_t_7};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 644, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[3] = {__pyx_t_15, __pyx_t_8, __pyx_t_7};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 644, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 644, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_15) {
            __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_15); __pyx_t_15 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_14, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_7);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_14, __pyx_t_7);
          __pyx_t_8 = 0;
          __pyx_t_7 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 644, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 644, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }

      /* "arelle_cython/arelle_c/xerces.pxi":645
 *                 xsObjects = xsModel.getComponentsByNamespace(<COMPONENT_TYPE>j, nameSpace)
 *                 print("object {} count {}".format(j, xsObjects.getLength() if xsObjects != NULL else None))
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)             # <<<<<<<<<<<<<<
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 *                 print("no elements")
 */
      __pyx_v_xsObjects = __pyx_v_xsModel->getComponentsByNamespace(xercesc::XSConstants::ELEMENT_DECLARATION, __pyx_v_nameSpace);

      /* "arelle_cython/arelle_c/xerces.pxi":646
 *                 print("object {} count {}".format(j, xsObjects.getLength() if xsObjects != NULL else None))
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:             # <<<<<<<<<<<<<<
 *                 print("no elements")
 *             else:
 */
      __pyx_t_16 = ((__pyx_v_xsObjects == NULL) != 0);
      if (!__pyx_t_16) {
      } else {
        __pyx_t_4 = __pyx_t_16;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_16 = ((__pyx_v_xsObjects->getLength() == 0) != 0);
      __pyx_t_4 = __pyx_t_16;
      __pyx_L23_bool_binop_done:;
      if (__pyx_t_4) {

        /* "arelle_cython/arelle_c/xerces.pxi":647
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 *                 print("no elements")             # <<<<<<<<<<<<<<
 *             else:
 *                 for j in range(xsObjects.getLength()):
 */
        if (__Pyx_PrintOne(0, __pyx_kp_s_no_elements) < 0) __PYX_ERR(6, 647, __pyx_L1_error)

        /* "arelle_cython/arelle_c/xerces.pxi":646
 *                 print("object {} count {}".format(j, xsObjects.getLength() if xsObjects != NULL else None))
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:             # <<<<<<<<<<<<<<
 *                 print("no elements")
 *             else:
 */
        goto __pyx_L22;
      }

      /* "arelle_cython/arelle_c/xerces.pxi":649
 *                 print("no elements")
 *             else:
 *                 for j in range(xsObjects.getLength()):             # <<<<<<<<<<<<<<
 *                     xsElement = <XSElementDeclaration *>xsObjects.item(j)
 *                     print("element {} {}".format(j, transcode(xsElement.getName())))
 */
      /*else*/ {
        __pyx_t_12 = __pyx_v_xsObjects->getLength();
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_v_j = __pyx_t_13;

          /* "arelle_cython/arelle_c/xerces.pxi":650
 *             else:
 *                 for j in range(xsObjects.getLength()):
 *                     xsElement = <XSElementDeclaration *>xsObjects.item(j)             # <<<<<<<<<<<<<<
 *                     print("element {} {}".format(j, transcode(xsElement.getName())))
 *                     annotation = xsElement.getAnnotation()
 */
          __pyx_v_xsElement = ((xercesc::XSElementDeclaration *)__pyx_v_xsObjects->item(__pyx_v_j));

          /* "arelle_cython/arelle_c/xerces.pxi":651
 *                 for j in range(xsObjects.getLength()):
 *                     xsElement = <XSElementDeclaration *>xsObjects.item(j)
 *                     print("element {} {}".format(j, transcode(xsElement.getName())))             # <<<<<<<<<<<<<<
 *                     annotation = xsElement.getAnnotation()
 *                     if annotation == NULL:
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_element_2, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 651, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_9 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 651, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_7 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_xsElement->getName())); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 651, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_8 = NULL;
          __pyx_t_14 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
              __pyx_t_14 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_9, __pyx_t_7};
            __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 651, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_9, __pyx_t_7};
            __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 651, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          } else
          #endif
          {
            __pyx_t_15 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(6, 651, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            if (__pyx_t_8) {
              __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_8); __pyx_t_8 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_14, __pyx_t_9);
            __Pyx_GIVEREF(__pyx_t_7);
            PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_14, __pyx_t_7);
            __pyx_t_9 = 0;
            __pyx_t_7 = 0;
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 651, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 651, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "arelle_cython/arelle_c/xerces.pxi":652
 *                     xsElement = <XSElementDeclaration *>xsObjects.item(j)
 *                     print("element {} {}".format(j, transcode(xsElement.getName())))
 *                     annotation = xsElement.getAnnotation()             # <<<<<<<<<<<<<<
 *                     if annotation == NULL:
 *                         print("annotation is NULL")
 */
          __pyx_v_annotation = __pyx_v_xsElement->getAnnotation();

          /* "arelle_cython/arelle_c/xerces.pxi":653
 *                     print("element {} {}".format(j, transcode(xsElement.getName())))
 *                     annotation = xsElement.getAnnotation()
 *                     if annotation == NULL:             # <<<<<<<<<<<<<<
 *                         print("annotation is NULL")
 *                     while (annotation != NULL):
 */
          __pyx_t_4 = ((__pyx_v_annotation == NULL) != 0);
          if (__pyx_t_4) {

            /* "arelle_cython/arelle_c/xerces.pxi":654
 *                     annotation = xsElement.getAnnotation()
 *                     if annotation == NULL:
 *                         print("annotation is NULL")             # <<<<<<<<<<<<<<
 *                     while (annotation != NULL):
 *                         annotationText = annotation.getAnnotationString()
 */
            if (__Pyx_PrintOne(0, __pyx_kp_s_annotation_is_NULL_2) < 0) __PYX_ERR(6, 654, __pyx_L1_error)

            /* "arelle_cython/arelle_c/xerces.pxi":653
 *                     print("element {} {}".format(j, transcode(xsElement.getName())))
 *                     annotation = xsElement.getAnnotation()
 *                     if annotation == NULL:             # <<<<<<<<<<<<<<
 *                         print("annotation is NULL")
 *                     while (annotation != NULL):
 */
          }

          /* "arelle_cython/arelle_c/xerces.pxi":655
 *                     if annotation == NULL:
 *                         print("annotation is NULL")
 *                     while (annotation != NULL):             # <<<<<<<<<<<<<<
 *                         annotationText = annotation.getAnnotationString()
 *                         if annotationText != NULL:
 */
          while (1) {
            __pyx_t_4 = ((__pyx_v_annotation != NULL) != 0);
            if (!__pyx_t_4) break;

            /* "arelle_cython/arelle_c/xerces.pxi":656
 *                         print("annotation is NULL")
 *                     while (annotation != NULL):
 *                         annotationText = annotation.getAnnotationString()             # <<<<<<<<<<<<<<
 *                         if annotationText != NULL:
 *                             print("    annotation={}".format(transcode(annotationText)))
 */
            __pyx_v_annotationText = __pyx_v_annotation->getAnnotationString();

            /* "arelle_cython/arelle_c/xerces.pxi":657
 *                     while (annotation != NULL):
 *                         annotationText = annotation.getAnnotationString()
 *                         if annotationText != NULL:             # <<<<<<<<<<<<<<
 *                             print("    annotation={}".format(transcode(annotationText)))
 *                         else:
 */
            __pyx_t_4 = ((__pyx_v_annotationText != NULL) != 0);
            if (__pyx_t_4) {

              /* "arelle_cython/arelle_c/xerces.pxi":658
 *                         annotationText = annotation.getAnnotationString()
 *                         if annotationText != NULL:
 *                             print("    annotation={}".format(transcode(annotationText)))             # <<<<<<<<<<<<<<
 *                         else:
 *                             print("    null annotation string")
 */
              __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_annotation_3, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 658, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_15 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_annotationText)); if (unlikely(!__pyx_t_15)) __PYX_ERR(6, 658, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_7 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
                __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
                if (likely(__pyx_t_7)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                  __Pyx_INCREF(__pyx_t_7);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_6, function);
                }
              }
              if (!__pyx_t_7) {
                __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 658, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_GOTREF(__pyx_t_5);
              } else {
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_6)) {
                  PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_15};
                  __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 658, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
                  PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_15};
                  __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 658, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                } else
                #endif
                {
                  __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 658, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
                  __Pyx_GIVEREF(__pyx_t_15);
                  PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_15);
                  __pyx_t_15 = 0;
                  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 658, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                }
              }
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 658, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

              /* "arelle_cython/arelle_c/xerces.pxi":657
 *                     while (annotation != NULL):
 *                         annotationText = annotation.getAnnotationString()
 *                         if annotationText != NULL:             # <<<<<<<<<<<<<<
 *                             print("    annotation={}".format(transcode(annotationText)))
 *                         else:
 */
              goto __pyx_L30;
            }

            /* "arelle_cython/arelle_c/xerces.pxi":660
 *                             print("    annotation={}".format(transcode(annotationText)))
 *                         else:
 *                             print("    null annotation string")             # <<<<<<<<<<<<<<
 *                         annotation = annotation.getNext()
 *                     xsTypeDefinition = xsElement.getTypeDefinition()
 */
            /*else*/ {
              if (__Pyx_PrintOne(0, __pyx_kp_s_null_annotation_string_2) < 0) __PYX_ERR(6, 660, __pyx_L1_error)
            }
            __pyx_L30:;

            /* "arelle_cython/arelle_c/xerces.pxi":661
 *                         else:
 *                             print("    null annotation string")
 *                         annotation = annotation.getNext()             # <<<<<<<<<<<<<<
 *                     xsTypeDefinition = xsElement.getTypeDefinition()
 *                     if xsTypeDefinition != NULL:
 */
            __pyx_v_annotation = __pyx_v_annotation->getNext();
          }

          /* "arelle_cython/arelle_c/xerces.pxi":662
 *                             print("    null annotation string")
 *                         annotation = annotation.getNext()
 *                     xsTypeDefinition = xsElement.getTypeDefinition()             # <<<<<<<<<<<<<<
 *                     if xsTypeDefinition != NULL:
 *                         print("   type {}".format(transcode(xsTypeDefinition.getName())))
 */
          __pyx_v_xsTypeDefinition = __pyx_v_xsElement->getTypeDefinition();

          /* "arelle_cython/arelle_c/xerces.pxi":663
 *                         annotation = annotation.getNext()
 *                     xsTypeDefinition = xsElement.getTypeDefinition()
 *                     if xsTypeDefinition != NULL:             # <<<<<<<<<<<<<<
 *                         print("   type {}".format(transcode(xsTypeDefinition.getName())))
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)
 */
          __pyx_t_4 = ((__pyx_v_xsTypeDefinition != NULL) != 0);
          if (__pyx_t_4) {

            /* "arelle_cython/arelle_c/xerces.pxi":664
 *                     xsTypeDefinition = xsElement.getTypeDefinition()
 *                     if xsTypeDefinition != NULL:
 *                         print("   type {}".format(transcode(xsTypeDefinition.getName())))             # <<<<<<<<<<<<<<
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 */
            __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_type_2, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 664, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_9 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_xsTypeDefinition->getName())); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 664, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_15 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_6);
              if (likely(__pyx_t_15)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                __Pyx_INCREF(__pyx_t_15);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_6, function);
              }
            }
            if (!__pyx_t_15) {
              __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 664, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_GOTREF(__pyx_t_5);
            } else {
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_6)) {
                PyObject *__pyx_temp[2] = {__pyx_t_15, __pyx_t_9};
                __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 664, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
                PyObject *__pyx_temp[2] = {__pyx_t_15, __pyx_t_9};
                __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 664, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              } else
              #endif
              {
                __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 664, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_7);
                __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_15); __pyx_t_15 = NULL;
                __Pyx_GIVEREF(__pyx_t_9);
                PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_9);
                __pyx_t_9 = 0;
                __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 664, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              }
            }
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 664, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "arelle_cython/arelle_c/xerces.pxi":663
 *                         annotation = annotation.getNext()
 *                     xsTypeDefinition = xsElement.getTypeDefinition()
 *                     if xsTypeDefinition != NULL:             # <<<<<<<<<<<<<<
 *                         print("   type {}".format(transcode(xsTypeDefinition.getName())))
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)
 */
          }
        }
      }
      __pyx_L22:;

      /* "arelle_cython/arelle_c/xerces.pxi":665
 *                     if xsTypeDefinition != NULL:
 *                         print("   type {}".format(transcode(xsTypeDefinition.getName())))
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)             # <<<<<<<<<<<<<<
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 *                 print("no types")
 */
      __pyx_v_xsObjects = __pyx_v_xsModel->getComponentsByNamespace(xercesc::XSConstants::TYPE_DEFINITION, __pyx_v_nameSpace);

      /* "arelle_cython/arelle_c/xerces.pxi":666
 *                         print("   type {}".format(transcode(xsTypeDefinition.getName())))
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:             # <<<<<<<<<<<<<<
 *                 print("no types")
 *             else:
 */
      __pyx_t_16 = ((__pyx_v_xsObjects == NULL) != 0);
      if (!__pyx_t_16) {
      } else {
        __pyx_t_4 = __pyx_t_16;
        goto __pyx_L33_bool_binop_done;
      }
      __pyx_t_16 = ((__pyx_v_xsObjects->getLength() == 0) != 0);
      __pyx_t_4 = __pyx_t_16;
      __pyx_L33_bool_binop_done:;
      if (__pyx_t_4) {

        /* "arelle_cython/arelle_c/xerces.pxi":667
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 *                 print("no types")             # <<<<<<<<<<<<<<
 *             else:
 *                 for j in range(xsObjects.getLength()):
 */
        if (__Pyx_PrintOne(0, __pyx_kp_s_no_types) < 0) __PYX_ERR(6, 667, __pyx_L1_error)

        /* "arelle_cython/arelle_c/xerces.pxi":666
 *                         print("   type {}".format(transcode(xsTypeDefinition.getName())))
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:             # <<<<<<<<<<<<<<
 *                 print("no types")
 *             else:
 */
        goto __pyx_L32;
      }

      /* "arelle_cython/arelle_c/xerces.pxi":669
 *                 print("no types")
 *             else:
 *                 for j in range(xsObjects.getLength()):             # <<<<<<<<<<<<<<
 *                     xsTypeDefinition = <XSTypeDefinition *>xsObjects.item(j)
 *                     print("type {} {} {}".format(j,
 */
      /*else*/ {
        __pyx_t_12 = __pyx_v_xsObjects->getLength();
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_v_j = __pyx_t_13;

          /* "arelle_cython/arelle_c/xerces.pxi":670
 *             else:
 *                 for j in range(xsObjects.getLength()):
 *                     xsTypeDefinition = <XSTypeDefinition *>xsObjects.item(j)             # <<<<<<<<<<<<<<
 *                     print("type {} {} {}".format(j,
 *                                                  "SIMPLE" if xsTypeDefinition.getTypeCategory() == 16 else "COMPLEX",
 */
          __pyx_v_xsTypeDefinition = ((xercesc::XSTypeDefinition *)__pyx_v_xsObjects->item(__pyx_v_j));

          /* "arelle_cython/arelle_c/xerces.pxi":671
 *                 for j in range(xsObjects.getLength()):
 *                     xsTypeDefinition = <XSTypeDefinition *>xsObjects.item(j)
 *                     print("type {} {} {}".format(j,             # <<<<<<<<<<<<<<
 *                                                  "SIMPLE" if xsTypeDefinition.getTypeCategory() == 16 else "COMPLEX",
 *                                                  transcode(xsTypeDefinition.getName())))
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_type_3, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(6, 671, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 671, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);

          /* "arelle_cython/arelle_c/xerces.pxi":672
 *                     xsTypeDefinition = <XSTypeDefinition *>xsObjects.item(j)
 *                     print("type {} {} {}".format(j,
 *                                                  "SIMPLE" if xsTypeDefinition.getTypeCategory() == 16 else "COMPLEX",             # <<<<<<<<<<<<<<
 *                                                  transcode(xsTypeDefinition.getName())))
 * 
 */
          if (((__pyx_v_xsTypeDefinition->getTypeCategory() == 16) != 0)) {
            __Pyx_INCREF(__pyx_n_s_SIMPLE);
            __pyx_t_9 = __pyx_n_s_SIMPLE;
          } else {
            __Pyx_INCREF(__pyx_n_s_COMPLEX);
            __pyx_t_9 = __pyx_n_s_COMPLEX;
          }

          /* "arelle_cython/arelle_c/xerces.pxi":673
 *                     print("type {} {} {}".format(j,
 *                                                  "SIMPLE" if xsTypeDefinition.getTypeCategory() == 16 else "COMPLEX",
 *                                                  transcode(xsTypeDefinition.getName())))             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_15 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_xsTypeDefinition->getName())); if (unlikely(!__pyx_t_15)) __PYX_ERR(6, 673, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_8 = NULL;
          __pyx_t_14 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
              __pyx_t_14 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_7, __pyx_t_9, __pyx_t_15};
            __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_14, 3+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 671, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_t_7, __pyx_t_9, __pyx_t_15};
            __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_14, 3+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 671, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          } else
          #endif
          {
            __pyx_t_17 = PyTuple_New(3+__pyx_t_14); if (unlikely(!__pyx_t_17)) __PYX_ERR(6, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            if (__pyx_t_8) {
              __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_8); __pyx_t_8 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_7);
            PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_14, __pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_14, __pyx_t_9);
            __Pyx_GIVEREF(__pyx_t_15);
            PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_14, __pyx_t_15);
            __pyx_t_7 = 0;
            __pyx_t_9 = 0;
            __pyx_t_15 = 0;
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_17, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 671, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __pyx_L32:;
    }

    /* "arelle_cython/arelle_c/xerces.pxi":607
 *     cdef XSNamedMap[XSObject]* xsObjects
 *     cdef XMLSize_t j
 *     if xsModel != NULL:             # <<<<<<<<<<<<<<
 *         namespaceItems = xsModel.getNamespaceItems()
 *         namespacesSize = namespaceItems.size()
 */
    goto __pyx_L7;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":677
 * 
 *     else:
 *         print ("xsModel is null")             # <<<<<<<<<<<<<<
 * 
 * def testschemaDOM( s ):
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_xsModel_is_null) < 0) __PYX_ERR(6, 677, __pyx_L1_error)
  }
  __pyx_L7:;

  /* "arelle_cython/arelle_c/xerces.pxi":550
 *         return NULL
 * 
 * def testschema( s ):             # <<<<<<<<<<<<<<
 *     print("trace1")
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("arelle.arelle_c.testschema", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":679
 *         print ("xsModel is null")
 * 
 * def testschemaDOM( s ):             # <<<<<<<<<<<<<<
 *     print("trace1")
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_13testschemaDOM(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static PyMethodDef __pyx_mdef_6arelle_8arelle_c_13testschemaDOM = {"testschemaDOM", (PyCFunction)__pyx_pw_6arelle_8arelle_c_13testschemaDOM, METH_O, 0};
static PyObject *__pyx_pw_6arelle_8arelle_c_13testschemaDOM(PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("testschemaDOM (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_12testschemaDOM(__pyx_self, ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_12testschemaDOM(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  xercesc::XMLGrammarPool *__pyx_v_grammarPool;
  char *__pyx_v_implFeatures;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v__implFeatures;
  xercesc::DOMImplementationLS *__pyx_v_domImpl;
  xercesc::XercesDOMParser *__pyx_v_parser;
  bool __pyx_v_bTrue;
  __pyx_t_6arelle_8arelle_c__ErrorHandler *__pyx_v_errorHandler;
  std::string __pyx_v_std_s;
  bool __pyx_v_adoptBuffer;
  xercesc::MemBufInputSource *__pyx_v_inpSrc;
  xercesc::SchemaGrammar *__pyx_v_schemaGrammar;
  xercesc::XSAnnotation *__pyx_v_annotation;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_annotationText;
  bool __pyx_v_updatedXSModel;
  xercesc::XSModel *__pyx_v_xsModel;
  __pyx_t_8arelle_c_16xerces_framework_StringList *__pyx_v_namespaces;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_namespacesSize;
  unsigned int __pyx_v_i;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_nameSpace;
  xercesc::XSNamedMap<xercesc::XSObject>  *__pyx_v_xsObjects;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_j;
  xercesc::XSElementDeclaration *__pyx_v_xsElement;
  xercesc::XSTypeDefinition *__pyx_v_xsTypeDefinition;
  char const *__pyx_v_ns;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  xercesc::XercesDOMParser *__pyx_t_7;
  __pyx_t_6arelle_8arelle_c__ErrorHandler *__pyx_t_8;
  std::string __pyx_t_9;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_10;
  unsigned int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_14;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_15;
  int __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_RefNannySetupContext("testschemaDOM", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":680
 * 
 * def testschemaDOM( s ):
 *     print("trace1")             # <<<<<<<<<<<<<<
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 *     cdef char* implFeatures = b"LS"
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace1_2) < 0) __PYX_ERR(6, 680, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":681
 * def testschemaDOM( s ):
 *     print("trace1")
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)             # <<<<<<<<<<<<<<
 *     cdef char* implFeatures = b"LS"
 *     cdef XMLCh* _implFeatures = transcode(implFeatures)
 */
  __pyx_v_grammarPool = new xercesc::XMLGrammarPoolImpl(xercesc::XMLPlatformUtils::fgMemoryManager);

  /* "arelle_cython/arelle_c/xerces.pxi":682
 *     print("trace1")
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 *     cdef char* implFeatures = b"LS"             # <<<<<<<<<<<<<<
 *     cdef XMLCh* _implFeatures = transcode(implFeatures)
 *     cdef DOMImplementationLS* domImpl = getDOMImplementation(_implFeatures)
 */
  __pyx_v_implFeatures = ((char *)"LS");

  /* "arelle_cython/arelle_c/xerces.pxi":683
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 *     cdef char* implFeatures = b"LS"
 *     cdef XMLCh* _implFeatures = transcode(implFeatures)             # <<<<<<<<<<<<<<
 *     cdef DOMImplementationLS* domImpl = getDOMImplementation(_implFeatures)
 *     print ("trace2 domImpl is {}".format("not null" if domImpl != NULL else "null"))
 */
  __pyx_v__implFeatures = xercesc::XMLString::transcode(__pyx_v_implFeatures);

  /* "arelle_cython/arelle_c/xerces.pxi":684
 *     cdef char* implFeatures = b"LS"
 *     cdef XMLCh* _implFeatures = transcode(implFeatures)
 *     cdef DOMImplementationLS* domImpl = getDOMImplementation(_implFeatures)             # <<<<<<<<<<<<<<
 *     print ("trace2 domImpl is {}".format("not null" if domImpl != NULL else "null"))
 *     if domImpl == NULL:
 */
  __pyx_v_domImpl = xercesc::DOMImplementationRegistry::getDOMImplementation(__pyx_v__implFeatures);

  /* "arelle_cython/arelle_c/xerces.pxi":685
 *     cdef XMLCh* _implFeatures = transcode(implFeatures)
 *     cdef DOMImplementationLS* domImpl = getDOMImplementation(_implFeatures)
 *     print ("trace2 domImpl is {}".format("not null" if domImpl != NULL else "null"))             # <<<<<<<<<<<<<<
 *     if domImpl == NULL:
 *         return
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_trace2_domImpl_is, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (((__pyx_v_domImpl != NULL) != 0)) {
    __Pyx_INCREF(__pyx_kp_s_not_null);
    __pyx_t_3 = __pyx_kp_s_not_null;
  } else {
    __Pyx_INCREF(__pyx_n_s_null);
    __pyx_t_3 = __pyx_n_s_null;
  }
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 685, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 685, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 685, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 685, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":686
 *     cdef DOMImplementationLS* domImpl = getDOMImplementation(_implFeatures)
 *     print ("trace2 domImpl is {}".format("not null" if domImpl != NULL else "null"))
 *     if domImpl == NULL:             # <<<<<<<<<<<<<<
 *         return
 *     cdef XercesDOMParser* parser = new XercesDOMParser()
 */
  __pyx_t_6 = ((__pyx_v_domImpl == NULL) != 0);
  if (__pyx_t_6) {

    /* "arelle_cython/arelle_c/xerces.pxi":687
 *     print ("trace2 domImpl is {}".format("not null" if domImpl != NULL else "null"))
 *     if domImpl == NULL:
 *         return             # <<<<<<<<<<<<<<
 *     cdef XercesDOMParser* parser = new XercesDOMParser()
 *     cdef bool bTrue = True
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/xerces.pxi":686
 *     cdef DOMImplementationLS* domImpl = getDOMImplementation(_implFeatures)
 *     print ("trace2 domImpl is {}".format("not null" if domImpl != NULL else "null"))
 *     if domImpl == NULL:             # <<<<<<<<<<<<<<
 *         return
 *     cdef XercesDOMParser* parser = new XercesDOMParser()
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":688
 *     if domImpl == NULL:
 *         return
 *     cdef XercesDOMParser* parser = new XercesDOMParser()             # <<<<<<<<<<<<<<
 *     cdef bool bTrue = True
 *     parser.setDoNamespaces( bTrue )
 */
  try {
    __pyx_t_7 = new xercesc::XercesDOMParser();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 688, __pyx_L1_error)
  }
  __pyx_v_parser = __pyx_t_7;

  /* "arelle_cython/arelle_c/xerces.pxi":689
 *         return
 *     cdef XercesDOMParser* parser = new XercesDOMParser()
 *     cdef bool bTrue = True             # <<<<<<<<<<<<<<
 *     parser.setDoNamespaces( bTrue )
 *     parser.setDoSchema( bTrue )
 */
  __pyx_v_bTrue = 1;

  /* "arelle_cython/arelle_c/xerces.pxi":690
 *     cdef XercesDOMParser* parser = new XercesDOMParser()
 *     cdef bool bTrue = True
 *     parser.setDoNamespaces( bTrue )             # <<<<<<<<<<<<<<
 *     parser.setDoSchema( bTrue )
 *     parser.setLoadSchema( bTrue )
 */
  __pyx_v_parser->setDoNamespaces(__pyx_v_bTrue);

  /* "arelle_cython/arelle_c/xerces.pxi":691
 *     cdef bool bTrue = True
 *     parser.setDoNamespaces( bTrue )
 *     parser.setDoSchema( bTrue )             # <<<<<<<<<<<<<<
 *     parser.setLoadSchema( bTrue )
 *     parser.setGenerateSyntheticAnnotations( bTrue )
 */
  __pyx_v_parser->setDoSchema(__pyx_v_bTrue);

  /* "arelle_cython/arelle_c/xerces.pxi":692
 *     parser.setDoNamespaces( bTrue )
 *     parser.setDoSchema( bTrue )
 *     parser.setLoadSchema( bTrue )             # <<<<<<<<<<<<<<
 *     parser.setGenerateSyntheticAnnotations( bTrue )
 *     parser.setValidationSchemaFullChecking( bTrue )
 */
  __pyx_v_parser->setLoadSchema(__pyx_v_bTrue);

  /* "arelle_cython/arelle_c/xerces.pxi":693
 *     parser.setDoSchema( bTrue )
 *     parser.setLoadSchema( bTrue )
 *     parser.setGenerateSyntheticAnnotations( bTrue )             # <<<<<<<<<<<<<<
 *     parser.setValidationSchemaFullChecking( bTrue )
 *     parser.setCalculateSrcOfs( bTrue )
 */
  __pyx_v_parser->setGenerateSyntheticAnnotations(__pyx_v_bTrue);

  /* "arelle_cython/arelle_c/xerces.pxi":694
 *     parser.setLoadSchema( bTrue )
 *     parser.setGenerateSyntheticAnnotations( bTrue )
 *     parser.setValidationSchemaFullChecking( bTrue )             # <<<<<<<<<<<<<<
 *     parser.setCalculateSrcOfs( bTrue )
 *     parser.cacheGrammarFromParse( bTrue )
 */
  __pyx_v_parser->setValidationSchemaFullChecking(__pyx_v_bTrue);

  /* "arelle_cython/arelle_c/xerces.pxi":695
 *     parser.setGenerateSyntheticAnnotations( bTrue )
 *     parser.setValidationSchemaFullChecking( bTrue )
 *     parser.setCalculateSrcOfs( bTrue )             # <<<<<<<<<<<<<<
 *     parser.cacheGrammarFromParse( bTrue )
 *     parser.useCachedGrammarInParse( bTrue )
 */
  __pyx_v_parser->setCalculateSrcOfs(__pyx_v_bTrue);

  /* "arelle_cython/arelle_c/xerces.pxi":696
 *     parser.setValidationSchemaFullChecking( bTrue )
 *     parser.setCalculateSrcOfs( bTrue )
 *     parser.cacheGrammarFromParse( bTrue )             # <<<<<<<<<<<<<<
 *     parser.useCachedGrammarInParse( bTrue )
 *     parser.setCreateSchemaInfo( bTrue )
 */
  __pyx_v_parser->cacheGrammarFromParse(__pyx_v_bTrue);

  /* "arelle_cython/arelle_c/xerces.pxi":697
 *     parser.setCalculateSrcOfs( bTrue )
 *     parser.cacheGrammarFromParse( bTrue )
 *     parser.useCachedGrammarInParse( bTrue )             # <<<<<<<<<<<<<<
 *     parser.setCreateSchemaInfo( bTrue )
 *     parser.setCreateCommentNodes( bTrue )
 */
  __pyx_v_parser->useCachedGrammarInParse(__pyx_v_bTrue);

  /* "arelle_cython/arelle_c/xerces.pxi":698
 *     parser.cacheGrammarFromParse( bTrue )
 *     parser.useCachedGrammarInParse( bTrue )
 *     parser.setCreateSchemaInfo( bTrue )             # <<<<<<<<<<<<<<
 *     parser.setCreateCommentNodes( bTrue )
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 */
  __pyx_v_parser->setCreateSchemaInfo(__pyx_v_bTrue);

  /* "arelle_cython/arelle_c/xerces.pxi":699
 *     parser.useCachedGrammarInParse( bTrue )
 *     parser.setCreateSchemaInfo( bTrue )
 *     parser.setCreateCommentNodes( bTrue )             # <<<<<<<<<<<<<<
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     parser.setErrorHandler(errorHandler)
 */
  __pyx_v_parser->setCreateCommentNodes(__pyx_v_bTrue);

  /* "arelle_cython/arelle_c/xerces.pxi":700
 *     parser.setCreateSchemaInfo( bTrue )
 *     parser.setCreateCommentNodes( bTrue )
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()             # <<<<<<<<<<<<<<
 *     parser.setErrorHandler(errorHandler)
 *     print("trace2")
 */
  try {
    __pyx_t_8 = new __pyx_t_6arelle_8arelle_c__ErrorHandler();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 700, __pyx_L1_error)
  }
  __pyx_v_errorHandler = __pyx_t_8;

  /* "arelle_cython/arelle_c/xerces.pxi":701
 *     parser.setCreateCommentNodes( bTrue )
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     parser.setErrorHandler(errorHandler)             # <<<<<<<<<<<<<<
 *     print("trace2")
 *     cdef string std_s = s
 */
  __pyx_v_parser->setErrorHandler(__pyx_v_errorHandler);

  /* "arelle_cython/arelle_c/xerces.pxi":702
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     parser.setErrorHandler(errorHandler)
 *     print("trace2")             # <<<<<<<<<<<<<<
 *     cdef string std_s = s
 *     cdef bool adoptBuffer = False
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace2_2) < 0) __PYX_ERR(6, 702, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":703
 *     parser.setErrorHandler(errorHandler)
 *     print("trace2")
 *     cdef string std_s = s             # <<<<<<<<<<<<<<
 *     cdef bool adoptBuffer = False
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 */
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 703, __pyx_L1_error)
  __pyx_v_std_s = __pyx_t_9;

  /* "arelle_cython/arelle_c/xerces.pxi":704
 *     print("trace2")
 *     cdef string std_s = s
 *     cdef bool adoptBuffer = False             # <<<<<<<<<<<<<<
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 *     print("trace3")
 */
  __pyx_v_adoptBuffer = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":705
 *     cdef string std_s = s
 *     cdef bool adoptBuffer = False
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))             # <<<<<<<<<<<<<<
 *     print("trace3")
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, bTrue)
 */
  __pyx_v_inpSrc = new xercesc::MemBufInputSource(((__pyx_t_8arelle_c_13xerces_ctypes_XMLByte *)__pyx_v_std_s.c_str()), __pyx_v_std_s.size(), __pyx_v_6arelle_8arelle_c_nsNoNamespace, __pyx_v_adoptBuffer);

  /* "arelle_cython/arelle_c/xerces.pxi":706
 *     cdef bool adoptBuffer = False
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 *     print("trace3")             # <<<<<<<<<<<<<<
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, bTrue)
 *     if schemaGrammar == NULL:
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace3) < 0) __PYX_ERR(6, 706, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":707
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 *     print("trace3")
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, bTrue)             # <<<<<<<<<<<<<<
 *     if schemaGrammar == NULL:
 *         print("null grammar")
 */
  __pyx_v_schemaGrammar = ((xercesc::SchemaGrammar *)__pyx_v_parser->loadGrammar((*__pyx_v_inpSrc), xercesc::Grammar::SchemaGrammarType, __pyx_v_bTrue));

  /* "arelle_cython/arelle_c/xerces.pxi":708
 *     print("trace3")
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, bTrue)
 *     if schemaGrammar == NULL:             # <<<<<<<<<<<<<<
 *         print("null grammar")
 *         return
 */
  __pyx_t_6 = ((__pyx_v_schemaGrammar == NULL) != 0);
  if (__pyx_t_6) {

    /* "arelle_cython/arelle_c/xerces.pxi":709
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, bTrue)
 *     if schemaGrammar == NULL:
 *         print("null grammar")             # <<<<<<<<<<<<<<
 *         return
 *     print("target namespace {}".format(transcode(schemaGrammar.getTargetNamespace())))
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_null_grammar) < 0) __PYX_ERR(6, 709, __pyx_L1_error)

    /* "arelle_cython/arelle_c/xerces.pxi":710
 *     if schemaGrammar == NULL:
 *         print("null grammar")
 *         return             # <<<<<<<<<<<<<<
 *     print("target namespace {}".format(transcode(schemaGrammar.getTargetNamespace())))
 *     print("trace4")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "arelle_cython/arelle_c/xerces.pxi":708
 *     print("trace3")
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, bTrue)
 *     if schemaGrammar == NULL:             # <<<<<<<<<<<<<<
 *         print("null grammar")
 *         return
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":711
 *         print("null grammar")
 *         return
 *     print("target namespace {}".format(transcode(schemaGrammar.getTargetNamespace())))             # <<<<<<<<<<<<<<
 *     print("trace4")
 *     cdef XSAnnotation* annotation = schemaGrammar.getAnnotation()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_target_namespace, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_schemaGrammar->getTargetNamespace())); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 711, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 711, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 711, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 711, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 711, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":712
 *         return
 *     print("target namespace {}".format(transcode(schemaGrammar.getTargetNamespace())))
 *     print("trace4")             # <<<<<<<<<<<<<<
 *     cdef XSAnnotation* annotation = schemaGrammar.getAnnotation()
 *     cdef XMLCh* annotationText
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace4) < 0) __PYX_ERR(6, 712, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":713
 *     print("target namespace {}".format(transcode(schemaGrammar.getTargetNamespace())))
 *     print("trace4")
 *     cdef XSAnnotation* annotation = schemaGrammar.getAnnotation()             # <<<<<<<<<<<<<<
 *     cdef XMLCh* annotationText
 *     while (annotation != NULL):
 */
  __pyx_v_annotation = __pyx_v_schemaGrammar->getAnnotation();

  /* "arelle_cython/arelle_c/xerces.pxi":715
 *     cdef XSAnnotation* annotation = schemaGrammar.getAnnotation()
 *     cdef XMLCh* annotationText
 *     while (annotation != NULL):             # <<<<<<<<<<<<<<
 *         annotationText = annotation.getAnnotationString()
 *         if annotationText == NULL:
 */
  while (1) {
    __pyx_t_6 = ((__pyx_v_annotation != NULL) != 0);
    if (!__pyx_t_6) break;

    /* "arelle_cython/arelle_c/xerces.pxi":716
 *     cdef XMLCh* annotationText
 *     while (annotation != NULL):
 *         annotationText = annotation.getAnnotationString()             # <<<<<<<<<<<<<<
 *         if annotationText == NULL:
 *             print("null annotation text")
 */
    __pyx_v_annotationText = __pyx_v_annotation->getAnnotationString();

    /* "arelle_cython/arelle_c/xerces.pxi":717
 *     while (annotation != NULL):
 *         annotationText = annotation.getAnnotationString()
 *         if annotationText == NULL:             # <<<<<<<<<<<<<<
 *             print("null annotation text")
 *         else:
 */
    __pyx_t_6 = ((__pyx_v_annotationText == NULL) != 0);
    if (__pyx_t_6) {

      /* "arelle_cython/arelle_c/xerces.pxi":718
 *         annotationText = annotation.getAnnotationString()
 *         if annotationText == NULL:
 *             print("null annotation text")             # <<<<<<<<<<<<<<
 *         else:
 *             print("annotation={}".format(transcode(annotationText)))
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_null_annotation_text) < 0) __PYX_ERR(6, 718, __pyx_L1_error)

      /* "arelle_cython/arelle_c/xerces.pxi":717
 *     while (annotation != NULL):
 *         annotationText = annotation.getAnnotationString()
 *         if annotationText == NULL:             # <<<<<<<<<<<<<<
 *             print("null annotation text")
 *         else:
 */
      goto __pyx_L7;
    }

    /* "arelle_cython/arelle_c/xerces.pxi":720
 *             print("null annotation text")
 *         else:
 *             print("annotation={}".format(transcode(annotationText)))             # <<<<<<<<<<<<<<
 *         annotation = annotation.getNext()
 * 
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_annotation, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 720, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_annotationText)); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 720, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 720, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 720, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 720, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 720, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 720, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 720, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "arelle_cython/arelle_c/xerces.pxi":721
 *         else:
 *             print("annotation={}".format(transcode(annotationText)))
 *         annotation = annotation.getNext()             # <<<<<<<<<<<<<<
 * 
 *     cdef bool updatedXSModel = 0
 */
    __pyx_v_annotation = __pyx_v_annotation->getNext();
  }

  /* "arelle_cython/arelle_c/xerces.pxi":723
 *         annotation = annotation.getNext()
 * 
 *     cdef bool updatedXSModel = 0             # <<<<<<<<<<<<<<
 *     cdef XSModel* xsModel = grammarPool.getXSModel(updatedXSModel)
 *     cdef StringList *namespaces
 */
  __pyx_v_updatedXSModel = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":724
 * 
 *     cdef bool updatedXSModel = 0
 *     cdef XSModel* xsModel = grammarPool.getXSModel(updatedXSModel)             # <<<<<<<<<<<<<<
 *     cdef StringList *namespaces
 *     cdef XMLSize_t namespacesSize
 */
  __pyx_v_xsModel = __pyx_v_grammarPool->getXSModel(__pyx_v_updatedXSModel);

  /* "arelle_cython/arelle_c/xerces.pxi":733
 *     cdef XSElementDeclaration *xsElement
 *     cdef XSTypeDefinition *xsTypeDefinition
 *     if xsModel != NULL:             # <<<<<<<<<<<<<<
 *         namespaces = xsModel.getNamespaces()
 *         namespacesSize = namespaces.size()
 */
  __pyx_t_6 = ((__pyx_v_xsModel != NULL) != 0);
  if (__pyx_t_6) {

    /* "arelle_cython/arelle_c/xerces.pxi":734
 *     cdef XSTypeDefinition *xsTypeDefinition
 *     if xsModel != NULL:
 *         namespaces = xsModel.getNamespaces()             # <<<<<<<<<<<<<<
 *         namespacesSize = namespaces.size()
 *         print("namespaces size {}".format(namespacesSize))
 */
    __pyx_v_namespaces = __pyx_v_xsModel->getNamespaces();

    /* "arelle_cython/arelle_c/xerces.pxi":735
 *     if xsModel != NULL:
 *         namespaces = xsModel.getNamespaces()
 *         namespacesSize = namespaces.size()             # <<<<<<<<<<<<<<
 *         print("namespaces size {}".format(namespacesSize))
 *         for i in range(namespacesSize):
 */
    __pyx_v_namespacesSize = __pyx_v_namespaces->size();

    /* "arelle_cython/arelle_c/xerces.pxi":736
 *         namespaces = xsModel.getNamespaces()
 *         namespacesSize = namespaces.size()
 *         print("namespaces size {}".format(namespacesSize))             # <<<<<<<<<<<<<<
 *         for i in range(namespacesSize):
 *             nameSpace = namespaces.elementAt(i)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_namespaces_size, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_namespacesSize); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 736, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 736, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 736, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 736, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 736, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 736, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "arelle_cython/arelle_c/xerces.pxi":737
 *         namespacesSize = namespaces.size()
 *         print("namespaces size {}".format(namespacesSize))
 *         for i in range(namespacesSize):             # <<<<<<<<<<<<<<
 *             nameSpace = namespaces.elementAt(i)
 *             ns = transcode(nameSpace)
 */
    __pyx_t_10 = __pyx_v_namespacesSize;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_i = __pyx_t_11;

      /* "arelle_cython/arelle_c/xerces.pxi":738
 *         print("namespaces size {}".format(namespacesSize))
 *         for i in range(namespacesSize):
 *             nameSpace = namespaces.elementAt(i)             # <<<<<<<<<<<<<<
 *             ns = transcode(nameSpace)
 *             print("namespace {}".format(ns))
 */
      __pyx_v_nameSpace = __pyx_v_namespaces->elementAt(__pyx_v_i);

      /* "arelle_cython/arelle_c/xerces.pxi":739
 *         for i in range(namespacesSize):
 *             nameSpace = namespaces.elementAt(i)
 *             ns = transcode(nameSpace)             # <<<<<<<<<<<<<<
 *             print("namespace {}".format(ns))
 *             if "xbrl.org" in ns or "fasb" in ns or "www.w3.org" in ns:
 */
      __pyx_v_ns = xercesc::XMLString::transcode(__pyx_v_nameSpace);

      /* "arelle_cython/arelle_c/xerces.pxi":740
 *             nameSpace = namespaces.elementAt(i)
 *             ns = transcode(nameSpace)
 *             print("namespace {}".format(ns))             # <<<<<<<<<<<<<<
 *             if "xbrl.org" in ns or "fasb" in ns or "www.w3.org" in ns:
 *                 continue
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_namespace, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyUnicode_FromString(__pyx_v_ns); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 740, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 740, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 740, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_t_5};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 740, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 740, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 740, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 740, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "arelle_cython/arelle_c/xerces.pxi":741
 *             ns = transcode(nameSpace)
 *             print("namespace {}".format(ns))
 *             if "xbrl.org" in ns or "fasb" in ns or "www.w3.org" in ns:             # <<<<<<<<<<<<<<
 *                 continue
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 */
      __pyx_t_1 = __Pyx_PyUnicode_FromString(__pyx_v_ns); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 741, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_xbrl_org, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(6, 741, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = (__pyx_t_12 != 0);
      if (!__pyx_t_13) {
      } else {
        __pyx_t_6 = __pyx_t_13;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_1 = __Pyx_PyUnicode_FromString(__pyx_v_ns); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 741, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_fasb, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(6, 741, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = (__pyx_t_13 != 0);
      if (!__pyx_t_12) {
      } else {
        __pyx_t_6 = __pyx_t_12;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_1 = __Pyx_PyUnicode_FromString(__pyx_v_ns); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 741, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_www_w3_org, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(6, 741, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = (__pyx_t_12 != 0);
      __pyx_t_6 = __pyx_t_13;
      __pyx_L12_bool_binop_done:;
      if (__pyx_t_6) {

        /* "arelle_cython/arelle_c/xerces.pxi":742
 *             print("namespace {}".format(ns))
 *             if "xbrl.org" in ns or "fasb" in ns or "www.w3.org" in ns:
 *                 continue             # <<<<<<<<<<<<<<
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 */
        goto __pyx_L9_continue;

        /* "arelle_cython/arelle_c/xerces.pxi":741
 *             ns = transcode(nameSpace)
 *             print("namespace {}".format(ns))
 *             if "xbrl.org" in ns or "fasb" in ns or "www.w3.org" in ns:             # <<<<<<<<<<<<<<
 *                 continue
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 */
      }

      /* "arelle_cython/arelle_c/xerces.pxi":743
 *             if "xbrl.org" in ns or "fasb" in ns or "www.w3.org" in ns:
 *                 continue
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)             # <<<<<<<<<<<<<<
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 *                 print("no elements")
 */
      __pyx_v_xsObjects = __pyx_v_xsModel->getComponentsByNamespace(xercesc::XSConstants::ELEMENT_DECLARATION, __pyx_v_nameSpace);

      /* "arelle_cython/arelle_c/xerces.pxi":744
 *                 continue
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:             # <<<<<<<<<<<<<<
 *                 print("no elements")
 *             else:
 */
      __pyx_t_13 = ((__pyx_v_xsObjects == NULL) != 0);
      if (!__pyx_t_13) {
      } else {
        __pyx_t_6 = __pyx_t_13;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_13 = ((__pyx_v_xsObjects->getLength() == 0) != 0);
      __pyx_t_6 = __pyx_t_13;
      __pyx_L16_bool_binop_done:;
      if (__pyx_t_6) {

        /* "arelle_cython/arelle_c/xerces.pxi":745
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 *                 print("no elements")             # <<<<<<<<<<<<<<
 *             else:
 *                 for j in range(xsObjects.getLength()):
 */
        if (__Pyx_PrintOne(0, __pyx_kp_s_no_elements) < 0) __PYX_ERR(6, 745, __pyx_L1_error)

        /* "arelle_cython/arelle_c/xerces.pxi":744
 *                 continue
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:             # <<<<<<<<<<<<<<
 *                 print("no elements")
 *             else:
 */
        goto __pyx_L15;
      }

      /* "arelle_cython/arelle_c/xerces.pxi":747
 *                 print("no elements")
 *             else:
 *                 for j in range(xsObjects.getLength()):             # <<<<<<<<<<<<<<
 *                     xsElement = <XSElementDeclaration *>xsObjects.item(j)
 *                     print("element {} {}".format(j, transcode(xsElement.getName())))
 */
      /*else*/ {
        __pyx_t_14 = __pyx_v_xsObjects->getLength();
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_v_j = __pyx_t_15;

          /* "arelle_cython/arelle_c/xerces.pxi":748
 *             else:
 *                 for j in range(xsObjects.getLength()):
 *                     xsElement = <XSElementDeclaration *>xsObjects.item(j)             # <<<<<<<<<<<<<<
 *                     print("element {} {}".format(j, transcode(xsElement.getName())))
 *                     annotation = xsElement.getAnnotation()
 */
          __pyx_v_xsElement = ((xercesc::XSElementDeclaration *)__pyx_v_xsObjects->item(__pyx_v_j));

          /* "arelle_cython/arelle_c/xerces.pxi":749
 *                 for j in range(xsObjects.getLength()):
 *                     xsElement = <XSElementDeclaration *>xsObjects.item(j)
 *                     print("element {} {}".format(j, transcode(xsElement.getName())))             # <<<<<<<<<<<<<<
 *                     annotation = xsElement.getAnnotation()
 *                     while (annotation != NULL):
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_element_2, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 749, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 749, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_xsElement->getName())); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 749, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_3 = NULL;
          __pyx_t_16 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_16 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_2)) {
            PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_4, __pyx_t_5};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 749, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
            PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_4, __pyx_t_5};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_16, 2+__pyx_t_16); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 749, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else
          #endif
          {
            __pyx_t_17 = PyTuple_New(2+__pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(6, 749, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            if (__pyx_t_3) {
              __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_3); __pyx_t_3 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_4);
            PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_16, __pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_16, __pyx_t_5);
            __pyx_t_4 = 0;
            __pyx_t_5 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 749, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 749, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "arelle_cython/arelle_c/xerces.pxi":750
 *                     xsElement = <XSElementDeclaration *>xsObjects.item(j)
 *                     print("element {} {}".format(j, transcode(xsElement.getName())))
 *                     annotation = xsElement.getAnnotation()             # <<<<<<<<<<<<<<
 *                     while (annotation != NULL):
 *                         annotationText = annotation.getAnnotationString()
 */
          __pyx_v_annotation = __pyx_v_xsElement->getAnnotation();

          /* "arelle_cython/arelle_c/xerces.pxi":751
 *                     print("element {} {}".format(j, transcode(xsElement.getName())))
 *                     annotation = xsElement.getAnnotation()
 *                     while (annotation != NULL):             # <<<<<<<<<<<<<<
 *                         annotationText = annotation.getAnnotationString()
 *                         if annotationText != NULL:
 */
          while (1) {
            __pyx_t_6 = ((__pyx_v_annotation != NULL) != 0);
            if (!__pyx_t_6) break;

            /* "arelle_cython/arelle_c/xerces.pxi":752
 *                     annotation = xsElement.getAnnotation()
 *                     while (annotation != NULL):
 *                         annotationText = annotation.getAnnotationString()             # <<<<<<<<<<<<<<
 *                         if annotationText != NULL:
 *                             print("    annotation={}".format(transcode(annotationText)))
 */
            __pyx_v_annotationText = __pyx_v_annotation->getAnnotationString();

            /* "arelle_cython/arelle_c/xerces.pxi":753
 *                     while (annotation != NULL):
 *                         annotationText = annotation.getAnnotationString()
 *                         if annotationText != NULL:             # <<<<<<<<<<<<<<
 *                             print("    annotation={}".format(transcode(annotationText)))
 *                         else:
 */
            __pyx_t_6 = ((__pyx_v_annotationText != NULL) != 0);
            if (__pyx_t_6) {

              /* "arelle_cython/arelle_c/xerces.pxi":754
 *                         annotationText = annotation.getAnnotationString()
 *                         if annotationText != NULL:
 *                             print("    annotation={}".format(transcode(annotationText)))             # <<<<<<<<<<<<<<
 *                         else:
 *                             print("    null annotation string")
 */
              __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_annotation_3, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 754, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_17 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_annotationText)); if (unlikely(!__pyx_t_17)) __PYX_ERR(6, 754, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_5 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
                __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
                if (likely(__pyx_t_5)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                  __Pyx_INCREF(__pyx_t_5);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_2, function);
                }
              }
              if (!__pyx_t_5) {
                __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_17); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 754, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_GOTREF(__pyx_t_1);
              } else {
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_2)) {
                  PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_17};
                  __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 754, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
                  PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_17};
                  __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 754, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                } else
                #endif
                {
                  __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 754, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
                  __Pyx_GIVEREF(__pyx_t_17);
                  PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_17);
                  __pyx_t_17 = 0;
                  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 754, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                }
              }
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 754, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "arelle_cython/arelle_c/xerces.pxi":753
 *                     while (annotation != NULL):
 *                         annotationText = annotation.getAnnotationString()
 *                         if annotationText != NULL:             # <<<<<<<<<<<<<<
 *                             print("    annotation={}".format(transcode(annotationText)))
 *                         else:
 */
              goto __pyx_L22;
            }

            /* "arelle_cython/arelle_c/xerces.pxi":756
 *                             print("    annotation={}".format(transcode(annotationText)))
 *                         else:
 *                             print("    null annotation string")             # <<<<<<<<<<<<<<
 *                         annotation = annotation.getNext()
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)
 */
            /*else*/ {
              if (__Pyx_PrintOne(0, __pyx_kp_s_null_annotation_string_2) < 0) __PYX_ERR(6, 756, __pyx_L1_error)
            }
            __pyx_L22:;

            /* "arelle_cython/arelle_c/xerces.pxi":757
 *                         else:
 *                             print("    null annotation string")
 *                         annotation = annotation.getNext()             # <<<<<<<<<<<<<<
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 */
            __pyx_v_annotation = __pyx_v_annotation->getNext();
          }
        }
      }
      __pyx_L15:;

      /* "arelle_cython/arelle_c/xerces.pxi":758
 *                             print("    null annotation string")
 *                         annotation = annotation.getNext()
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)             # <<<<<<<<<<<<<<
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 *                 print("no types")
 */
      __pyx_v_xsObjects = __pyx_v_xsModel->getComponentsByNamespace(xercesc::XSConstants::TYPE_DEFINITION, __pyx_v_nameSpace);

      /* "arelle_cython/arelle_c/xerces.pxi":759
 *                         annotation = annotation.getNext()
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:             # <<<<<<<<<<<<<<
 *                 print("no types")
 *             else:
 */
      __pyx_t_13 = ((__pyx_v_xsObjects == NULL) != 0);
      if (!__pyx_t_13) {
      } else {
        __pyx_t_6 = __pyx_t_13;
        goto __pyx_L24_bool_binop_done;
      }
      __pyx_t_13 = ((__pyx_v_xsObjects->getLength() == 0) != 0);
      __pyx_t_6 = __pyx_t_13;
      __pyx_L24_bool_binop_done:;
      if (__pyx_t_6) {

        /* "arelle_cython/arelle_c/xerces.pxi":760
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 *                 print("no types")             # <<<<<<<<<<<<<<
 *             else:
 *                 for j in range(xsObjects.getLength()):
 */
        if (__Pyx_PrintOne(0, __pyx_kp_s_no_types) < 0) __PYX_ERR(6, 760, __pyx_L1_error)

        /* "arelle_cython/arelle_c/xerces.pxi":759
 *                         annotation = annotation.getNext()
 *             xsObjects = xsModel.getComponentsByNamespace(TYPE_DEFINITION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:             # <<<<<<<<<<<<<<
 *                 print("no types")
 *             else:
 */
        goto __pyx_L23;
      }

      /* "arelle_cython/arelle_c/xerces.pxi":762
 *                 print("no types")
 *             else:
 *                 for j in range(xsObjects.getLength()):             # <<<<<<<<<<<<<<
 *                     xsTypeDefinition = <XSTypeDefinition *>xsObjects.item(j)
 *                     print("type {} {} {}".format(j,
 */
      /*else*/ {
        __pyx_t_14 = __pyx_v_xsObjects->getLength();
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_v_j = __pyx_t_15;

          /* "arelle_cython/arelle_c/xerces.pxi":763
 *             else:
 *                 for j in range(xsObjects.getLength()):
 *                     xsTypeDefinition = <XSTypeDefinition *>xsObjects.item(j)             # <<<<<<<<<<<<<<
 *                     print("type {} {} {}".format(j,
 *                                                  "SIMPLE" if xsTypeDefinition.getTypeCategory() == 16 else "COMPLEX",
 */
          __pyx_v_xsTypeDefinition = ((xercesc::XSTypeDefinition *)__pyx_v_xsObjects->item(__pyx_v_j));

          /* "arelle_cython/arelle_c/xerces.pxi":764
 *                 for j in range(xsObjects.getLength()):
 *                     xsTypeDefinition = <XSTypeDefinition *>xsObjects.item(j)
 *                     print("type {} {} {}".format(j,             # <<<<<<<<<<<<<<
 *                                                  "SIMPLE" if xsTypeDefinition.getTypeCategory() == 16 else "COMPLEX",
 *                                                  transcode(xsTypeDefinition.getName())))
 */
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_type_3, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 764, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 764, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);

          /* "arelle_cython/arelle_c/xerces.pxi":765
 *                     xsTypeDefinition = <XSTypeDefinition *>xsObjects.item(j)
 *                     print("type {} {} {}".format(j,
 *                                                  "SIMPLE" if xsTypeDefinition.getTypeCategory() == 16 else "COMPLEX",             # <<<<<<<<<<<<<<
 *                                                  transcode(xsTypeDefinition.getName())))
 * 
 */
          if (((__pyx_v_xsTypeDefinition->getTypeCategory() == 16) != 0)) {
            __Pyx_INCREF(__pyx_n_s_SIMPLE);
            __pyx_t_17 = __pyx_n_s_SIMPLE;
          } else {
            __Pyx_INCREF(__pyx_n_s_COMPLEX);
            __pyx_t_17 = __pyx_n_s_COMPLEX;
          }

          /* "arelle_cython/arelle_c/xerces.pxi":766
 *                     print("type {} {} {}".format(j,
 *                                                  "SIMPLE" if xsTypeDefinition.getTypeCategory() == 16 else "COMPLEX",
 *                                                  transcode(xsTypeDefinition.getName())))             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_5 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_xsTypeDefinition->getName())); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 766, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_3 = NULL;
          __pyx_t_16 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_2, function);
              __pyx_t_16 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_2)) {
            PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_4, __pyx_t_17, __pyx_t_5};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_16, 3+__pyx_t_16); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 764, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
            PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_4, __pyx_t_17, __pyx_t_5};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_16, 3+__pyx_t_16); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 764, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else
          #endif
          {
            __pyx_t_18 = PyTuple_New(3+__pyx_t_16); if (unlikely(!__pyx_t_18)) __PYX_ERR(6, 764, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_18);
            if (__pyx_t_3) {
              __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_3); __pyx_t_3 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_4);
            PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_16, __pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_17);
            PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_16, __pyx_t_17);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_18, 2+__pyx_t_16, __pyx_t_5);
            __pyx_t_4 = 0;
            __pyx_t_17 = 0;
            __pyx_t_5 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 764, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 764, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
      }
      __pyx_L23:;
      __pyx_L9_continue:;
    }

    /* "arelle_cython/arelle_c/xerces.pxi":733
 *     cdef XSElementDeclaration *xsElement
 *     cdef XSTypeDefinition *xsTypeDefinition
 *     if xsModel != NULL:             # <<<<<<<<<<<<<<
 *         namespaces = xsModel.getNamespaces()
 *         namespacesSize = namespaces.size()
 */
    goto __pyx_L8;
  }

  /* "arelle_cython/arelle_c/xerces.pxi":770
 * 
 *     else:
 *         print ("xsModel is null")             # <<<<<<<<<<<<<<
 * 
 * def testsax2( s ):
 */
  /*else*/ {
    if (__Pyx_PrintOne(0, __pyx_kp_s_xsModel_is_null) < 0) __PYX_ERR(6, 770, __pyx_L1_error)
  }
  __pyx_L8:;

  /* "arelle_cython/arelle_c/xerces.pxi":679
 *         print ("xsModel is null")
 * 
 * def testschemaDOM( s ):             # <<<<<<<<<<<<<<
 *     print("trace1")
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("arelle.arelle_c.testschemaDOM", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":772
 *         print ("xsModel is null")
 * 
 * def testsax2( s ):             # <<<<<<<<<<<<<<
 *     global _initialized, _terminated
 *     print("initialized flag {} terminated flag {}".format(_initialized, _terminated));
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_15testsax2(PyObject *__pyx_self, PyObject *__pyx_v_s); /*proto*/
static PyMethodDef __pyx_mdef_6arelle_8arelle_c_15testsax2 = {"testsax2", (PyCFunction)__pyx_pw_6arelle_8arelle_c_15testsax2, METH_O, 0};
static PyObject *__pyx_pw_6arelle_8arelle_c_15testsax2(PyObject *__pyx_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("testsax2 (wrapper)", 0);
  __pyx_r = __pyx_pf_6arelle_8arelle_c_14testsax2(__pyx_self, ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_14testsax2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_s) {
  xercesc::SAX2XMLReader *__pyx_v_parser;
  __pyx_t_6arelle_8arelle_c__ContentHandler *__pyx_v_contentHandler;
  __pyx_t_6arelle_8arelle_c__LexicalHandler *__pyx_v_lexicalHandler;
  __pyx_t_6arelle_8arelle_c__ErrorHandler *__pyx_v_errorHandler;
  std::string __pyx_v_std_s;
  bool __pyx_v_adoptBuffer;
  xercesc::MemBufInputSource *__pyx_v_inpSrc;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __pyx_t_6arelle_8arelle_c__ContentHandler *__pyx_t_8;
  __pyx_t_6arelle_8arelle_c__LexicalHandler *__pyx_t_9;
  __pyx_t_6arelle_8arelle_c__ErrorHandler *__pyx_t_10;
  std::string __pyx_t_11;
  __Pyx_RefNannySetupContext("testsax2", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":774
 * def testsax2( s ):
 *     global _initialized, _terminated
 *     print("initialized flag {} terminated flag {}".format(_initialized, _terminated));             # <<<<<<<<<<<<<<
 * 
 *     cdef SAX2XMLReader * parser = createXMLReader()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_initialized_flag_terminated_flag, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_6arelle_8arelle_c__initialized); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_6arelle_8arelle_c__terminated); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 774, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 774, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(6, 774, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":776
 *     print("initialized flag {} terminated flag {}".format(_initialized, _terminated));
 * 
 *     cdef SAX2XMLReader * parser = createXMLReader()             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgSAX2CoreValidation, True)
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)
 */
  __pyx_v_parser = xercesc::XMLReaderFactory::createXMLReader();

  /* "arelle_cython/arelle_c/xerces.pxi":777
 * 
 *     cdef SAX2XMLReader * parser = createXMLReader()
 *     parser.setFeature(fgSAX2CoreValidation, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)
 *     parser.setFeature(fgXercesSchema, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgSAX2CoreValidation, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":778
 *     cdef SAX2XMLReader * parser = createXMLReader()
 *     parser.setFeature(fgSAX2CoreValidation, True)
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesSchema, True)
 *     parser.setFeature(fgXercesSchemaFullChecking, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgSAX2CoreNameSpaces, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":779
 *     parser.setFeature(fgSAX2CoreValidation, True)
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)
 *     parser.setFeature(fgXercesSchema, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesSchemaFullChecking, True)
 *     cdef _ContentHandler * contentHandler = new _ContentHandler(999891)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesSchema, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":780
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)
 *     parser.setFeature(fgXercesSchema, True)
 *     parser.setFeature(fgXercesSchemaFullChecking, True)             # <<<<<<<<<<<<<<
 *     cdef _ContentHandler * contentHandler = new _ContentHandler(999891)
 *     cdef _LexicalHandler * lexicalHandler = new _LexicalHandler(999891)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesSchemaFullChecking, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":781
 *     parser.setFeature(fgXercesSchema, True)
 *     parser.setFeature(fgXercesSchemaFullChecking, True)
 *     cdef _ContentHandler * contentHandler = new _ContentHandler(999891)             # <<<<<<<<<<<<<<
 *     cdef _LexicalHandler * lexicalHandler = new _LexicalHandler(999891)
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 */
  try {
    __pyx_t_8 = new __pyx_t_6arelle_8arelle_c__ContentHandler(0xF41D3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 781, __pyx_L1_error)
  }
  __pyx_v_contentHandler = __pyx_t_8;

  /* "arelle_cython/arelle_c/xerces.pxi":782
 *     parser.setFeature(fgXercesSchemaFullChecking, True)
 *     cdef _ContentHandler * contentHandler = new _ContentHandler(999891)
 *     cdef _LexicalHandler * lexicalHandler = new _LexicalHandler(999891)             # <<<<<<<<<<<<<<
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     print("trace5")
 */
  try {
    __pyx_t_9 = new __pyx_t_6arelle_8arelle_c__LexicalHandler(0xF41D3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 782, __pyx_L1_error)
  }
  __pyx_v_lexicalHandler = __pyx_t_9;

  /* "arelle_cython/arelle_c/xerces.pxi":783
 *     cdef _ContentHandler * contentHandler = new _ContentHandler(999891)
 *     cdef _LexicalHandler * lexicalHandler = new _LexicalHandler(999891)
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()             # <<<<<<<<<<<<<<
 *     print("trace5")
 *     parser.setContentHandler(contentHandler)
 */
  try {
    __pyx_t_10 = new __pyx_t_6arelle_8arelle_c__ErrorHandler();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 783, __pyx_L1_error)
  }
  __pyx_v_errorHandler = __pyx_t_10;

  /* "arelle_cython/arelle_c/xerces.pxi":784
 *     cdef _LexicalHandler * lexicalHandler = new _LexicalHandler(999891)
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     print("trace5")             # <<<<<<<<<<<<<<
 *     parser.setContentHandler(contentHandler)
 *     parser.setLexicalHandler(lexicalHandler)
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace5) < 0) __PYX_ERR(6, 784, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":785
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     print("trace5")
 *     parser.setContentHandler(contentHandler)             # <<<<<<<<<<<<<<
 *     parser.setLexicalHandler(lexicalHandler)
 *     print("trace6")
 */
  __pyx_v_parser->setContentHandler(__pyx_v_contentHandler);

  /* "arelle_cython/arelle_c/xerces.pxi":786
 *     print("trace5")
 *     parser.setContentHandler(contentHandler)
 *     parser.setLexicalHandler(lexicalHandler)             # <<<<<<<<<<<<<<
 *     print("trace6")
 *     parser.setErrorHandler(errorHandler)
 */
  __pyx_v_parser->setLexicalHandler(__pyx_v_lexicalHandler);

  /* "arelle_cython/arelle_c/xerces.pxi":787
 *     parser.setContentHandler(contentHandler)
 *     parser.setLexicalHandler(lexicalHandler)
 *     print("trace6")             # <<<<<<<<<<<<<<
 *     parser.setErrorHandler(errorHandler)
 *     print("trace7")
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace6) < 0) __PYX_ERR(6, 787, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":788
 *     parser.setLexicalHandler(lexicalHandler)
 *     print("trace6")
 *     parser.setErrorHandler(errorHandler)             # <<<<<<<<<<<<<<
 *     print("trace7")
 *     cdef string std_s = s
 */
  __pyx_v_parser->setErrorHandler(__pyx_v_errorHandler);

  /* "arelle_cython/arelle_c/xerces.pxi":789
 *     print("trace6")
 *     parser.setErrorHandler(errorHandler)
 *     print("trace7")             # <<<<<<<<<<<<<<
 *     cdef string std_s = s
 *     print("trace8")
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace7) < 0) __PYX_ERR(6, 789, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":790
 *     parser.setErrorHandler(errorHandler)
 *     print("trace7")
 *     cdef string std_s = s             # <<<<<<<<<<<<<<
 *     print("trace8")
 *     cdef bool adoptBuffer = False
 */
  __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 790, __pyx_L1_error)
  __pyx_v_std_s = __pyx_t_11;

  /* "arelle_cython/arelle_c/xerces.pxi":791
 *     print("trace7")
 *     cdef string std_s = s
 *     print("trace8")             # <<<<<<<<<<<<<<
 *     cdef bool adoptBuffer = False
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace8) < 0) __PYX_ERR(6, 791, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":792
 *     cdef string std_s = s
 *     print("trace8")
 *     cdef bool adoptBuffer = False             # <<<<<<<<<<<<<<
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 *     parser.parse( deref( inpSrc ))
 */
  __pyx_v_adoptBuffer = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":793
 *     print("trace8")
 *     cdef bool adoptBuffer = False
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))             # <<<<<<<<<<<<<<
 *     parser.parse( deref( inpSrc ))
 *     print("trace10")
 */
  __pyx_v_inpSrc = new xercesc::MemBufInputSource(((__pyx_t_8arelle_c_13xerces_ctypes_XMLByte *)__pyx_v_std_s.c_str()), __pyx_v_std_s.size(), __pyx_v_6arelle_8arelle_c_nsNoNamespace, __pyx_v_adoptBuffer);

  /* "arelle_cython/arelle_c/xerces.pxi":794
 *     cdef bool adoptBuffer = False
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 *     parser.parse( deref( inpSrc ))             # <<<<<<<<<<<<<<
 *     print("trace10")
 * 
 */
  __pyx_v_parser->parse((*__pyx_v_inpSrc));

  /* "arelle_cython/arelle_c/xerces.pxi":795
 *     cdef MemBufInputSource* inpSrc = ( new MemBufInputSource( <XMLByte*> std_s.c_str(), std_s.size(), nsNoNamespace, adoptBuffer ))
 *     parser.parse( deref( inpSrc ))
 *     print("trace10")             # <<<<<<<<<<<<<<
 * 
 * def testsax2incremental( ignore, instDocFile, ignore2 ):
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_trace10) < 0) __PYX_ERR(6, 795, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":772
 *         print ("xsModel is null")
 * 
 * def testsax2( s ):             # <<<<<<<<<<<<<<
 *     global _initialized, _terminated
 *     print("initialized flag {} terminated flag {}".format(_initialized, _terminated));
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("arelle.arelle_c.testsax2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":797
 *     print("trace10")
 * 
 * def testsax2incremental( ignore, instDocFile, ignore2 ):             # <<<<<<<<<<<<<<
 *     global lastParsedQName
 *     cdef SAX2XMLReader * parser = createXMLReader()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_17testsax2incremental(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6arelle_8arelle_c_17testsax2incremental = {"testsax2incremental", (PyCFunction)__pyx_pw_6arelle_8arelle_c_17testsax2incremental, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6arelle_8arelle_c_17testsax2incremental(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_ignore = 0;
  PyObject *__pyx_v_instDocFile = 0;
  CYTHON_UNUSED PyObject *__pyx_v_ignore2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("testsax2incremental (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ignore,&__pyx_n_s_instDocFile,&__pyx_n_s_ignore2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ignore)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_instDocFile)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("testsax2incremental", 1, 3, 3, 1); __PYX_ERR(6, 797, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ignore2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("testsax2incremental", 1, 3, 3, 2); __PYX_ERR(6, 797, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "testsax2incremental") < 0)) __PYX_ERR(6, 797, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_ignore = values[0];
    __pyx_v_instDocFile = values[1];
    __pyx_v_ignore2 = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("testsax2incremental", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 797, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("arelle.arelle_c.testsax2incremental", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6arelle_8arelle_c_16testsax2incremental(__pyx_self, __pyx_v_ignore, __pyx_v_instDocFile, __pyx_v_ignore2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_16testsax2incremental(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_ignore, PyObject *__pyx_v_instDocFile, CYTHON_UNUSED PyObject *__pyx_v_ignore2) {
  xercesc::SAX2XMLReader *__pyx_v_parser;
  __pyx_t_6arelle_8arelle_c__ContentHandler *__pyx_v_contentHandler;
  __pyx_t_6arelle_8arelle_c__LexicalHandler *__pyx_v_lexicalHandler;
  __pyx_t_6arelle_8arelle_c__ErrorHandler *__pyx_v_errorHandler;
  PyObject *__pyx_v_byte_s = NULL;
  char const *__pyx_v_c_s;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_xmlChFile;
  xercesc::LocalFileInputSource *__pyx_v_inpSrc;
  xercesc::XMLPScanToken *__pyx_v_token;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_6arelle_8arelle_c__ContentHandler *__pyx_t_1;
  __pyx_t_6arelle_8arelle_c__LexicalHandler *__pyx_t_2;
  __pyx_t_6arelle_8arelle_c__ErrorHandler *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  char __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("testsax2incremental", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":799
 * def testsax2incremental( ignore, instDocFile, ignore2 ):
 *     global lastParsedQName
 *     cdef SAX2XMLReader * parser = createXMLReader()             # <<<<<<<<<<<<<<
 *     cdef _ContentHandler * contentHandler = new _ContentHandler(999891)
 *     cdef _LexicalHandler * lexicalHandler = new _LexicalHandler(999891)
 */
  __pyx_v_parser = xercesc::XMLReaderFactory::createXMLReader();

  /* "arelle_cython/arelle_c/xerces.pxi":800
 *     global lastParsedQName
 *     cdef SAX2XMLReader * parser = createXMLReader()
 *     cdef _ContentHandler * contentHandler = new _ContentHandler(999891)             # <<<<<<<<<<<<<<
 *     cdef _LexicalHandler * lexicalHandler = new _LexicalHandler(999891)
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 */
  try {
    __pyx_t_1 = new __pyx_t_6arelle_8arelle_c__ContentHandler(0xF41D3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 800, __pyx_L1_error)
  }
  __pyx_v_contentHandler = __pyx_t_1;

  /* "arelle_cython/arelle_c/xerces.pxi":801
 *     cdef SAX2XMLReader * parser = createXMLReader()
 *     cdef _ContentHandler * contentHandler = new _ContentHandler(999891)
 *     cdef _LexicalHandler * lexicalHandler = new _LexicalHandler(999891)             # <<<<<<<<<<<<<<
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     parser.setContentHandler(contentHandler)
 */
  try {
    __pyx_t_2 = new __pyx_t_6arelle_8arelle_c__LexicalHandler(0xF41D3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 801, __pyx_L1_error)
  }
  __pyx_v_lexicalHandler = __pyx_t_2;

  /* "arelle_cython/arelle_c/xerces.pxi":802
 *     cdef _ContentHandler * contentHandler = new _ContentHandler(999891)
 *     cdef _LexicalHandler * lexicalHandler = new _LexicalHandler(999891)
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()             # <<<<<<<<<<<<<<
 *     parser.setContentHandler(contentHandler)
 *     parser.setLexicalHandler(lexicalHandler)
 */
  try {
    __pyx_t_3 = new __pyx_t_6arelle_8arelle_c__ErrorHandler();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 802, __pyx_L1_error)
  }
  __pyx_v_errorHandler = __pyx_t_3;

  /* "arelle_cython/arelle_c/xerces.pxi":803
 *     cdef _LexicalHandler * lexicalHandler = new _LexicalHandler(999891)
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     parser.setContentHandler(contentHandler)             # <<<<<<<<<<<<<<
 *     parser.setLexicalHandler(lexicalHandler)
 *     parser.setErrorHandler(errorHandler)
 */
  __pyx_v_parser->setContentHandler(__pyx_v_contentHandler);

  /* "arelle_cython/arelle_c/xerces.pxi":804
 *     cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     parser.setContentHandler(contentHandler)
 *     parser.setLexicalHandler(lexicalHandler)             # <<<<<<<<<<<<<<
 *     parser.setErrorHandler(errorHandler)
 *     byte_s = instDocFile.encode("utf-8")
 */
  __pyx_v_parser->setLexicalHandler(__pyx_v_lexicalHandler);

  /* "arelle_cython/arelle_c/xerces.pxi":805
 *     parser.setContentHandler(contentHandler)
 *     parser.setLexicalHandler(lexicalHandler)
 *     parser.setErrorHandler(errorHandler)             # <<<<<<<<<<<<<<
 *     byte_s = instDocFile.encode("utf-8")
 *     cdef const char* c_s = byte_s
 */
  __pyx_v_parser->setErrorHandler(__pyx_v_errorHandler);

  /* "arelle_cython/arelle_c/xerces.pxi":806
 *     parser.setLexicalHandler(lexicalHandler)
 *     parser.setErrorHandler(errorHandler)
 *     byte_s = instDocFile.encode("utf-8")             # <<<<<<<<<<<<<<
 *     cdef const char* c_s = byte_s
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_instDocFile, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_byte_s = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":807
 *     parser.setErrorHandler(errorHandler)
 *     byte_s = instDocFile.encode("utf-8")
 *     cdef const char* c_s = byte_s             # <<<<<<<<<<<<<<
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_byte_s); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(6, 807, __pyx_L1_error)
  __pyx_v_c_s = __pyx_t_6;

  /* "arelle_cython/arelle_c/xerces.pxi":808
 *     byte_s = instDocFile.encode("utf-8")
 *     cdef const char* c_s = byte_s
 *     cdef XMLCh* xmlChFile = transcode(c_s)             # <<<<<<<<<<<<<<
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *     cdef XMLPScanToken* token = new XMLPScanToken()
 */
  __pyx_v_xmlChFile = xercesc::XMLString::transcode(__pyx_v_c_s);

  /* "arelle_cython/arelle_c/xerces.pxi":809
 *     cdef const char* c_s = byte_s
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))             # <<<<<<<<<<<<<<
 *     cdef XMLPScanToken* token = new XMLPScanToken()
 *     cdef bool result
 */
  __pyx_v_inpSrc = new xercesc::LocalFileInputSource(__pyx_v_xmlChFile);

  /* "arelle_cython/arelle_c/xerces.pxi":810
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *     cdef XMLPScanToken* token = new XMLPScanToken()             # <<<<<<<<<<<<<<
 *     cdef bool result
 *     result = parser.parseFirst(deref( inpSrc ), deref(token) )
 */
  __pyx_v_token = new xercesc::XMLPScanToken();

  /* "arelle_cython/arelle_c/xerces.pxi":812
 *     cdef XMLPScanToken* token = new XMLPScanToken()
 *     cdef bool result
 *     result = parser.parseFirst(deref( inpSrc ), deref(token) )             # <<<<<<<<<<<<<<
 *     print("parse first {}".format(result))
 *     while result:
 */
  __pyx_v_result = __pyx_v_parser->parseFirst((*__pyx_v_inpSrc), (*__pyx_v_token));

  /* "arelle_cython/arelle_c/xerces.pxi":813
 *     cdef bool result
 *     result = parser.parseFirst(deref( inpSrc ), deref(token) )
 *     print("parse first {}".format(result))             # <<<<<<<<<<<<<<
 *     while result:
 *         if lastParsedQName == NULL:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_parse_first, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 813, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 813, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 813, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 813, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":814
 *     result = parser.parseFirst(deref( inpSrc ), deref(token) )
 *     print("parse first {}".format(result))
 *     while result:             # <<<<<<<<<<<<<<
 *         if lastParsedQName == NULL:
 *             print("lastParsedToken null")
 */
  while (1) {
    __pyx_t_10 = (__pyx_v_result != 0);
    if (!__pyx_t_10) break;

    /* "arelle_cython/arelle_c/xerces.pxi":815
 *     print("parse first {}".format(result))
 *     while result:
 *         if lastParsedQName == NULL:             # <<<<<<<<<<<<<<
 *             print("lastParsedToken null")
 *         else:
 */
    __pyx_t_10 = ((__pyx_v_6arelle_8arelle_c_lastParsedQName == NULL) != 0);
    if (__pyx_t_10) {

      /* "arelle_cython/arelle_c/xerces.pxi":816
 *     while result:
 *         if lastParsedQName == NULL:
 *             print("lastParsedToken null")             # <<<<<<<<<<<<<<
 *         else:
 *             c_s = lastParsedQName
 */
      if (__Pyx_PrintOne(0, __pyx_kp_s_lastParsedToken_null) < 0) __PYX_ERR(6, 816, __pyx_L1_error)

      /* "arelle_cython/arelle_c/xerces.pxi":815
 *     print("parse first {}".format(result))
 *     while result:
 *         if lastParsedQName == NULL:             # <<<<<<<<<<<<<<
 *             print("lastParsedToken null")
 *         else:
 */
      goto __pyx_L5;
    }

    /* "arelle_cython/arelle_c/xerces.pxi":818
 *             print("lastParsedToken null")
 *         else:
 *             c_s = lastParsedQName             # <<<<<<<<<<<<<<
 *             print("lastParsedToken {}".format(c_s))
 *             if lastParsedQName[0] not in (b'x', b'l'):
 */
    /*else*/ {
      __pyx_v_c_s = __pyx_v_6arelle_8arelle_c_lastParsedQName;

      /* "arelle_cython/arelle_c/xerces.pxi":819
 *         else:
 *             c_s = lastParsedQName
 *             print("lastParsedToken {}".format(c_s))             # <<<<<<<<<<<<<<
 *             if lastParsedQName[0] not in (b'x', b'l'):
 *                 parser.parseReset(deref(token))
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_lastParsedToken, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 819, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyUnicode_FromString(__pyx_v_c_s); if (unlikely(!__pyx_t_9)) __PYX_ERR(6, 819, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 819, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_9};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 819, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_9};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 819, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 819, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 819, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 819, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "arelle_cython/arelle_c/xerces.pxi":820
 *             c_s = lastParsedQName
 *             print("lastParsedToken {}".format(c_s))
 *             if lastParsedQName[0] not in (b'x', b'l'):             # <<<<<<<<<<<<<<
 *                 parser.parseReset(deref(token))
 *                 token = NULL
 */
      __pyx_t_11 = (__pyx_v_6arelle_8arelle_c_lastParsedQName[0]);
      __pyx_t_12 = ((__pyx_t_11 != 'x') != 0);
      if (__pyx_t_12) {
      } else {
        __pyx_t_10 = __pyx_t_12;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_12 = ((__pyx_t_11 != 'l') != 0);
      __pyx_t_10 = __pyx_t_12;
      __pyx_L7_bool_binop_done:;
      __pyx_t_12 = (__pyx_t_10 != 0);
      if (__pyx_t_12) {

        /* "arelle_cython/arelle_c/xerces.pxi":821
 *             print("lastParsedToken {}".format(c_s))
 *             if lastParsedQName[0] not in (b'x', b'l'):
 *                 parser.parseReset(deref(token))             # <<<<<<<<<<<<<<
 *                 token = NULL
 *                 break
 */
        __pyx_v_parser->parseReset((*__pyx_v_token));

        /* "arelle_cython/arelle_c/xerces.pxi":822
 *             if lastParsedQName[0] not in (b'x', b'l'):
 *                 parser.parseReset(deref(token))
 *                 token = NULL             # <<<<<<<<<<<<<<
 *                 break
 *         result = parser.parseNext(deref(token))
 */
        __pyx_v_token = NULL;

        /* "arelle_cython/arelle_c/xerces.pxi":823
 *                 parser.parseReset(deref(token))
 *                 token = NULL
 *                 break             # <<<<<<<<<<<<<<
 *         result = parser.parseNext(deref(token))
 *     print("doneParsedToken {}".format(lastParsedQName))
 */
        goto __pyx_L4_break;

        /* "arelle_cython/arelle_c/xerces.pxi":820
 *             c_s = lastParsedQName
 *             print("lastParsedToken {}".format(c_s))
 *             if lastParsedQName[0] not in (b'x', b'l'):             # <<<<<<<<<<<<<<
 *                 parser.parseReset(deref(token))
 *                 token = NULL
 */
      }
    }
    __pyx_L5:;

    /* "arelle_cython/arelle_c/xerces.pxi":824
 *                 token = NULL
 *                 break
 *         result = parser.parseNext(deref(token))             # <<<<<<<<<<<<<<
 *     print("doneParsedToken {}".format(lastParsedQName))
 * 
 */
    __pyx_v_result = __pyx_v_parser->parseNext((*__pyx_v_token));
  }
  __pyx_L4_break:;

  /* "arelle_cython/arelle_c/xerces.pxi":825
 *                 break
 *         result = parser.parseNext(deref(token))
 *     print("doneParsedToken {}".format(lastParsedQName))             # <<<<<<<<<<<<<<
 * 
 * def validate( txmyFile, instFile, schemaLocation ):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_doneParsedToken, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyUnicode_FromString(__pyx_v_6arelle_8arelle_c_lastParsedQName); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_9) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 825, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 825, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 825, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 825, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 825, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(6, 825, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":797
 *     print("trace10")
 * 
 * def testsax2incremental( ignore, instDocFile, ignore2 ):             # <<<<<<<<<<<<<<
 *     global lastParsedQName
 *     cdef SAX2XMLReader * parser = createXMLReader()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("arelle.arelle_c.testsax2incremental", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_byte_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "arelle_cython/arelle_c/xerces.pxi":827
 *     print("doneParsedToken {}".format(lastParsedQName))
 * 
 * def validate( txmyFile, instFile, schemaLocation ):             # <<<<<<<<<<<<<<
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6arelle_8arelle_c_19validate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6arelle_8arelle_c_19validate = {"validate", (PyCFunction)__pyx_pw_6arelle_8arelle_c_19validate, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6arelle_8arelle_c_19validate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_txmyFile = 0;
  PyObject *__pyx_v_instFile = 0;
  PyObject *__pyx_v_schemaLocation = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("validate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_txmyFile,&__pyx_n_s_instFile,&__pyx_n_s_schemaLocation,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_txmyFile)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_instFile)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("validate", 1, 3, 3, 1); __PYX_ERR(6, 827, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_schemaLocation)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("validate", 1, 3, 3, 2); __PYX_ERR(6, 827, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "validate") < 0)) __PYX_ERR(6, 827, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_txmyFile = values[0];
    __pyx_v_instFile = values[1];
    __pyx_v_schemaLocation = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("validate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 827, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("arelle.arelle_c.validate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6arelle_8arelle_c_18validate(__pyx_self, __pyx_v_txmyFile, __pyx_v_instFile, __pyx_v_schemaLocation);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6arelle_8arelle_c_18validate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_txmyFile, PyObject *__pyx_v_instFile, PyObject *__pyx_v_schemaLocation) {
  xercesc::XMLGrammarPool *__pyx_v_grammarPool;
  xercesc::SAX2XMLReader *__pyx_v_parser;
  PyObject *__pyx_v_pyRootDict = 0;
  void *__pyx_v_pyRootDictPtr;
  __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler *__pyx_v_lxmlSaxHandler;
  __pyx_t_6arelle_8arelle_c__LXMLSAX2Resolver *__pyx_v_lxmlSaxResolver;
  PyObject *__pyx_v_byte_s = NULL;
  char const *__pyx_v_c_s;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_xmlChFile;
  xercesc::LocalFileInputSource *__pyx_v_inpSrc;
  CYTHON_UNUSED xercesc::SchemaGrammar *__pyx_v_schemaGrammar;
  bool __pyx_v_updatedXSModel;
  xercesc::XSModel *__pyx_v_xsModel;
  __pyx_t_8arelle_c_16xerces_framework_StringList *__pyx_v_namespaces;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_v_namespacesSize;
  unsigned int __pyx_v_i;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh const *__pyx_v_nameSpace;
  xercesc::XSNamedMap<xercesc::XSObject>  *__pyx_v_xsObjects;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLCh *__pyx_v_xmlChSchemaLocation;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler *__pyx_t_4;
  __pyx_t_6arelle_8arelle_c__LXMLSAX2Resolver *__pyx_t_5;
  char const *__pyx_t_6;
  int __pyx_t_7;
  __pyx_t_8arelle_c_13xerces_ctypes_XMLSize_t __pyx_t_8;
  unsigned int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  __Pyx_RefNannySetupContext("validate", 0);

  /* "arelle_cython/arelle_c/xerces.pxi":828
 * 
 * def validate( txmyFile, instFile, schemaLocation ):
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)             # <<<<<<<<<<<<<<
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)
 */
  __pyx_v_grammarPool = new xercesc::XMLGrammarPoolImpl(xercesc::XMLPlatformUtils::fgMemoryManager);

  /* "arelle_cython/arelle_c/xerces.pxi":829
 * def validate( txmyFile, instFile, schemaLocation ):
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)
 *     parser.setFeature(fgXercesSchema, True)
 */
  __pyx_v_parser = xercesc::XMLReaderFactory::createXMLReader(xercesc::XMLPlatformUtils::fgMemoryManager, __pyx_v_grammarPool);

  /* "arelle_cython/arelle_c/xerces.pxi":830
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesSchema, True)
 *     parser.setFeature(fgXercesHandleMultipleImports, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgSAX2CoreNameSpaces, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":831
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)
 *     parser.setFeature(fgXercesSchema, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesHandleMultipleImports, True)
 *     parser.setFeature(fgXercesSchemaFullChecking, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesSchema, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":832
 *     parser.setFeature(fgSAX2CoreNameSpaces, True)
 *     parser.setFeature(fgXercesSchema, True)
 *     parser.setFeature(fgXercesHandleMultipleImports, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesSchemaFullChecking, True)
 *     parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesHandleMultipleImports, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":833
 *     parser.setFeature(fgXercesSchema, True)
 *     parser.setFeature(fgXercesHandleMultipleImports, True)
 *     parser.setFeature(fgXercesSchemaFullChecking, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 *     parser.setFeature(fgSAX2CoreValidation, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesSchemaFullChecking, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":834
 *     parser.setFeature(fgXercesHandleMultipleImports, True)
 *     parser.setFeature(fgXercesSchemaFullChecking, True)
 *     parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgSAX2CoreValidation, True)
 *     parser.setFeature(fgXercesDynamic, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgSAX2CoreNameSpacePrefixes, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":835
 *     parser.setFeature(fgXercesSchemaFullChecking, True)
 *     parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 *     parser.setFeature(fgSAX2CoreValidation, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesDynamic, True)
 *     parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgSAX2CoreValidation, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":836
 *     parser.setFeature(fgSAX2CoreNameSpacePrefixes, True)
 *     parser.setFeature(fgSAX2CoreValidation, True)
 *     parser.setFeature(fgXercesDynamic, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)
 *     parser.setFeature(fgXercesCacheGrammarFromParse, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesDynamic, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":837
 *     parser.setFeature(fgSAX2CoreValidation, True)
 *     parser.setFeature(fgXercesDynamic, True)
 *     parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesCacheGrammarFromParse, True)
 *     parser.setFeature(fgXercesCalculateSrcOfs, True)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesGenerateSyntheticAnnotations, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":838
 *     parser.setFeature(fgXercesDynamic, True)
 *     parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)
 *     parser.setFeature(fgXercesCacheGrammarFromParse, True)             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesCalculateSrcOfs, True)
 *     parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesCacheGrammarFromParse, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":839
 *     parser.setFeature(fgXercesGenerateSyntheticAnnotations, True)
 *     parser.setFeature(fgXercesCacheGrammarFromParse, True)
 *     parser.setFeature(fgXercesCalculateSrcOfs, True)             # <<<<<<<<<<<<<<
 *     parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)
 *     #cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesCalculateSrcOfs, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":840
 *     parser.setFeature(fgXercesCacheGrammarFromParse, True)
 *     parser.setFeature(fgXercesCalculateSrcOfs, True)
 *     parser.setProperty(fgXercesScannerName, <void *>fgSGXMLScanner)             # <<<<<<<<<<<<<<
 *     #cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     cdef object pyRootDict
 */
  __pyx_v_parser->setProperty(xercesc::XMLUni::fgXercesScannerName, ((void *)xercesc::XMLUni::fgSGXMLScanner));

  /* "arelle_cython/arelle_c/xerces.pxi":843
 *     #cdef _ErrorHandler * errorHandler = new _ErrorHandler()
 *     cdef object pyRootDict
 *     pyRootDict = OrderedDict()             # <<<<<<<<<<<<<<
 *     cdef void * pyRootDictPtr
 *     pyRootDictPtr = <void*>pyRootDict
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 843, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 843, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_pyRootDict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":845
 *     pyRootDict = OrderedDict()
 *     cdef void * pyRootDictPtr
 *     pyRootDictPtr = <void*>pyRootDict             # <<<<<<<<<<<<<<
 *     cdef _LXMLSAX2Handler * lxmlSaxHandler = new _LXMLSAX2Handler(pyRootDictPtr)
 *     parser.setErrorHandler(lxmlSaxHandler)
 */
  __pyx_v_pyRootDictPtr = ((void *)__pyx_v_pyRootDict);

  /* "arelle_cython/arelle_c/xerces.pxi":846
 *     cdef void * pyRootDictPtr
 *     pyRootDictPtr = <void*>pyRootDict
 *     cdef _LXMLSAX2Handler * lxmlSaxHandler = new _LXMLSAX2Handler(pyRootDictPtr)             # <<<<<<<<<<<<<<
 *     parser.setErrorHandler(lxmlSaxHandler)
 *     parser.setContentHandler(lxmlSaxHandler)
 */
  try {
    __pyx_t_4 = new __pyx_t_6arelle_8arelle_c__LXMLSAX2Handler(__pyx_v_pyRootDictPtr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 846, __pyx_L1_error)
  }
  __pyx_v_lxmlSaxHandler = __pyx_t_4;

  /* "arelle_cython/arelle_c/xerces.pxi":847
 *     pyRootDictPtr = <void*>pyRootDict
 *     cdef _LXMLSAX2Handler * lxmlSaxHandler = new _LXMLSAX2Handler(pyRootDictPtr)
 *     parser.setErrorHandler(lxmlSaxHandler)             # <<<<<<<<<<<<<<
 *     parser.setContentHandler(lxmlSaxHandler)
 *     parser.setLexicalHandler(lxmlSaxHandler)
 */
  __pyx_v_parser->setErrorHandler(__pyx_v_lxmlSaxHandler);

  /* "arelle_cython/arelle_c/xerces.pxi":848
 *     cdef _LXMLSAX2Handler * lxmlSaxHandler = new _LXMLSAX2Handler(pyRootDictPtr)
 *     parser.setErrorHandler(lxmlSaxHandler)
 *     parser.setContentHandler(lxmlSaxHandler)             # <<<<<<<<<<<<<<
 *     parser.setLexicalHandler(lxmlSaxHandler)
 *     cdef _LXMLSAX2Resolver * lxmlSaxResolver = new _LXMLSAX2Resolver()
 */
  __pyx_v_parser->setContentHandler(__pyx_v_lxmlSaxHandler);

  /* "arelle_cython/arelle_c/xerces.pxi":849
 *     parser.setErrorHandler(lxmlSaxHandler)
 *     parser.setContentHandler(lxmlSaxHandler)
 *     parser.setLexicalHandler(lxmlSaxHandler)             # <<<<<<<<<<<<<<
 *     cdef _LXMLSAX2Resolver * lxmlSaxResolver = new _LXMLSAX2Resolver()
 *     parser.setEntityResolver(lxmlSaxResolver)
 */
  __pyx_v_parser->setLexicalHandler(__pyx_v_lxmlSaxHandler);

  /* "arelle_cython/arelle_c/xerces.pxi":850
 *     parser.setContentHandler(lxmlSaxHandler)
 *     parser.setLexicalHandler(lxmlSaxHandler)
 *     cdef _LXMLSAX2Resolver * lxmlSaxResolver = new _LXMLSAX2Resolver()             # <<<<<<<<<<<<<<
 *     parser.setEntityResolver(lxmlSaxResolver)
 *     print("loadGrammar start")
 */
  try {
    __pyx_t_5 = new __pyx_t_6arelle_8arelle_c__LXMLSAX2Resolver();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(6, 850, __pyx_L1_error)
  }
  __pyx_v_lxmlSaxResolver = __pyx_t_5;

  /* "arelle_cython/arelle_c/xerces.pxi":851
 *     parser.setLexicalHandler(lxmlSaxHandler)
 *     cdef _LXMLSAX2Resolver * lxmlSaxResolver = new _LXMLSAX2Resolver()
 *     parser.setEntityResolver(lxmlSaxResolver)             # <<<<<<<<<<<<<<
 *     print("loadGrammar start")
 *     byte_s = txmyFile.encode("utf-8")
 */
  __pyx_v_parser->setEntityResolver(__pyx_v_lxmlSaxResolver);

  /* "arelle_cython/arelle_c/xerces.pxi":852
 *     cdef _LXMLSAX2Resolver * lxmlSaxResolver = new _LXMLSAX2Resolver()
 *     parser.setEntityResolver(lxmlSaxResolver)
 *     print("loadGrammar start")             # <<<<<<<<<<<<<<
 *     byte_s = txmyFile.encode("utf-8")
 *     cdef const char* c_s = byte_s
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_loadGrammar_start) < 0) __PYX_ERR(6, 852, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":853
 *     parser.setEntityResolver(lxmlSaxResolver)
 *     print("loadGrammar start")
 *     byte_s = txmyFile.encode("utf-8")             # <<<<<<<<<<<<<<
 *     cdef const char* c_s = byte_s
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_txmyFile, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_byte_s = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":854
 *     print("loadGrammar start")
 *     byte_s = txmyFile.encode("utf-8")
 *     cdef const char* c_s = byte_s             # <<<<<<<<<<<<<<
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_byte_s); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(6, 854, __pyx_L1_error)
  __pyx_v_c_s = __pyx_t_6;

  /* "arelle_cython/arelle_c/xerces.pxi":855
 *     byte_s = txmyFile.encode("utf-8")
 *     cdef const char* c_s = byte_s
 *     cdef XMLCh* xmlChFile = transcode(c_s)             # <<<<<<<<<<<<<<
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)
 */
  __pyx_v_xmlChFile = xercesc::XMLString::transcode(__pyx_v_c_s);

  /* "arelle_cython/arelle_c/xerces.pxi":856
 *     cdef const char* c_s = byte_s
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))             # <<<<<<<<<<<<<<
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)
 *     print("loadGrammar completed")
 */
  __pyx_v_inpSrc = new xercesc::LocalFileInputSource(__pyx_v_xmlChFile);

  /* "arelle_cython/arelle_c/xerces.pxi":857
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)             # <<<<<<<<<<<<<<
 *     print("loadGrammar completed")
 *     cdef bool updatedXSModel = 0
 */
  __pyx_v_schemaGrammar = ((xercesc::SchemaGrammar *)__pyx_v_parser->loadGrammar((*__pyx_v_inpSrc), xercesc::Grammar::SchemaGrammarType, 1));

  /* "arelle_cython/arelle_c/xerces.pxi":858
 *     cdef LocalFileInputSource* inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)
 *     print("loadGrammar completed")             # <<<<<<<<<<<<<<
 *     cdef bool updatedXSModel = 0
 *     cdef XSModel* xsModel = grammarPool.getXSModel(updatedXSModel)
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_loadGrammar_completed) < 0) __PYX_ERR(6, 858, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":859
 *     cdef SchemaGrammar* schemaGrammar = <SchemaGrammar*>parser.loadGrammar( deref( inpSrc ), GrammarType.SchemaGrammarType, True)
 *     print("loadGrammar completed")
 *     cdef bool updatedXSModel = 0             # <<<<<<<<<<<<<<
 *     cdef XSModel* xsModel = grammarPool.getXSModel(updatedXSModel)
 *     cdef StringList *namespaces
 */
  __pyx_v_updatedXSModel = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":860
 *     print("loadGrammar completed")
 *     cdef bool updatedXSModel = 0
 *     cdef XSModel* xsModel = grammarPool.getXSModel(updatedXSModel)             # <<<<<<<<<<<<<<
 *     cdef StringList *namespaces
 *     cdef XMLSize_t namespacesSize
 */
  __pyx_v_xsModel = __pyx_v_grammarPool->getXSModel(__pyx_v_updatedXSModel);

  /* "arelle_cython/arelle_c/xerces.pxi":865
 *     cdef unsigned int i
 *     cdef const XMLCh *nameSpace
 *     if xsModel != NULL:             # <<<<<<<<<<<<<<
 *         namespaces = xsModel.getNamespaces()
 *         namespacesSize = namespaces.size()
 */
  __pyx_t_7 = ((__pyx_v_xsModel != NULL) != 0);
  if (__pyx_t_7) {

    /* "arelle_cython/arelle_c/xerces.pxi":866
 *     cdef const XMLCh *nameSpace
 *     if xsModel != NULL:
 *         namespaces = xsModel.getNamespaces()             # <<<<<<<<<<<<<<
 *         namespacesSize = namespaces.size()
 *         for i in range(namespacesSize):
 */
    __pyx_v_namespaces = __pyx_v_xsModel->getNamespaces();

    /* "arelle_cython/arelle_c/xerces.pxi":867
 *     if xsModel != NULL:
 *         namespaces = xsModel.getNamespaces()
 *         namespacesSize = namespaces.size()             # <<<<<<<<<<<<<<
 *         for i in range(namespacesSize):
 *             nameSpace = namespaces.elementAt(i)
 */
    __pyx_v_namespacesSize = __pyx_v_namespaces->size();

    /* "arelle_cython/arelle_c/xerces.pxi":868
 *         namespaces = xsModel.getNamespaces()
 *         namespacesSize = namespaces.size()
 *         for i in range(namespacesSize):             # <<<<<<<<<<<<<<
 *             nameSpace = namespaces.elementAt(i)
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 */
    __pyx_t_8 = __pyx_v_namespacesSize;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "arelle_cython/arelle_c/xerces.pxi":869
 *         namespacesSize = namespaces.size()
 *         for i in range(namespacesSize):
 *             nameSpace = namespaces.elementAt(i)             # <<<<<<<<<<<<<<
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 */
      __pyx_v_nameSpace = __pyx_v_namespaces->elementAt(__pyx_v_i);

      /* "arelle_cython/arelle_c/xerces.pxi":870
 *         for i in range(namespacesSize):
 *             nameSpace = namespaces.elementAt(i)
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)             # <<<<<<<<<<<<<<
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 *                 print("namespace {} no elements".format(transcode(nameSpace)))
 */
      __pyx_v_xsObjects = __pyx_v_xsModel->getComponentsByNamespace(xercesc::XSConstants::ELEMENT_DECLARATION, __pyx_v_nameSpace);

      /* "arelle_cython/arelle_c/xerces.pxi":871
 *             nameSpace = namespaces.elementAt(i)
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:             # <<<<<<<<<<<<<<
 *                 print("namespace {} no elements".format(transcode(nameSpace)))
 *             else:
 */
      __pyx_t_10 = ((__pyx_v_xsObjects == NULL) != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_7 = __pyx_t_10;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = ((__pyx_v_xsObjects->getLength() == 0) != 0);
      __pyx_t_7 = __pyx_t_10;
      __pyx_L7_bool_binop_done:;
      if (__pyx_t_7) {

        /* "arelle_cython/arelle_c/xerces.pxi":872
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:
 *                 print("namespace {} no elements".format(transcode(nameSpace)))             # <<<<<<<<<<<<<<
 *             else:
 *                 print("namespace {} {} elements".format(transcode(nameSpace), xsObjects.getLength()))
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_namespace_no_elements, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 872, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_nameSpace)); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 872, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        if (!__pyx_t_11) {
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 872, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_1)) {
            PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_3};
            __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 872, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
            PyObject *__pyx_temp[2] = {__pyx_t_11, __pyx_t_3};
            __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 872, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          } else
          #endif
          {
            __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(6, 872, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_3);
            __pyx_t_3 = 0;
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 872, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(6, 872, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "arelle_cython/arelle_c/xerces.pxi":871
 *             nameSpace = namespaces.elementAt(i)
 *             xsObjects = xsModel.getComponentsByNamespace(ELEMENT_DECLARATION, nameSpace)
 *             if xsObjects == NULL or xsObjects.getLength() == 0:             # <<<<<<<<<<<<<<
 *                 print("namespace {} no elements".format(transcode(nameSpace)))
 *             else:
 */
        goto __pyx_L6;
      }

      /* "arelle_cython/arelle_c/xerces.pxi":874
 *                 print("namespace {} no elements".format(transcode(nameSpace)))
 *             else:
 *                 print("namespace {} {} elements".format(transcode(nameSpace), xsObjects.getLength()))             # <<<<<<<<<<<<<<
 *     print("parsing instance")
 *     byte_s = instFile.encode("utf-8")
 */
      /*else*/ {
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_namespace_elements, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 874, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_12 = __Pyx_PyUnicode_FromString(xercesc::XMLString::transcode(__pyx_v_nameSpace)); if (unlikely(!__pyx_t_12)) __PYX_ERR(6, 874, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_xsObjects->getLength()); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 874, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_13 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_12, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 874, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_12, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_13, 2+__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 874, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_14 = PyTuple_New(2+__pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(6, 874, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          if (__pyx_t_11) {
            __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_11); __pyx_t_11 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_13, __pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_13, __pyx_t_3);
          __pyx_t_12 = 0;
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 874, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(6, 874, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_L6:;
    }

    /* "arelle_cython/arelle_c/xerces.pxi":865
 *     cdef unsigned int i
 *     cdef const XMLCh *nameSpace
 *     if xsModel != NULL:             # <<<<<<<<<<<<<<
 *         namespaces = xsModel.getNamespaces()
 *         namespacesSize = namespaces.size()
 */
  }

  /* "arelle_cython/arelle_c/xerces.pxi":875
 *             else:
 *                 print("namespace {} {} elements".format(transcode(nameSpace), xsObjects.getLength()))
 *     print("parsing instance")             # <<<<<<<<<<<<<<
 *     byte_s = instFile.encode("utf-8")
 *     c_s = byte_s
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_parsing_instance) < 0) __PYX_ERR(6, 875, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":876
 *                 print("namespace {} {} elements".format(transcode(nameSpace), xsObjects.getLength()))
 *     print("parsing instance")
 *     byte_s = instFile.encode("utf-8")             # <<<<<<<<<<<<<<
 *     c_s = byte_s
 *     xmlChFile = transcode(c_s)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_instFile, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_byte_s, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":877
 *     print("parsing instance")
 *     byte_s = instFile.encode("utf-8")
 *     c_s = byte_s             # <<<<<<<<<<<<<<
 *     xmlChFile = transcode(c_s)
 *     inpSrc = ( new LocalFileInputSource( xmlChFile ))
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_byte_s); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(6, 877, __pyx_L1_error)
  __pyx_v_c_s = __pyx_t_6;

  /* "arelle_cython/arelle_c/xerces.pxi":878
 *     byte_s = instFile.encode("utf-8")
 *     c_s = byte_s
 *     xmlChFile = transcode(c_s)             # <<<<<<<<<<<<<<
 *     inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *     parser.setFeature(fgXercesUseCachedGrammarInParse, True)
 */
  __pyx_v_xmlChFile = xercesc::XMLString::transcode(__pyx_v_c_s);

  /* "arelle_cython/arelle_c/xerces.pxi":879
 *     c_s = byte_s
 *     xmlChFile = transcode(c_s)
 *     inpSrc = ( new LocalFileInputSource( xmlChFile ))             # <<<<<<<<<<<<<<
 *     parser.setFeature(fgXercesUseCachedGrammarInParse, True)
 *     byte_s = schemaLocation.encode("utf-8")
 */
  __pyx_v_inpSrc = new xercesc::LocalFileInputSource(__pyx_v_xmlChFile);

  /* "arelle_cython/arelle_c/xerces.pxi":880
 *     xmlChFile = transcode(c_s)
 *     inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *     parser.setFeature(fgXercesUseCachedGrammarInParse, True)             # <<<<<<<<<<<<<<
 *     byte_s = schemaLocation.encode("utf-8")
 *     c_s = byte_s
 */
  __pyx_v_parser->setFeature(xercesc::XMLUni::fgXercesUseCachedGrammarInParse, 1);

  /* "arelle_cython/arelle_c/xerces.pxi":881
 *     inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *     parser.setFeature(fgXercesUseCachedGrammarInParse, True)
 *     byte_s = schemaLocation.encode("utf-8")             # <<<<<<<<<<<<<<
 *     c_s = byte_s
 *     cdef XMLCh* xmlChSchemaLocation = transcode(c_s)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_schemaLocation, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_byte_s, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":882
 *     parser.setFeature(fgXercesUseCachedGrammarInParse, True)
 *     byte_s = schemaLocation.encode("utf-8")
 *     c_s = byte_s             # <<<<<<<<<<<<<<
 *     cdef XMLCh* xmlChSchemaLocation = transcode(c_s)
 *     parser.setProperty(fgXercesSchemaExternalSchemaLocation, xmlChSchemaLocation)
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_byte_s); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(6, 882, __pyx_L1_error)
  __pyx_v_c_s = __pyx_t_6;

  /* "arelle_cython/arelle_c/xerces.pxi":883
 *     byte_s = schemaLocation.encode("utf-8")
 *     c_s = byte_s
 *     cdef XMLCh* xmlChSchemaLocation = transcode(c_s)             # <<<<<<<<<<<<<<
 *     parser.setProperty(fgXercesSchemaExternalSchemaLocation, xmlChSchemaLocation)
 *     parser.parse( deref( inpSrc ))
 */
  __pyx_v_xmlChSchemaLocation = xercesc::XMLString::transcode(__pyx_v_c_s);

  /* "arelle_cython/arelle_c/xerces.pxi":884
 *     c_s = byte_s
 *     cdef XMLCh* xmlChSchemaLocation = transcode(c_s)
 *     parser.setProperty(fgXercesSchemaExternalSchemaLocation, xmlChSchemaLocation)             # <<<<<<<<<<<<<<
 *     parser.parse( deref( inpSrc ))
 *     del parser
 */
  __pyx_v_parser->setProperty(xercesc::XMLUni::fgXercesSchemaExternalSchemaLocation, __pyx_v_xmlChSchemaLocation);

  /* "arelle_cython/arelle_c/xerces.pxi":885
 *     cdef XMLCh* xmlChSchemaLocation = transcode(c_s)
 *     parser.setProperty(fgXercesSchemaExternalSchemaLocation, xmlChSchemaLocation)
 *     parser.parse( deref( inpSrc ))             # <<<<<<<<<<<<<<
 *     del parser
 *     lxmlSaxHandler.close()
 */
  __pyx_v_parser->parse((*__pyx_v_inpSrc));

  /* "arelle_cython/arelle_c/xerces.pxi":886
 *     parser.setProperty(fgXercesSchemaExternalSchemaLocation, xmlChSchemaLocation)
 *     parser.parse( deref( inpSrc ))
 *     del parser             # <<<<<<<<<<<<<<
 *     lxmlSaxHandler.close()
 *     del lxmlSaxHandler
 */
  delete __pyx_v_parser;

  /* "arelle_cython/arelle_c/xerces.pxi":887
 *     parser.parse( deref( inpSrc ))
 *     del parser
 *     lxmlSaxHandler.close()             # <<<<<<<<<<<<<<
 *     del lxmlSaxHandler
 *     print("pyRootList {}".format(pyRootDict))
 */
  __pyx_t_2 = __pyx_v_lxmlSaxHandler->close(); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":888
 *     del parser
 *     lxmlSaxHandler.close()
 *     del lxmlSaxHandler             # <<<<<<<<<<<<<<
 *     print("pyRootList {}".format(pyRootDict))
 *     print("done")
 */
  delete __pyx_v_lxmlSaxHandler;

  /* "arelle_cython/arelle_c/xerces.pxi":889
 *     lxmlSaxHandler.close()
 *     del lxmlSaxHandler
 *     print("pyRootList {}".format(pyRootDict))             # <<<<<<<<<<<<<<
 *     print("done")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_pyRootList, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_14) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_pyRootDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_v_pyRootDict};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 889, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_v_pyRootDict};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 889, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_14); __pyx_t_14 = NULL;
      __Pyx_INCREF(__pyx_v_pyRootDict);
      __Pyx_GIVEREF(__pyx_v_pyRootDict);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_pyRootDict);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(6, 889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":890
 *     del lxmlSaxHandler
 *     print("pyRootList {}".format(pyRootDict))
 *     print("done")             # <<<<<<<<<<<<<<
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_done) < 0) __PYX_ERR(6, 890, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":827
 *     print("doneParsedToken {}".format(lastParsedQName))
 * 
 * def validate( txmyFile, instFile, schemaLocation ):             # <<<<<<<<<<<<<<
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("arelle.arelle_c.validate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyRootDict);
  __Pyx_XDECREF(__pyx_v_byte_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(7, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6arelle_8arelle_c_attrdict(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6arelle_8arelle_c_attrdict *p;
  PyObject *o = (&PyDict_Type)->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6arelle_8arelle_c_attrdict *)o);
  p->__dict__ = PyDict_New(); if (unlikely(!p->__dict__)) goto bad;return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6arelle_8arelle_c_attrdict(PyObject *o) {
  struct __pyx_obj_6arelle_8arelle_c_attrdict *p = (struct __pyx_obj_6arelle_8arelle_c_attrdict *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  if (p->__dict__) PyDict_Clear(p->__dict__);
  Py_CLEAR(p->__dict__);
  PyObject_GC_Track(o);
  (&PyDict_Type)->tp_dealloc(o);
}

static int __pyx_tp_traverse_6arelle_8arelle_c_attrdict(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6arelle_8arelle_c_attrdict *p = (struct __pyx_obj_6arelle_8arelle_c_attrdict *)o;
  if (!(&PyDict_Type)->tp_traverse); else { e = (&PyDict_Type)->tp_traverse(o,v,a); if (e) return e; }
  if (p->__dict__) {
    e = (*v)(p->__dict__, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6arelle_8arelle_c_attrdict(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6arelle_8arelle_c_attrdict *p = (struct __pyx_obj_6arelle_8arelle_c_attrdict *)o;
  if (!(&PyDict_Type)->tp_clear); else (&PyDict_Type)->tp_clear(o);
  tmp = ((PyObject*)p->__dict__);
  p->__dict__ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx___dict__getter_6arelle_8arelle_c_attrdict(PyObject *o, CYTHON_UNUSED void *x) {
  struct __pyx_obj_6arelle_8arelle_c_attrdict *p = (struct __pyx_obj_6arelle_8arelle_c_attrdict *)o;
  if (unlikely(!p->__dict__)){
    p->__dict__ = PyDict_New();
  }
  Py_XINCREF(p->__dict__);
  return p->__dict__;
}

static PyMethodDef __pyx_methods_6arelle_8arelle_c_attrdict[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6arelle_8arelle_c_attrdict[] = {
  {(char *)"__dict__", __pyx___dict__getter_6arelle_8arelle_c_attrdict, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6arelle_8arelle_c_attrdict = {
  PyVarObject_HEAD_INIT(0, 0)
  "arelle.arelle_c.attrdict", /*tp_name*/
  sizeof(struct __pyx_obj_6arelle_8arelle_c_attrdict), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6arelle_8arelle_c_attrdict, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " utility to simulate an dictionary with named fields from the kwargs ", /*tp_doc*/
  __pyx_tp_traverse_6arelle_8arelle_c_attrdict, /*tp_traverse*/
  __pyx_tp_clear_6arelle_8arelle_c_attrdict, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6arelle_8arelle_c_attrdict, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6arelle_8arelle_c_attrdict, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  offsetof(struct __pyx_obj_6arelle_8arelle_c_attrdict, __dict__), /*tp_dictoffset*/
  __pyx_pw_6arelle_8arelle_c_8attrdict_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6arelle_8arelle_c_attrdict, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6arelle_8arelle_c_genobj(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6arelle_8arelle_c_genobj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6arelle_8arelle_c_genobj *)o);
  p->__dict__ = PyDict_New(); if (unlikely(!p->__dict__)) goto bad;return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6arelle_8arelle_c_genobj(PyObject *o) {
  struct __pyx_obj_6arelle_8arelle_c_genobj *p = (struct __pyx_obj_6arelle_8arelle_c_genobj *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  if (p->__dict__) PyDict_Clear(p->__dict__);
  Py_CLEAR(p->__dict__);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6arelle_8arelle_c_genobj(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6arelle_8arelle_c_genobj *p = (struct __pyx_obj_6arelle_8arelle_c_genobj *)o;
  if (p->__dict__) {
    e = (*v)(p->__dict__, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6arelle_8arelle_c_genobj(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6arelle_8arelle_c_genobj *p = (struct __pyx_obj_6arelle_8arelle_c_genobj *)o;
  tmp = ((PyObject*)p->__dict__);
  p->__dict__ = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx___dict__getter_6arelle_8arelle_c_genobj(PyObject *o, CYTHON_UNUSED void *x) {
  struct __pyx_obj_6arelle_8arelle_c_genobj *p = (struct __pyx_obj_6arelle_8arelle_c_genobj *)o;
  if (unlikely(!p->__dict__)){
    p->__dict__ = PyDict_New();
  }
  Py_XINCREF(p->__dict__);
  return p->__dict__;
}

static PyMethodDef __pyx_methods_6arelle_8arelle_c_genobj[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6arelle_8arelle_c_genobj[] = {
  {(char *)"__dict__", __pyx___dict__getter_6arelle_8arelle_c_genobj, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6arelle_8arelle_c_genobj = {
  PyVarObject_HEAD_INIT(0, 0)
  "arelle.arelle_c.genobj", /*tp_name*/
  sizeof(struct __pyx_obj_6arelle_8arelle_c_genobj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6arelle_8arelle_c_genobj, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6arelle_8arelle_c_6genobj_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  " utility to simulate an generic object with named fields from the kwargs ", /*tp_doc*/
  __pyx_tp_traverse_6arelle_8arelle_c_genobj, /*tp_traverse*/
  __pyx_tp_clear_6arelle_8arelle_c_genobj, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6arelle_8arelle_c_genobj, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6arelle_8arelle_c_genobj, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  offsetof(struct __pyx_obj_6arelle_8arelle_c_genobj, __dict__), /*tp_dictoffset*/
  __pyx_pw_6arelle_8arelle_c_6genobj_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6arelle_8arelle_c_genobj, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6arelle_8arelle_c_Cntlr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6arelle_8arelle_c_Cntlr(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6arelle_8arelle_c_Cntlr[] = {
  {"close", (PyCFunction)__pyx_pw_6arelle_8arelle_c_5Cntlr_3close, METH_NOARGS, 0},
  {"xerces_initialized", (PyCFunction)__pyx_pw_6arelle_8arelle_c_5Cntlr_5xerces_initialized, METH_NOARGS, 0},
  {"xerces_terminated", (PyCFunction)__pyx_pw_6arelle_8arelle_c_5Cntlr_7xerces_terminated, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6arelle_8arelle_c_Cntlr = {
  PyVarObject_HEAD_INIT(0, 0)
  "arelle.arelle_c.Cntlr", /*tp_name*/
  sizeof(struct __pyx_obj_6arelle_8arelle_c_Cntlr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6arelle_8arelle_c_Cntlr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6arelle_8arelle_c_Cntlr, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6arelle_8arelle_c_5Cntlr_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6arelle_8arelle_c_Cntlr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6arelle_8arelle_c_QName(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6arelle_8arelle_c_QName *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6arelle_8arelle_c_QName *)o);
  p->namespaceURI = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->prefix = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->localName = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6arelle_8arelle_c_QName(PyObject *o) {
  struct __pyx_obj_6arelle_8arelle_c_QName *p = (struct __pyx_obj_6arelle_8arelle_c_QName *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  Py_CLEAR(p->namespaceURI);
  Py_CLEAR(p->prefix);
  Py_CLEAR(p->localName);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_5QName_clarkNotation(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_5QName_13clarkNotation_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_5QName_namespaceURI(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_5QName_12namespaceURI_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_5QName_prefix(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_5QName_6prefix_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_5QName_localName(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_5QName_9localName_1__get__(o);
}

static PyMethodDef __pyx_methods_6arelle_8arelle_c_QName[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6arelle_8arelle_c_QName[] = {
  {(char *)"clarkNotation", __pyx_getprop_6arelle_8arelle_c_5QName_clarkNotation, 0, (char *)0, 0},
  {(char *)"namespaceURI", __pyx_getprop_6arelle_8arelle_c_5QName_namespaceURI, 0, (char *)0, 0},
  {(char *)"prefix", __pyx_getprop_6arelle_8arelle_c_5QName_prefix, 0, (char *)0, 0},
  {(char *)"localName", __pyx_getprop_6arelle_8arelle_c_5QName_localName, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_QName = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  __pyx_pw_6arelle_8arelle_c_5QName_11__bool__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_6arelle_8arelle_c_QName = {
  PyVarObject_HEAD_INIT(0, 0)
  "arelle.arelle_c.QName", /*tp_name*/
  sizeof(struct __pyx_obj_6arelle_8arelle_c_QName), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6arelle_8arelle_c_QName, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6arelle_8arelle_c_5QName_5__repr__, /*tp_repr*/
  &__pyx_tp_as_number_QName, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6arelle_8arelle_c_5QName_3__hash__, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_6arelle_8arelle_c_5QName_7__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6arelle_8arelle_c_5QName_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6arelle_8arelle_c_QName, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6arelle_8arelle_c_QName, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6arelle_8arelle_c_5QName_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6arelle_8arelle_c_QName, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6arelle_8arelle_c_ModelXbrl __pyx_vtable_6arelle_8arelle_c_ModelXbrl;

static PyObject *__pyx_tp_new_6arelle_8arelle_c_ModelXbrl(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)o);
  p->__pyx_vtab = __pyx_vtabptr_6arelle_8arelle_c_ModelXbrl;
  new((void*)&(p->namespaces)) std::vector<struct __pyx_t_6arelle_8arelle_c_Namespace *> ();
  p->modelManager = Py_None; Py_INCREF(Py_None);
  p->cntlr = Py_None; Py_INCREF(Py_None);
  p->urlDocs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->mappedUrls = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->internedStrings = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6arelle_8arelle_c_ModelXbrl(PyObject *o) {
  struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *p = (struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->namespaces);
  Py_CLEAR(p->modelManager);
  Py_CLEAR(p->cntlr);
  Py_CLEAR(p->urlDocs);
  Py_CLEAR(p->mappedUrls);
  Py_CLEAR(p->internedStrings);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6arelle_8arelle_c_ModelXbrl(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *p = (struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)o;
  if (p->modelManager) {
    e = (*v)(p->modelManager, a); if (e) return e;
  }
  if (p->cntlr) {
    e = (*v)(p->cntlr, a); if (e) return e;
  }
  if (p->urlDocs) {
    e = (*v)(p->urlDocs, a); if (e) return e;
  }
  if (p->mappedUrls) {
    e = (*v)(p->mappedUrls, a); if (e) return e;
  }
  if (p->internedStrings) {
    e = (*v)(p->internedStrings, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6arelle_8arelle_c_ModelXbrl(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *p = (struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)o;
  tmp = ((PyObject*)p->modelManager);
  p->modelManager = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cntlr);
  p->cntlr = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->urlDocs);
  p->urlDocs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->mappedUrls);
  p->mappedUrls = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->internedStrings);
  p->internedStrings = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_9ModelXbrl_modelManager(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_9ModelXbrl_12modelManager_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_9ModelXbrl_cntlr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_9ModelXbrl_5cntlr_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_9ModelXbrl_urlDocs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_9ModelXbrl_7urlDocs_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_9ModelXbrl_mappedUrls(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_9ModelXbrl_10mappedUrls_1__get__(o);
}

static PyMethodDef __pyx_methods_6arelle_8arelle_c_ModelXbrl[] = {
  {"close", (PyCFunction)__pyx_pw_6arelle_8arelle_c_9ModelXbrl_3close, METH_NOARGS, 0},
  {"internString", (PyCFunction)__pyx_pw_6arelle_8arelle_c_9ModelXbrl_5internString, METH_O, 0},
  {"identifyXmlFile", (PyCFunction)__pyx_pw_6arelle_8arelle_c_9ModelXbrl_7identifyXmlFile, METH_O, 0},
  {"loadSchemaGrammar", (PyCFunction)__pyx_pw_6arelle_8arelle_c_9ModelXbrl_9loadSchemaGrammar, METH_NOARGS, 0},
  {"openSax2Parser", (PyCFunction)__pyx_pw_6arelle_8arelle_c_9ModelXbrl_11openSax2Parser, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6arelle_8arelle_c_ModelXbrl[] = {
  {(char *)"modelManager", __pyx_getprop_6arelle_8arelle_c_9ModelXbrl_modelManager, 0, (char *)0, 0},
  {(char *)"cntlr", __pyx_getprop_6arelle_8arelle_c_9ModelXbrl_cntlr, 0, (char *)0, 0},
  {(char *)"urlDocs", __pyx_getprop_6arelle_8arelle_c_9ModelXbrl_urlDocs, 0, (char *)0, 0},
  {(char *)"mappedUrls", __pyx_getprop_6arelle_8arelle_c_9ModelXbrl_mappedUrls, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6arelle_8arelle_c_ModelXbrl = {
  PyVarObject_HEAD_INIT(0, 0)
  "arelle.arelle_c.ModelXbrl", /*tp_name*/
  sizeof(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6arelle_8arelle_c_ModelXbrl, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6arelle_8arelle_c_ModelXbrl, /*tp_traverse*/
  __pyx_tp_clear_6arelle_8arelle_c_ModelXbrl, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6arelle_8arelle_c_ModelXbrl, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6arelle_8arelle_c_ModelXbrl, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6arelle_8arelle_c_9ModelXbrl_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6arelle_8arelle_c_ModelXbrl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6arelle_8arelle_c_ModelDocument(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6arelle_8arelle_c_ModelDocument *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)o);
  p->modelXbrl = ((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)Py_None); Py_INCREF(Py_None);
  p->url = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->filepath = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->targetNamespace = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->targetNamespacePrefix = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->xmlRootElement = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6arelle_8arelle_c_ModelDocument(PyObject *o) {
  struct __pyx_obj_6arelle_8arelle_c_ModelDocument *p = (struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->modelXbrl);
  Py_CLEAR(p->url);
  Py_CLEAR(p->filepath);
  Py_CLEAR(p->targetNamespace);
  Py_CLEAR(p->targetNamespacePrefix);
  Py_CLEAR(p->xmlRootElement);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6arelle_8arelle_c_ModelDocument(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6arelle_8arelle_c_ModelDocument *p = (struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)o;
  if (p->modelXbrl) {
    e = (*v)(((PyObject*)p->modelXbrl), a); if (e) return e;
  }
  if (p->xmlRootElement) {
    e = (*v)(p->xmlRootElement, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6arelle_8arelle_c_ModelDocument(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6arelle_8arelle_c_ModelDocument *p = (struct __pyx_obj_6arelle_8arelle_c_ModelDocument *)o;
  tmp = ((PyObject*)p->modelXbrl);
  p->modelXbrl = ((struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->xmlRootElement);
  p->xmlRootElement = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_13ModelDocument_modelXbrl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_13ModelDocument_9modelXbrl_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_13ModelDocument_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_13ModelDocument_4type_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_13ModelDocument_url(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_13ModelDocument_3url_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_13ModelDocument_filepath(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_13ModelDocument_8filepath_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_13ModelDocument_isGrammarLoadedIntoModel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_13ModelDocument_24isGrammarLoadedIntoModel_1__get__(o);
}

static int __pyx_setprop_6arelle_8arelle_c_13ModelDocument_isGrammarLoadedIntoModel(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6arelle_8arelle_c_13ModelDocument_24isGrammarLoadedIntoModel_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_13ModelDocument_targetNamespace(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_13ModelDocument_15targetNamespace_1__get__(o);
}

static int __pyx_setprop_6arelle_8arelle_c_13ModelDocument_targetNamespace(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6arelle_8arelle_c_13ModelDocument_15targetNamespace_3__set__(o, v);
  }
  else {
    return __pyx_pw_6arelle_8arelle_c_13ModelDocument_15targetNamespace_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_13ModelDocument_targetNamespacePrefix(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_1__get__(o);
}

static int __pyx_setprop_6arelle_8arelle_c_13ModelDocument_targetNamespacePrefix(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_3__set__(o, v);
  }
  else {
    return __pyx_pw_6arelle_8arelle_c_13ModelDocument_21targetNamespacePrefix_5__del__(o);
  }
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_13ModelDocument_xmlRootElement(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_1__get__(o);
}

static int __pyx_setprop_6arelle_8arelle_c_13ModelDocument_xmlRootElement(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_3__set__(o, v);
  }
  else {
    return __pyx_pw_6arelle_8arelle_c_13ModelDocument_14xmlRootElement_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_6arelle_8arelle_c_ModelDocument[] = {
  {"loadSchema", (PyCFunction)__pyx_pw_6arelle_8arelle_c_13ModelDocument_3loadSchema, METH_O, 0},
  {"loadXml", (PyCFunction)__pyx_pw_6arelle_8arelle_c_13ModelDocument_5loadXml, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6arelle_8arelle_c_ModelDocument[] = {
  {(char *)"modelXbrl", __pyx_getprop_6arelle_8arelle_c_13ModelDocument_modelXbrl, 0, (char *)0, 0},
  {(char *)"type", __pyx_getprop_6arelle_8arelle_c_13ModelDocument_type, 0, (char *)0, 0},
  {(char *)"url", __pyx_getprop_6arelle_8arelle_c_13ModelDocument_url, 0, (char *)0, 0},
  {(char *)"filepath", __pyx_getprop_6arelle_8arelle_c_13ModelDocument_filepath, 0, (char *)0, 0},
  {(char *)"isGrammarLoadedIntoModel", __pyx_getprop_6arelle_8arelle_c_13ModelDocument_isGrammarLoadedIntoModel, __pyx_setprop_6arelle_8arelle_c_13ModelDocument_isGrammarLoadedIntoModel, (char *)0, 0},
  {(char *)"targetNamespace", __pyx_getprop_6arelle_8arelle_c_13ModelDocument_targetNamespace, __pyx_setprop_6arelle_8arelle_c_13ModelDocument_targetNamespace, (char *)0, 0},
  {(char *)"targetNamespacePrefix", __pyx_getprop_6arelle_8arelle_c_13ModelDocument_targetNamespacePrefix, __pyx_setprop_6arelle_8arelle_c_13ModelDocument_targetNamespacePrefix, (char *)0, 0},
  {(char *)"xmlRootElement", __pyx_getprop_6arelle_8arelle_c_13ModelDocument_xmlRootElement, __pyx_setprop_6arelle_8arelle_c_13ModelDocument_xmlRootElement, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6arelle_8arelle_c_ModelDocument = {
  PyVarObject_HEAD_INIT(0, 0)
  "arelle.arelle_c.ModelDocument", /*tp_name*/
  sizeof(struct __pyx_obj_6arelle_8arelle_c_ModelDocument), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6arelle_8arelle_c_ModelDocument, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6arelle_8arelle_c_ModelDocument, /*tp_traverse*/
  __pyx_tp_clear_6arelle_8arelle_c_ModelDocument, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6arelle_8arelle_c_ModelDocument, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6arelle_8arelle_c_ModelDocument, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6arelle_8arelle_c_13ModelDocument_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6arelle_8arelle_c_ModelDocument, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6arelle_8arelle_c__Element(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6arelle_8arelle_c__Element(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_6arelle_8arelle_c__Element(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_8_Element_tag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_8_Element_3tag_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_8_Element_foo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_8_Element_3foo_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_8_Element_localName(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_8_Element_9localName_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_8_Element_namespaceURI(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_8_Element_12namespaceURI_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_8_Element_clarkName(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_8_Element_9clarkName_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_8_Element_text(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_8_Element_4text_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_8_Element_rawtext(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_8_Element_7rawtext_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_8_Element_timeconversion(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_8_Element_14timeconversion_1__get__(o);
}

static PyObject *__pyx_getprop_6arelle_8arelle_c_8_Element_tail(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6arelle_8arelle_c_8_Element_4tail_1__get__(o);
}

static PyMethodDef __pyx_methods_6arelle_8arelle_c__Element[] = {
  {"getchildren", (PyCFunction)__pyx_pw_6arelle_8arelle_c_8_Element_3getchildren, METH_NOARGS, 0},
  {"lenchildren", (PyCFunction)__pyx_pw_6arelle_8arelle_c_8_Element_5lenchildren, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6arelle_8arelle_c__Element[] = {
  {(char *)"tag", __pyx_getprop_6arelle_8arelle_c_8_Element_tag, 0, (char *)0, 0},
  {(char *)"foo", __pyx_getprop_6arelle_8arelle_c_8_Element_foo, 0, (char *)0, 0},
  {(char *)"localName", __pyx_getprop_6arelle_8arelle_c_8_Element_localName, 0, (char *)0, 0},
  {(char *)"namespaceURI", __pyx_getprop_6arelle_8arelle_c_8_Element_namespaceURI, 0, (char *)0, 0},
  {(char *)"clarkName", __pyx_getprop_6arelle_8arelle_c_8_Element_clarkName, 0, (char *)0, 0},
  {(char *)"text", __pyx_getprop_6arelle_8arelle_c_8_Element_text, 0, (char *)0, 0},
  {(char *)"rawtext", __pyx_getprop_6arelle_8arelle_c_8_Element_rawtext, 0, (char *)0, 0},
  {(char *)"timeconversion", __pyx_getprop_6arelle_8arelle_c_8_Element_timeconversion, 0, (char *)0, 0},
  {(char *)"tail", __pyx_getprop_6arelle_8arelle_c_8_Element_tail, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence__Element = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6arelle_8arelle_c__Element, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping__Element = {
  0, /*mp_length*/
  __pyx_pw_6arelle_8arelle_c_8_Element_1__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6arelle_8arelle_c__Element = {
  PyVarObject_HEAD_INIT(0, 0)
  "arelle.arelle_c._Element", /*tp_name*/
  sizeof(struct __pyx_obj_6arelle_8arelle_c__Element), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6arelle_8arelle_c__Element, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence__Element, /*tp_as_sequence*/
  &__pyx_tp_as_mapping__Element, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6arelle_8arelle_c__Element, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6arelle_8arelle_c__Element, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6arelle_8arelle_c__Element, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "arelle_c",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_n_s_COMPLEX, __pyx_k_COMPLEX, sizeof(__pyx_k_COMPLEX), 0, 0, 1, 1},
  {&__pyx_n_u_CRITICAL, __pyx_k_CRITICAL, sizeof(__pyx_k_CRITICAL), 0, 1, 0, 1},
  {&__pyx_kp_s_ContentHandler_initialization, __pyx_k_ContentHandler_initialization, sizeof(__pyx_k_ContentHandler_initialization), 0, 0, 1, 0},
  {&__pyx_n_u_ERROR, __pyx_k_ERROR, sizeof(__pyx_k_ERROR), 0, 1, 0, 1},
  {&__pyx_kp_s_ErrorHandler_initialization, __pyx_k_ErrorHandler_initialization, sizeof(__pyx_k_ErrorHandler_initialization), 0, 0, 1, 0},
  {&__pyx_kp_s_LXMLSAX2Handler_destructor, __pyx_k_LXMLSAX2Handler_destructor, sizeof(__pyx_k_LXMLSAX2Handler_destructor), 0, 0, 1, 0},
  {&__pyx_kp_s_LXMLSAX2Handler_done, __pyx_k_LXMLSAX2Handler_done, sizeof(__pyx_k_LXMLSAX2Handler_done), 0, 0, 1, 0},
  {&__pyx_kp_s_LXMLSAX2Handler_initialization, __pyx_k_LXMLSAX2Handler_initialization, sizeof(__pyx_k_LXMLSAX2Handler_initialization), 0, 0, 1, 0},
  {&__pyx_kp_s_LexicalHandler_initialization, __pyx_k_LexicalHandler_initialization, sizeof(__pyx_k_LexicalHandler_initialization), 0, 0, 1, 0},
  {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
  {&__pyx_n_s_SIMPLE, __pyx_k_SIMPLE, sizeof(__pyx_k_SIMPLE), 0, 0, 1, 1},
  {&__pyx_n_s_UTF_16LE, __pyx_k_UTF_16LE, sizeof(__pyx_k_UTF_16LE), 0, 0, 1, 1},
  {&__pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_k_Users_hermf_Documents_mvsl_proj, sizeof(__pyx_k_Users_hermf_Documents_mvsl_proj), 0, 0, 1, 0},
  {&__pyx_n_u_WARNING, __pyx_k_WARNING, sizeof(__pyx_k_WARNING), 0, 1, 0, 1},
  {&__pyx_kp_s__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 0, 1, 0},
  {&__pyx_kp_b__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 0, 0},
  {&__pyx_kp_b__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 0, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_kp_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 0},
  {&__pyx_kp_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 0},
  {&__pyx_kp_s__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 1, 0},
  {&__pyx_n_s_abcdefghi, __pyx_k_abcdefghi, sizeof(__pyx_k_abcdefghi), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_adoptBuffer, __pyx_k_adoptBuffer, sizeof(__pyx_k_adoptBuffer), 0, 0, 1, 1},
  {&__pyx_kp_s_annotation, __pyx_k_annotation, sizeof(__pyx_k_annotation), 0, 0, 1, 0},
  {&__pyx_n_s_annotationText, __pyx_k_annotationText, sizeof(__pyx_k_annotationText), 0, 0, 1, 1},
  {&__pyx_kp_s_annotation_2, __pyx_k_annotation_2, sizeof(__pyx_k_annotation_2), 0, 0, 1, 0},
  {&__pyx_kp_s_annotation_3, __pyx_k_annotation_3, sizeof(__pyx_k_annotation_3), 0, 0, 1, 0},
  {&__pyx_n_s_annotation_4, __pyx_k_annotation_4, sizeof(__pyx_k_annotation_4), 0, 0, 1, 1},
  {&__pyx_kp_s_annotation_is_NULL, __pyx_k_annotation_is_NULL, sizeof(__pyx_k_annotation_is_NULL), 0, 0, 1, 0},
  {&__pyx_kp_s_annotation_is_NULL_2, __pyx_k_annotation_is_NULL_2, sizeof(__pyx_k_annotation_is_NULL_2), 0, 0, 1, 0},
  {&__pyx_n_s_annotations, __pyx_k_annotations, sizeof(__pyx_k_annotations), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arelle_arelle_c, __pyx_k_arelle_arelle_c, sizeof(__pyx_k_arelle_arelle_c), 0, 0, 1, 1},
  {&__pyx_kp_s_arelle_loadSchemaGrammarNull_sch, __pyx_k_arelle_loadSchemaGrammarNull_sch, sizeof(__pyx_k_arelle_loadSchemaGrammarNull_sch), 0, 0, 1, 0},
  {&__pyx_kp_s_arelle_loadSchemaNamespaceConfli, __pyx_k_arelle_loadSchemaNamespaceConfli, sizeof(__pyx_k_arelle_loadSchemaNamespaceConfli), 0, 0, 1, 0},
  {&__pyx_kp_s_arelle_xerces, __pyx_k_arelle_xerces, sizeof(__pyx_k_arelle_xerces), 0, 0, 1, 0},
  {&__pyx_n_s_bTrue, __pyx_k_bTrue, sizeof(__pyx_k_bTrue), 0, 0, 1, 1},
  {&__pyx_n_s_byte_s, __pyx_k_byte_s, sizeof(__pyx_k_byte_s), 0, 0, 1, 1},
  {&__pyx_n_s_bytes, __pyx_k_bytes, sizeof(__pyx_k_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_c_s, __pyx_k_c_s, sizeof(__pyx_k_c_s), 0, 0, 1, 1},
  {&__pyx_kp_s_characters_len_value, __pyx_k_characters_len_value, sizeof(__pyx_k_characters_len_value), 0, 0, 1, 0},
  {&__pyx_kp_s_classVar, __pyx_k_classVar, sizeof(__pyx_k_classVar), 0, 0, 1, 0},
  {&__pyx_n_s_classVar_2, __pyx_k_classVar_2, sizeof(__pyx_k_classVar_2), 0, 0, 1, 1},
  {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
  {&__pyx_n_s_cntlr, __pyx_k_cntlr, sizeof(__pyx_k_cntlr), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_column, __pyx_k_column, sizeof(__pyx_k_column), 0, 0, 1, 1},
  {&__pyx_kp_s_comment, __pyx_k_comment, sizeof(__pyx_k_comment), 0, 0, 1, 0},
  {&__pyx_n_s_contentHandler, __pyx_k_contentHandler, sizeof(__pyx_k_contentHandler), 0, 0, 1, 1},
  {&__pyx_kp_s_conversions_strlen_c1_c2_s1_s2, __pyx_k_conversions_strlen_c1_c2_s1_s2, sizeof(__pyx_k_conversions_strlen_c1_c2_s1_s2), 0, 0, 1, 0},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_domImpl, __pyx_k_domImpl, sizeof(__pyx_k_domImpl), 0, 0, 1, 1},
  {&__pyx_n_s_done, __pyx_k_done, sizeof(__pyx_k_done), 0, 0, 1, 1},
  {&__pyx_kp_s_doneParsedToken, __pyx_k_doneParsedToken, sizeof(__pyx_k_doneParsedToken), 0, 0, 1, 0},
  {&__pyx_n_s_element, __pyx_k_element, sizeof(__pyx_k_element), 0, 0, 1, 1},
  {&__pyx_n_s_elementDecl, __pyx_k_elementDecl, sizeof(__pyx_k_elementDecl), 0, 0, 1, 1},
  {&__pyx_kp_s_element_2, __pyx_k_element_2, sizeof(__pyx_k_element_2), 0, 0, 1, 0},
  {&__pyx_kp_s_eltdescs, __pyx_k_eltdescs, sizeof(__pyx_k_eltdescs), 0, 0, 1, 0},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_endCDATA, __pyx_k_endCDATA, sizeof(__pyx_k_endCDATA), 0, 0, 1, 1},
  {&__pyx_n_s_endDTD, __pyx_k_endDTD, sizeof(__pyx_k_endDTD), 0, 0, 1, 1},
  {&__pyx_n_s_endDocument, __pyx_k_endDocument, sizeof(__pyx_k_endDocument), 0, 0, 1, 1},
  {&__pyx_n_s_endElement, __pyx_k_endElement, sizeof(__pyx_k_endElement), 0, 0, 1, 1},
  {&__pyx_kp_s_endEntity_name, __pyx_k_endEntity_name, sizeof(__pyx_k_endEntity_name), 0, 0, 1, 0},
  {&__pyx_kp_s_endPrefixMapping_prefix, __pyx_k_endPrefixMapping_prefix, sizeof(__pyx_k_endPrefixMapping_prefix), 0, 0, 1, 0},
  {&__pyx_n_s_eq, __pyx_k_eq, sizeof(__pyx_k_eq), 0, 0, 1, 1},
  {&__pyx_n_s_errorHandler, __pyx_k_errorHandler, sizeof(__pyx_k_errorHandler), 0, 0, 1, 1},
  {&__pyx_kp_s_error_msg_line_col_file, __pyx_k_error_msg_line_col_file, sizeof(__pyx_k_error_msg_line_col_file), 0, 0, 1, 0},
  {&__pyx_kp_s_error_msg_line_col_file_elt_val, __pyx_k_error_msg_line_col_file_elt_val, sizeof(__pyx_k_error_msg_line_col_file_elt_val), 0, 0, 1, 0},
  {&__pyx_n_s_errors, __pyx_k_errors, sizeof(__pyx_k_errors), 0, 0, 1, 1},
  {&__pyx_n_s_fasb, __pyx_k_fasb, sizeof(__pyx_k_fasb), 0, 0, 1, 1},
  {&__pyx_kp_s_fatal_error_msg_line_col, __pyx_k_fatal_error_msg_line_col, sizeof(__pyx_k_fatal_error_msg_line_col), 0, 0, 1, 0},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filepath, __pyx_k_filepath, sizeof(__pyx_k_filepath), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fromfile, __pyx_k_fromfile, sizeof(__pyx_k_fromfile), 0, 0, 1, 1},
  {&__pyx_n_s_fromstring, __pyx_k_fromstring, sizeof(__pyx_k_fromstring), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_grammarPool, __pyx_k_grammarPool, sizeof(__pyx_k_grammarPool), 0, 0, 1, 1},
  {&__pyx_kp_s_hello_from_Cython, __pyx_k_hello_from_Cython, sizeof(__pyx_k_hello_from_Cython), 0, 0, 1, 0},
  {&__pyx_kp_s_http_www_w3_org_1999_xlink, __pyx_k_http_www_w3_org_1999_xlink, sizeof(__pyx_k_http_www_w3_org_1999_xlink), 0, 0, 1, 0},
  {&__pyx_kp_s_http_www_xbrl_org_2003_linkbase, __pyx_k_http_www_xbrl_org_2003_linkbase, sizeof(__pyx_k_http_www_xbrl_org_2003_linkbase), 0, 0, 1, 0},
  {&__pyx_kp_s_http_www_xbrl_org_2003_xbrl_link, __pyx_k_http_www_xbrl_org_2003_xbrl_link, sizeof(__pyx_k_http_www_xbrl_org_2003_xbrl_link), 0, 0, 1, 0},
  {&__pyx_kp_s_http_www_xbrl_org_2003_xlink_200, __pyx_k_http_www_xbrl_org_2003_xlink_200, sizeof(__pyx_k_http_www_xbrl_org_2003_xlink_200), 0, 0, 1, 0},
  {&__pyx_kp_s_http_www_xbrl_org_2008_generic_l, __pyx_k_http_www_xbrl_org_2008_generic_l, sizeof(__pyx_k_http_www_xbrl_org_2008_generic_l), 0, 0, 1, 0},
  {&__pyx_kp_s_http_www_xbrl_org_2008_inlineXBR, __pyx_k_http_www_xbrl_org_2008_inlineXBR, sizeof(__pyx_k_http_www_xbrl_org_2008_inlineXBR), 0, 0, 1, 0},
  {&__pyx_kp_s_http_www_xbrl_org_2013_inlineXBR, __pyx_k_http_www_xbrl_org_2013_inlineXBR, sizeof(__pyx_k_http_www_xbrl_org_2013_inlineXBR), 0, 0, 1, 0},
  {&__pyx_kp_s_http_xbrl_org_2008_generic, __pyx_k_http_xbrl_org_2008_generic, sizeof(__pyx_k_http_xbrl_org_2008_generic), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_ignorableWhitespace, __pyx_k_ignorableWhitespace, sizeof(__pyx_k_ignorableWhitespace), 0, 0, 1, 1},
  {&__pyx_n_s_ignore, __pyx_k_ignore, sizeof(__pyx_k_ignore), 0, 0, 1, 1},
  {&__pyx_n_s_ignore2, __pyx_k_ignore2, sizeof(__pyx_k_ignore2), 0, 0, 1, 1},
  {&__pyx_n_s_implFeatures, __pyx_k_implFeatures, sizeof(__pyx_k_implFeatures), 0, 0, 1, 1},
  {&__pyx_n_s_implFeatures_2, __pyx_k_implFeatures_2, sizeof(__pyx_k_implFeatures_2), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_kp_b_in_memory_no_filename_provided, __pyx_k_in_memory_no_filename_provided, sizeof(__pyx_k_in_memory_no_filename_provided), 0, 0, 0, 0},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 0, 0, 1, 1},
  {&__pyx_kp_s_initialized_flag_terminated_flag, __pyx_k_initialized_flag_terminated_flag, sizeof(__pyx_k_initialized_flag_terminated_flag), 0, 0, 1, 0},
  {&__pyx_kp_u_inline_XBRL_instance, __pyx_k_inline_XBRL_instance, sizeof(__pyx_k_inline_XBRL_instance), 0, 1, 0, 0},
  {&__pyx_n_s_inpSrc, __pyx_k_inpSrc, sizeof(__pyx_k_inpSrc), 0, 0, 1, 1},
  {&__pyx_kp_s_input_string_len, __pyx_k_input_string_len, sizeof(__pyx_k_input_string_len), 0, 0, 1, 0},
  {&__pyx_n_s_instDocFile, __pyx_k_instDocFile, sizeof(__pyx_k_instDocFile), 0, 0, 1, 1},
  {&__pyx_n_s_instFile, __pyx_k_instFile, sizeof(__pyx_k_instFile), 0, 0, 1, 1},
  {&__pyx_n_u_instance, __pyx_k_instance, sizeof(__pyx_k_instance), 0, 1, 0, 1},
  {&__pyx_n_s_internString, __pyx_k_internString, sizeof(__pyx_k_internString), 0, 0, 1, 1},
  {&__pyx_n_s_internStrings, __pyx_k_internStrings, sizeof(__pyx_k_internStrings), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_kp_s_lastParsedToken, __pyx_k_lastParsedToken, sizeof(__pyx_k_lastParsedToken), 0, 0, 1, 0},
  {&__pyx_kp_s_lastParsedToken_null, __pyx_k_lastParsedToken_null, sizeof(__pyx_k_lastParsedToken_null), 0, 0, 1, 0},
  {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
  {&__pyx_n_s_lexicalHandler, __pyx_k_lexicalHandler, sizeof(__pyx_k_lexicalHandler), 0, 0, 1, 1},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_u_linkbase, __pyx_k_linkbase, sizeof(__pyx_k_linkbase), 0, 1, 0, 1},
  {&__pyx_n_s_linkbaseRefs, __pyx_k_linkbaseRefs, sizeof(__pyx_k_linkbaseRefs), 0, 0, 1, 1},
  {&__pyx_kp_s_loadGrammar_completed, __pyx_k_loadGrammar_completed, sizeof(__pyx_k_loadGrammar_completed), 0, 0, 1, 0},
  {&__pyx_kp_s_loadGrammar_start, __pyx_k_loadGrammar_start, sizeof(__pyx_k_loadGrammar_start), 0, 0, 1, 0},
  {&__pyx_kp_s_load_schema_grammar_ns_doc, __pyx_k_load_schema_grammar_ns_doc, sizeof(__pyx_k_load_schema_grammar_ns_doc), 0, 0, 1, 0},
  {&__pyx_kp_s_loc_name, __pyx_k_loc_name, sizeof(__pyx_k_loc_name), 0, 0, 1, 0},
  {&__pyx_n_s_localName, __pyx_k_localName, sizeof(__pyx_k_localName), 0, 0, 1, 1},
  {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {&__pyx_n_s_lxmlSaxHandler, __pyx_k_lxmlSaxHandler, sizeof(__pyx_k_lxmlSaxHandler), 0, 0, 1, 1},
  {&__pyx_n_s_lxmlSaxResolver, __pyx_k_lxmlSaxResolver, sizeof(__pyx_k_lxmlSaxResolver), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 0, 1, 1},
  {&__pyx_n_s_modelManager, __pyx_k_modelManager, sizeof(__pyx_k_modelManager), 0, 0, 1, 1},
  {&__pyx_n_s_modelWasChanged, __pyx_k_modelWasChanged, sizeof(__pyx_k_modelWasChanged), 0, 0, 1, 1},
  {&__pyx_n_s_modelXbrl, __pyx_k_modelXbrl, sizeof(__pyx_k_modelXbrl), 0, 0, 1, 1},
  {&__pyx_n_s_nameSpace, __pyx_k_nameSpace, sizeof(__pyx_k_nameSpace), 0, 0, 1, 1},
  {&__pyx_n_s_nameSpaceDocLocation, __pyx_k_nameSpaceDocLocation, sizeof(__pyx_k_nameSpaceDocLocation), 0, 0, 1, 1},
  {&__pyx_kp_s_namespace, __pyx_k_namespace, sizeof(__pyx_k_namespace), 0, 0, 1, 0},
  {&__pyx_n_s_namespaceDocumentLocations, __pyx_k_namespaceDocumentLocations, sizeof(__pyx_k_namespaceDocumentLocations), 0, 0, 1, 1},
  {&__pyx_n_s_namespaceItem, __pyx_k_namespaceItem, sizeof(__pyx_k_namespaceItem), 0, 0, 1, 1},
  {&__pyx_n_s_namespaceItems, __pyx_k_namespaceItems, sizeof(__pyx_k_namespaceItems), 0, 0, 1, 1},
  {&__pyx_n_s_namespaceURI, __pyx_k_namespaceURI, sizeof(__pyx_k_namespaceURI), 0, 0, 1, 1},
  {&__pyx_kp_s_namespace_annotations, __pyx_k_namespace_annotations, sizeof(__pyx_k_namespace_annotations), 0, 0, 1, 0},
  {&__pyx_kp_s_namespace_doc, __pyx_k_namespace_doc, sizeof(__pyx_k_namespace_doc), 0, 0, 1, 0},
  {&__pyx_kp_s_namespace_doc_null, __pyx_k_namespace_doc_null, sizeof(__pyx_k_namespace_doc_null), 0, 0, 1, 0},
  {&__pyx_kp_s_namespace_elements, __pyx_k_namespace_elements, sizeof(__pyx_k_namespace_elements), 0, 0, 1, 0},
  {&__pyx_kp_s_namespace_locations_list_null, __pyx_k_namespace_locations_list_null, sizeof(__pyx_k_namespace_locations_list_null), 0, 0, 1, 0},
  {&__pyx_kp_s_namespace_no_elements, __pyx_k_namespace_no_elements, sizeof(__pyx_k_namespace_no_elements), 0, 0, 1, 0},
  {&__pyx_n_s_namespaces, __pyx_k_namespaces, sizeof(__pyx_k_namespaces), 0, 0, 1, 1},
  {&__pyx_n_s_namespacesSize, __pyx_k_namespacesSize, sizeof(__pyx_k_namespacesSize), 0, 0, 1, 1},
  {&__pyx_kp_s_namespaces_size, __pyx_k_namespaces_size, sizeof(__pyx_k_namespaces_size), 0, 0, 1, 0},
  {&__pyx_kp_s_no_elements, __pyx_k_no_elements, sizeof(__pyx_k_no_elements), 0, 0, 1, 0},
  {&__pyx_kp_s_no_types, __pyx_k_no_types, sizeof(__pyx_k_no_types), 0, 0, 1, 0},
  {&__pyx_n_s_nonDtsSchemaRefs, __pyx_k_nonDtsSchemaRefs, sizeof(__pyx_k_nonDtsSchemaRefs), 0, 0, 1, 1},
  {&__pyx_kp_s_not_null, __pyx_k_not_null, sizeof(__pyx_k_not_null), 0, 0, 1, 0},
  {&__pyx_n_s_ns, __pyx_k_ns, sizeof(__pyx_k_ns), 0, 0, 1, 1},
  {&__pyx_n_s_nsNbr, __pyx_k_nsNbr, sizeof(__pyx_k_nsNbr), 0, 0, 1, 1},
  {&__pyx_kp_s_ns_URI, __pyx_k_ns_URI, sizeof(__pyx_k_ns_URI), 0, 0, 1, 0},
  {&__pyx_n_s_null, __pyx_k_null, sizeof(__pyx_k_null), 0, 0, 1, 1},
  {&__pyx_kp_s_null_annotation_string, __pyx_k_null_annotation_string, sizeof(__pyx_k_null_annotation_string), 0, 0, 1, 0},
  {&__pyx_kp_s_null_annotation_string_2, __pyx_k_null_annotation_string_2, sizeof(__pyx_k_null_annotation_string_2), 0, 0, 1, 0},
  {&__pyx_kp_s_null_annotation_text, __pyx_k_null_annotation_text, sizeof(__pyx_k_null_annotation_text), 0, 0, 1, 0},
  {&__pyx_kp_s_null_grammar, __pyx_k_null_grammar, sizeof(__pyx_k_null_grammar), 0, 0, 1, 0},
  {&__pyx_kp_s_object_count, __pyx_k_object_count, sizeof(__pyx_k_object_count), 0, 0, 1, 0},
  {&__pyx_n_s_openSax2Parser, __pyx_k_openSax2Parser, sizeof(__pyx_k_openSax2Parser), 0, 0, 1, 1},
  {&__pyx_kp_s_parse_first, __pyx_k_parse_first, sizeof(__pyx_k_parse_first), 0, 0, 1, 0},
  {&__pyx_n_s_parser, __pyx_k_parser, sizeof(__pyx_k_parser), 0, 0, 1, 1},
  {&__pyx_kp_s_parsing_instance, __pyx_k_parsing_instance, sizeof(__pyx_k_parsing_instance), 0, 0, 1, 0},
  {&__pyx_n_s_partition, __pyx_k_partition, sizeof(__pyx_k_partition), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_kp_s_processingInstruction_target_dat, __pyx_k_processingInstruction_target_dat, sizeof(__pyx_k_processingInstruction_target_dat), 0, 0, 1, 0},
  {&__pyx_n_s_pyFileDesc, __pyx_k_pyFileDesc, sizeof(__pyx_k_pyFileDesc), 0, 0, 1, 1},
  {&__pyx_n_s_pyListTest, __pyx_k_pyListTest, sizeof(__pyx_k_pyListTest), 0, 0, 1, 1},
  {&__pyx_n_s_pyRootDict, __pyx_k_pyRootDict, sizeof(__pyx_k_pyRootDict), 0, 0, 1, 1},
  {&__pyx_n_s_pyRootDictPtr, __pyx_k_pyRootDictPtr, sizeof(__pyx_k_pyRootDictPtr), 0, 0, 1, 1},
  {&__pyx_kp_s_pyRootList, __pyx_k_pyRootList, sizeof(__pyx_k_pyRootList), 0, 0, 1, 0},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qnameValueHash, __pyx_k_qnameValueHash, sizeof(__pyx_k_qnameValueHash), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_resetErrors, __pyx_k_resetErrors, sizeof(__pyx_k_resetErrors), 0, 0, 1, 1},
  {&__pyx_kp_s_resolveEntity_pub_sys, __pyx_k_resolveEntity_pub_sys, sizeof(__pyx_k_resolveEntity_pub_sys), 0, 0, 1, 0},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_kp_s_revectored_file, __pyx_k_revectored_file, sizeof(__pyx_k_revectored_file), 0, 0, 1, 0},
  {&__pyx_n_s_root, __pyx_k_root, sizeof(__pyx_k_root), 0, 0, 1, 1},
  {&__pyx_n_u_rss, __pyx_k_rss, sizeof(__pyx_k_rss), 0, 1, 0, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_u_schema, __pyx_k_schema, sizeof(__pyx_k_schema), 0, 1, 0, 1},
  {&__pyx_n_s_schemaGrammar, __pyx_k_schemaGrammar, sizeof(__pyx_k_schemaGrammar), 0, 0, 1, 1},
  {&__pyx_n_s_schemaLocation, __pyx_k_schemaLocation, sizeof(__pyx_k_schemaLocation), 0, 0, 1, 1},
  {&__pyx_n_s_schemaLocationsList, __pyx_k_schemaLocationsList, sizeof(__pyx_k_schemaLocationsList), 0, 0, 1, 1},
  {&__pyx_n_s_schemaRefs, __pyx_k_schemaRefs, sizeof(__pyx_k_schemaRefs), 0, 0, 1, 1},
  {&__pyx_kp_s_setDocumentLocator_pubId_sysId, __pyx_k_setDocumentLocator_pubId_sysId, sizeof(__pyx_k_setDocumentLocator_pubId_sysId), 0, 0, 1, 0},
  {&__pyx_n_s_setdefault, __pyx_k_setdefault, sizeof(__pyx_k_setdefault), 0, 0, 1, 1},
  {&__pyx_kp_s_setupSAX2parser_DOM_parser_is_al, __pyx_k_setupSAX2parser_DOM_parser_is_al, sizeof(__pyx_k_setupSAX2parser_DOM_parser_is_al), 0, 0, 1, 0},
  {&__pyx_kp_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 0},
  {&__pyx_kp_s_skippedEntity, __pyx_k_skippedEntity, sizeof(__pyx_k_skippedEntity), 0, 0, 1, 0},
  {&__pyx_kp_s_skipping_load_schema_grammar_ns, __pyx_k_skipping_load_schema_grammar_ns, sizeof(__pyx_k_skipping_load_schema_grammar_ns), 0, 0, 1, 0},
  {&__pyx_n_s_startCDATA, __pyx_k_startCDATA, sizeof(__pyx_k_startCDATA), 0, 0, 1, 1},
  {&__pyx_n_s_startDTD, __pyx_k_startDTD, sizeof(__pyx_k_startDTD), 0, 0, 1, 1},
  {&__pyx_n_s_startDocument, __pyx_k_startDocument, sizeof(__pyx_k_startDocument), 0, 0, 1, 1},
  {&__pyx_kp_s_startElement_trace1_localname_ra, __pyx_k_startElement_trace1_localname_ra, sizeof(__pyx_k_startElement_trace1_localname_ra), 0, 0, 1, 0},
  {&__pyx_kp_s_startElement_uri_localname_qname, __pyx_k_startElement_uri_localname_qname, sizeof(__pyx_k_startElement_uri_localname_qname), 0, 0, 1, 0},
  {&__pyx_n_s_startEntity, __pyx_k_startEntity, sizeof(__pyx_k_startEntity), 0, 0, 1, 1},
  {&__pyx_kp_s_startPrefixMapping_prefix_uri, __pyx_k_startPrefixMapping_prefix_uri, sizeof(__pyx_k_startPrefixMapping_prefix_uri), 0, 0, 1, 0},
  {&__pyx_n_s_std_s, __pyx_k_std_s, sizeof(__pyx_k_std_s), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_kp_s_tag, __pyx_k_tag, sizeof(__pyx_k_tag), 0, 0, 1, 0},
  {&__pyx_n_s_targetNS, __pyx_k_targetNS, sizeof(__pyx_k_targetNS), 0, 0, 1, 1},
  {&__pyx_n_s_targetNamespace, __pyx_k_targetNamespace, sizeof(__pyx_k_targetNamespace), 0, 0, 1, 1},
  {&__pyx_n_s_targetNamespacePrefix, __pyx_k_targetNamespacePrefix, sizeof(__pyx_k_targetNamespacePrefix), 0, 0, 1, 1},
  {&__pyx_kp_s_target_namespace, __pyx_k_target_namespace, sizeof(__pyx_k_target_namespace), 0, 0, 1, 0},
  {&__pyx_n_s_terminate, __pyx_k_terminate, sizeof(__pyx_k_terminate), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_test_2, __pyx_k_test_2, sizeof(__pyx_k_test_2), 0, 0, 1, 1},
  {&__pyx_n_u_testcase, __pyx_k_testcase, sizeof(__pyx_k_testcase), 0, 1, 0, 1},
  {&__pyx_kp_u_testcases_index, __pyx_k_testcases_index, sizeof(__pyx_k_testcases_index), 0, 1, 0, 0},
  {&__pyx_n_s_testsax2, __pyx_k_testsax2, sizeof(__pyx_k_testsax2), 0, 0, 1, 1},
  {&__pyx_n_s_testsax2incremental, __pyx_k_testsax2incremental, sizeof(__pyx_k_testsax2incremental), 0, 0, 1, 1},
  {&__pyx_n_s_testschema, __pyx_k_testschema, sizeof(__pyx_k_testschema), 0, 0, 1, 1},
  {&__pyx_n_s_testschemaDOM, __pyx_k_testschemaDOM, sizeof(__pyx_k_testschemaDOM), 0, 0, 1, 1},
  {&__pyx_kp_b_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 0, 0},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_token, __pyx_k_token, sizeof(__pyx_k_token), 0, 0, 1, 1},
  {&__pyx_kp_s_trace1, __pyx_k_trace1, sizeof(__pyx_k_trace1), 0, 0, 1, 0},
  {&__pyx_n_s_trace10, __pyx_k_trace10, sizeof(__pyx_k_trace10), 0, 0, 1, 1},
  {&__pyx_n_s_trace1_2, __pyx_k_trace1_2, sizeof(__pyx_k_trace1_2), 0, 0, 1, 1},
  {&__pyx_kp_s_trace2, __pyx_k_trace2, sizeof(__pyx_k_trace2), 0, 0, 1, 0},
  {&__pyx_n_s_trace2_2, __pyx_k_trace2_2, sizeof(__pyx_k_trace2_2), 0, 0, 1, 1},
  {&__pyx_kp_s_trace2_domImpl_is, __pyx_k_trace2_domImpl_is, sizeof(__pyx_k_trace2_domImpl_is), 0, 0, 1, 0},
  {&__pyx_n_s_trace3, __pyx_k_trace3, sizeof(__pyx_k_trace3), 0, 0, 1, 1},
  {&__pyx_n_s_trace4, __pyx_k_trace4, sizeof(__pyx_k_trace4), 0, 0, 1, 1},
  {&__pyx_n_s_trace5, __pyx_k_trace5, sizeof(__pyx_k_trace5), 0, 0, 1, 1},
  {&__pyx_n_s_trace6, __pyx_k_trace6, sizeof(__pyx_k_trace6), 0, 0, 1, 1},
  {&__pyx_n_s_trace7, __pyx_k_trace7, sizeof(__pyx_k_trace7), 0, 0, 1, 1},
  {&__pyx_n_s_trace8, __pyx_k_trace8, sizeof(__pyx_k_trace8), 0, 0, 1, 1},
  {&__pyx_kp_s_transcoded_value, __pyx_k_transcoded_value, sizeof(__pyx_k_transcoded_value), 0, 0, 1, 0},
  {&__pyx_n_s_txmyFile, __pyx_k_txmyFile, sizeof(__pyx_k_txmyFile), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_kp_s_type_2, __pyx_k_type_2, sizeof(__pyx_k_type_2), 0, 0, 1, 0},
  {&__pyx_kp_s_type_3, __pyx_k_type_3, sizeof(__pyx_k_type_3), 0, 0, 1, 0},
  {&__pyx_kp_u_unknown_XML, __pyx_k_unknown_XML, sizeof(__pyx_k_unknown_XML), 0, 1, 0, 0},
  {&__pyx_n_s_updatedXSModel, __pyx_k_updatedXSModel, sizeof(__pyx_k_updatedXSModel), 0, 0, 1, 1},
  {&__pyx_n_s_url, __pyx_k_url, sizeof(__pyx_k_url), 0, 0, 1, 1},
  {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {&__pyx_n_s_validate, __pyx_k_validate, sizeof(__pyx_k_validate), 0, 0, 1, 1},
  {&__pyx_kp_u_versioning_report, __pyx_k_versioning_report, sizeof(__pyx_k_versioning_report), 0, 1, 0, 0},
  {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {&__pyx_kp_s_www_w3_org, __pyx_k_www_w3_org, sizeof(__pyx_k_www_w3_org), 0, 0, 1, 0},
  {&__pyx_kp_s_xbrl_org, __pyx_k_xbrl_org, sizeof(__pyx_k_xbrl_org), 0, 0, 1, 0},
  {&__pyx_kp_s_xerces_already_initialized, __pyx_k_xerces_already_initialized, sizeof(__pyx_k_xerces_already_initialized), 0, 0, 1, 0},
  {&__pyx_n_s_xerces_resolve_entity, __pyx_k_xerces_resolve_entity, sizeof(__pyx_k_xerces_resolve_entity), 0, 0, 1, 1},
  {&__pyx_kp_s_xerces_terminated_or_not_started, __pyx_k_xerces_terminated_or_not_started, sizeof(__pyx_k_xerces_terminated_or_not_started), 0, 0, 1, 0},
  {&__pyx_kp_s_xerces_termination_but_not_initi, __pyx_k_xerces_termination_but_not_initi, sizeof(__pyx_k_xerces_termination_but_not_initi), 0, 0, 1, 0},
  {&__pyx_n_u_xhtml, __pyx_k_xhtml, sizeof(__pyx_k_xhtml), 0, 1, 0, 1},
  {&__pyx_n_s_xmlChFile, __pyx_k_xmlChFile, sizeof(__pyx_k_xmlChFile), 0, 0, 1, 1},
  {&__pyx_n_s_xmlChSchemaLocation, __pyx_k_xmlChSchemaLocation, sizeof(__pyx_k_xmlChSchemaLocation), 0, 0, 1, 1},
  {&__pyx_n_s_xsElement, __pyx_k_xsElement, sizeof(__pyx_k_xsElement), 0, 0, 1, 1},
  {&__pyx_n_s_xsModel, __pyx_k_xsModel, sizeof(__pyx_k_xsModel), 0, 0, 1, 1},
  {&__pyx_kp_s_xsModel_is_null, __pyx_k_xsModel_is_null, sizeof(__pyx_k_xsModel_is_null), 0, 0, 1, 0},
  {&__pyx_n_s_xsObjects, __pyx_k_xsObjects, sizeof(__pyx_k_xsObjects), 0, 0, 1, 1},
  {&__pyx_n_s_xsTypeDefinition, __pyx_k_xsTypeDefinition, sizeof(__pyx_k_xsTypeDefinition), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 152, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "arelle_cython/arelle_c/utils.pxi":37
 *         xmlByteStr = <XMLByte*>c_s # avoid copying byte content to another buffer and depend on fileDesc lifetime for contents
 *         if hasattr(pyFileDesc, "filepath"):
 *             byte_s = pyFileDesc.filepath.encode("utf-8")             # <<<<<<<<<<<<<<
 *         else:
 *             byte_s = b"(in memory, no filename provided, no xml base or relative hrefs possible)"
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple_)) __PYX_ERR(3, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "arelle_cython/arelle_c/utils.pxi":46
 *         release(&xmlChFile)
 *     elif hasattr(pyFileDesc, "filepath"):
 *         byte_s = pyFileDesc.filepath.encode("utf-8")             # <<<<<<<<<<<<<<
 *         c_s = byte_s
 *         xmlChFile = transcode(c_s)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(3, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":318
 *                 if this.hasIx11Namespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2013/inlineXBRL/xhtml-inlinexbrl-1_1.xsd")             # <<<<<<<<<<<<<<
 *                 elif this.hasIxNamespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_http_www_xbrl_org_2013_inlineXBR); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":321
 *                 elif this.hasIxNamespace:
 *                     pyIdentificationResults.type = u"inline XBRL instance"
 *                     pyIdentificationResults.schemaRefs.add("http://www.xbrl.org/2008/inlineXBRL/xhtml-inlinexbrl-1_0.xsd")             # <<<<<<<<<<<<<<
 *                 else:
 *                     pyIdentificationResults.type = u"xhtml"
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_http_www_xbrl_org_2008_inlineXBR); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "arelle_cython/arelle_c/ModelXbrl.pxi":339
 *                     attrValue = getAttrValue(attrs, nsXlink, lnHref)
 *                     if attrValue is not None:
 *                         pyIdentificationResults.schemaRefs.add(attrValue.partition("#")[0])             # <<<<<<<<<<<<<<
 *             elif this.eltDepth == 0 and compareString(localname, lnLinkbase) == 0:
 *                 this.isIdentified = True # no need to parse further
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s__8); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "arelle_cython/arelle_c/ModelDocument.pxi":48
 *         sax2Handler.setModelDocument(modelDocumentPtr)
 *         cdef InputSource* inpSrc = fileDescInputSource(pyFileDesc)
 *         byte_s = " ".join(schemaLocationsList).encode("utf-8")             # <<<<<<<<<<<<<<
 *         cdef char* c_s = byte_s
 *         cdef XMLCh* xmlChSchemaLocation = transcode(c_s)
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(5, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "arelle_cython/arelle_c/xerces.pxi":87
 *             cdef char* s = transcode( text_node.getNodeValue() )
 *             pyS = s
 *             print ( "transcoded value {}".format( pyS.decode("utf-8") ) );             # <<<<<<<<<<<<<<
 *             release(&s)
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(6, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "arelle_cython/arelle_c/xerces.pxi":92
 *     property localName:
 *         def __get__( self ):
 *             return transcode( self._c_node.getLocalName() ).decode("utf-8")             # <<<<<<<<<<<<<<
 *     property namespaceURI:
 *         def __get__( self ):
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(6, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "arelle_cython/arelle_c/xerces.pxi":95
 *     property namespaceURI:
 *         def __get__( self ):
 *             return transcode( self._c_node.getNamespaceURI() ).decode("utf-8")             # <<<<<<<<<<<<<<
 *     property clarkName:
 *         def __get__( self ):
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(6, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "arelle_cython/arelle_c/xerces.pxi":108
 *             if xmlStr == NULL:
 *                 return None
 *             return transcode( xmlStr ).decode("utf-8")             # <<<<<<<<<<<<<<
 *     property rawtext:
 *         def __get__( self ):
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(6, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "arelle_cython/arelle_c/xerces.pxi":119
 *             cdef char* xmlStrBytes = <char*>xmlStr
 *             cdef XMLSize_t strLen = stringLen(xmlStr)
 *             return xmlStrBytes[:strLen*2].decode("UTF_16LE")             # <<<<<<<<<<<<<<
 *     property timeconversion:
 *         def __get__( self ):
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_n_s_UTF_16LE); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(6, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "arelle_cython/arelle_c/xerces.pxi":131
 *                 xmlStrBytes = <char*>xmlStr
 *                 strLen = stringLen(xmlStr)
 *                 pyStr1 = xmlStrBytes[:strLen*2].decode("UTF_16LE")             # <<<<<<<<<<<<<<
 *             t2 = time()
 *             for i in range(2000000):
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_n_s_UTF_16LE); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(6, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "arelle_cython/arelle_c/xerces.pxi":135
 *             for i in range(2000000):
 *                 xmlStrBytes = transcode(xmlStr)
 *                 pyStr2 = xmlStrBytes.decode("utf-8")             # <<<<<<<<<<<<<<
 *                 release(&xmlStrBytes)
 *             t3 = time()
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(6, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "arelle_cython/arelle_c/xerces.pxi":186
 *     parser.setDoNamespaces( True )
 *     parser.setDoSchema( True )
 *     byte_s = s.encode("utf-8")             # <<<<<<<<<<<<<<
 *     cdef const char* c_s = byte_s
 *     print("trace1 {}".format(c_s))
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(6, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "arelle_cython/arelle_c/xerces.pxi":806
 *     parser.setLexicalHandler(lexicalHandler)
 *     parser.setErrorHandler(errorHandler)
 *     byte_s = instDocFile.encode("utf-8")             # <<<<<<<<<<<<<<
 *     cdef const char* c_s = byte_s
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(6, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "arelle_cython/arelle_c/xerces.pxi":853
 *     parser.setEntityResolver(lxmlSaxResolver)
 *     print("loadGrammar start")
 *     byte_s = txmyFile.encode("utf-8")             # <<<<<<<<<<<<<<
 *     cdef const char* c_s = byte_s
 *     cdef XMLCh* xmlChFile = transcode(c_s)
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(6, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "arelle_cython/arelle_c/xerces.pxi":876
 *                 print("namespace {} {} elements".format(transcode(nameSpace), xsObjects.getLength()))
 *     print("parsing instance")
 *     byte_s = instFile.encode("utf-8")             # <<<<<<<<<<<<<<
 *     c_s = byte_s
 *     xmlChFile = transcode(c_s)
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(6, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "arelle_cython/arelle_c/xerces.pxi":881
 *     inpSrc = ( new LocalFileInputSource( xmlChFile ))
 *     parser.setFeature(fgXercesUseCachedGrammarInParse, True)
 *     byte_s = schemaLocation.encode("utf-8")             # <<<<<<<<<<<<<<
 *     c_s = byte_s
 *     cdef XMLCh* xmlChSchemaLocation = transcode(c_s)
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(6, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "arelle_cython/arelle_c/xerces.pxi":32
 * cdef bool _initialized = False, _terminated = False
 * 
 * def initialize():             # <<<<<<<<<<<<<<
 *     global _initialized
 *     assert not _initialized, "xerces already initialized"
 */
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_n_s_initialize, 32, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(6, 32, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":39
 *         _initialized = True
 * 
 * def terminate():             # <<<<<<<<<<<<<<
 *     global _initialized, _terminated
 *     assert not _initialized, "xerces termination but not initialized"
 */
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_n_s_terminate, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(6, 39, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":52
 * pyListTestPtr = <void*>_list
 * 
 * def test():             # <<<<<<<<<<<<<<
 *     cdef object pyListTest
 *     global pyListTestPtr
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_n_s_pyListTest); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(6, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_n_s_test, 52, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(6, 52, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":169
 *     return el
 * 
 * def fromstring( s ):             # <<<<<<<<<<<<<<
 *     cdef XercesDOMParser parser
 *     parser.setDoNamespaces( True )
 */
  __pyx_tuple__30 = PyTuple_Pack(7, __pyx_n_s_s, __pyx_n_s_parser, __pyx_n_s_std_s, __pyx_n_s_adoptBuffer, __pyx_n_s_inpSrc, __pyx_n_s_doc, __pyx_n_s_root); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(6, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_n_s_fromstring, 169, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(6, 169, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":182
 *     return _element( root )
 * 
 * def fromfile( s ):             # <<<<<<<<<<<<<<
 *     cdef XercesDOMParser parser
 *     parser.setDoNamespaces( True )
 */
  __pyx_tuple__32 = PyTuple_Pack(8, __pyx_n_s_s, __pyx_n_s_parser, __pyx_n_s_byte_s, __pyx_n_s_c_s, __pyx_n_s_xmlChFile, __pyx_n_s_inpSrc, __pyx_n_s_doc, __pyx_n_s_root); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(6, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_n_s_fromfile, 182, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(6, 182, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":550
 *         return NULL
 * 
 * def testschema( s ):             # <<<<<<<<<<<<<<
 *     print("trace1")
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 */
  __pyx_tuple__34 = PyTuple_Pack(29, __pyx_n_s_s, __pyx_n_s_grammarPool, __pyx_n_s_parser, __pyx_n_s_errorHandler, __pyx_n_s_lxmlSaxResolver, __pyx_n_s_std_s, __pyx_n_s_adoptBuffer, __pyx_n_s_inpSrc, __pyx_n_s_schemaGrammar, __pyx_n_s_targetNS, __pyx_n_s_annotations, __pyx_n_s_annotation_4, __pyx_n_s_annotationText, __pyx_n_s_xsElement, __pyx_n_s_xsTypeDefinition, __pyx_n_s_nsNbr, __pyx_n_s_modelWasChanged, __pyx_n_s_xsModel, __pyx_n_s_namespaces, __pyx_n_s_namespaceDocumentLocations, __pyx_n_s_namespaceItems, __pyx_n_s_namespaceItem, __pyx_n_s_namespacesSize, __pyx_n_s_i, __pyx_n_s_nameSpace, __pyx_n_s_nameSpaceDocLocation, __pyx_n_s_xsObjects, __pyx_n_s_j, __pyx_n_s_ns); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(6, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 29, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_n_s_testschema, 550, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(6, 550, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":679
 *         print ("xsModel is null")
 * 
 * def testschemaDOM( s ):             # <<<<<<<<<<<<<<
 *     print("trace1")
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 */
  __pyx_tuple__36 = PyTuple_Pack(25, __pyx_n_s_s, __pyx_n_s_grammarPool, __pyx_n_s_implFeatures, __pyx_n_s_implFeatures_2, __pyx_n_s_domImpl, __pyx_n_s_parser, __pyx_n_s_bTrue, __pyx_n_s_errorHandler, __pyx_n_s_std_s, __pyx_n_s_adoptBuffer, __pyx_n_s_inpSrc, __pyx_n_s_schemaGrammar, __pyx_n_s_annotation_4, __pyx_n_s_annotationText, __pyx_n_s_updatedXSModel, __pyx_n_s_xsModel, __pyx_n_s_namespaces, __pyx_n_s_namespacesSize, __pyx_n_s_i, __pyx_n_s_nameSpace, __pyx_n_s_xsObjects, __pyx_n_s_j, __pyx_n_s_xsElement, __pyx_n_s_xsTypeDefinition, __pyx_n_s_ns); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(6, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 25, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_n_s_testschemaDOM, 679, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(6, 679, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":772
 *         print ("xsModel is null")
 * 
 * def testsax2( s ):             # <<<<<<<<<<<<<<
 *     global _initialized, _terminated
 *     print("initialized flag {} terminated flag {}".format(_initialized, _terminated));
 */
  __pyx_tuple__38 = PyTuple_Pack(8, __pyx_n_s_s, __pyx_n_s_parser, __pyx_n_s_contentHandler, __pyx_n_s_lexicalHandler, __pyx_n_s_errorHandler, __pyx_n_s_std_s, __pyx_n_s_adoptBuffer, __pyx_n_s_inpSrc); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(6, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_n_s_testsax2, 772, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(6, 772, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":797
 *     print("trace10")
 * 
 * def testsax2incremental( ignore, instDocFile, ignore2 ):             # <<<<<<<<<<<<<<
 *     global lastParsedQName
 *     cdef SAX2XMLReader * parser = createXMLReader()
 */
  __pyx_tuple__40 = PyTuple_Pack(13, __pyx_n_s_ignore, __pyx_n_s_instDocFile, __pyx_n_s_ignore2, __pyx_n_s_parser, __pyx_n_s_contentHandler, __pyx_n_s_lexicalHandler, __pyx_n_s_errorHandler, __pyx_n_s_byte_s, __pyx_n_s_c_s, __pyx_n_s_xmlChFile, __pyx_n_s_inpSrc, __pyx_n_s_token, __pyx_n_s_result); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(6, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_n_s_testsax2incremental, 797, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(6, 797, __pyx_L1_error)

  /* "arelle_cython/arelle_c/xerces.pxi":827
 *     print("doneParsedToken {}".format(lastParsedQName))
 * 
 * def validate( txmyFile, instFile, schemaLocation ):             # <<<<<<<<<<<<<<
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)
 */
  __pyx_tuple__42 = PyTuple_Pack(22, __pyx_n_s_txmyFile, __pyx_n_s_instFile, __pyx_n_s_schemaLocation, __pyx_n_s_grammarPool, __pyx_n_s_parser, __pyx_n_s_pyRootDict, __pyx_n_s_pyRootDictPtr, __pyx_n_s_lxmlSaxHandler, __pyx_n_s_lxmlSaxResolver, __pyx_n_s_byte_s, __pyx_n_s_c_s, __pyx_n_s_xmlChFile, __pyx_n_s_inpSrc, __pyx_n_s_schemaGrammar, __pyx_n_s_updatedXSModel, __pyx_n_s_xsModel, __pyx_n_s_namespaces, __pyx_n_s_namespacesSize, __pyx_n_s_i, __pyx_n_s_nameSpace, __pyx_n_s_xsObjects, __pyx_n_s_xmlChSchemaLocation); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(6, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(3, 0, 22, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_hermf_Documents_mvsl_proj, __pyx_n_s_validate, 827, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(6, 827, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(8, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(8, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(8, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(8, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(8, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(8, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(8, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initarelle_c(void); /*proto*/
PyMODINIT_FUNC initarelle_c(void)
#else
PyMODINIT_FUNC PyInit_arelle_c(void); /*proto*/
PyMODINIT_FUNC PyInit_arelle_c(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_arelle_c(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(8, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(8, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(8, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("arelle_c", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(8, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(8, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(8, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(8, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_arelle__arelle_c) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(8, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "arelle.arelle_c")) {
      if (unlikely(PyDict_SetItemString(modules, "arelle.arelle_c", __pyx_m) < 0)) __PYX_ERR(8, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  __pyx_v_6arelle_8arelle_c_schemaLocationsListForLinkbases = Py_None; Py_INCREF(Py_None);
  __pyx_v_6arelle_8arelle_c__list = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_type_6arelle_8arelle_c_attrdict.tp_base = (&PyDict_Type);
  if (PyType_Ready(&__pyx_type_6arelle_8arelle_c_attrdict) < 0) __PYX_ERR(3, 8, __pyx_L1_error)
  __pyx_type_6arelle_8arelle_c_attrdict.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "attrdict", (PyObject *)&__pyx_type_6arelle_8arelle_c_attrdict) < 0) __PYX_ERR(3, 8, __pyx_L1_error)
  __pyx_ptype_6arelle_8arelle_c_attrdict = &__pyx_type_6arelle_8arelle_c_attrdict;
  if (PyType_Ready(&__pyx_type_6arelle_8arelle_c_genobj) < 0) __PYX_ERR(3, 15, __pyx_L1_error)
  __pyx_type_6arelle_8arelle_c_genobj.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "genobj", (PyObject *)&__pyx_type_6arelle_8arelle_c_genobj) < 0) __PYX_ERR(3, 15, __pyx_L1_error)
  __pyx_ptype_6arelle_8arelle_c_genobj = &__pyx_type_6arelle_8arelle_c_genobj;
  if (PyType_Ready(&__pyx_type_6arelle_8arelle_c_Cntlr) < 0) __PYX_ERR(4, 9, __pyx_L1_error)
  __pyx_type_6arelle_8arelle_c_Cntlr.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Cntlr", (PyObject *)&__pyx_type_6arelle_8arelle_c_Cntlr) < 0) __PYX_ERR(4, 9, __pyx_L1_error)
  __pyx_ptype_6arelle_8arelle_c_Cntlr = &__pyx_type_6arelle_8arelle_c_Cntlr;
  if (PyType_Ready(&__pyx_type_6arelle_8arelle_c_QName) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __pyx_type_6arelle_8arelle_c_QName.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "QName", (PyObject *)&__pyx_type_6arelle_8arelle_c_QName) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __pyx_ptype_6arelle_8arelle_c_QName = &__pyx_type_6arelle_8arelle_c_QName;
  __pyx_vtabptr_6arelle_8arelle_c_ModelXbrl = &__pyx_vtable_6arelle_8arelle_c_ModelXbrl;
  __pyx_vtable_6arelle_8arelle_c_ModelXbrl.internString = (PyObject *(*)(struct __pyx_obj_6arelle_8arelle_c_ModelXbrl *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6arelle_8arelle_c_9ModelXbrl_internString;
  if (PyType_Ready(&__pyx_type_6arelle_8arelle_c_ModelXbrl) < 0) __PYX_ERR(1, 25, __pyx_L1_error)
  __pyx_type_6arelle_8arelle_c_ModelXbrl.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6arelle_8arelle_c_ModelXbrl.tp_dict, __pyx_vtabptr_6arelle_8arelle_c_ModelXbrl) < 0) __PYX_ERR(1, 25, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "ModelXbrl", (PyObject *)&__pyx_type_6arelle_8arelle_c_ModelXbrl) < 0) __PYX_ERR(1, 25, __pyx_L1_error)
  __pyx_ptype_6arelle_8arelle_c_ModelXbrl = &__pyx_type_6arelle_8arelle_c_ModelXbrl;
  if (PyType_Ready(&__pyx_type_6arelle_8arelle_c_ModelDocument) < 0) __PYX_ERR(5, 4, __pyx_L1_error)
  __pyx_type_6arelle_8arelle_c_ModelDocument.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "ModelDocument", (PyObject *)&__pyx_type_6arelle_8arelle_c_ModelDocument) < 0) __PYX_ERR(5, 4, __pyx_L1_error)
  __pyx_ptype_6arelle_8arelle_c_ModelDocument = &__pyx_type_6arelle_8arelle_c_ModelDocument;
  if (PyType_Ready(&__pyx_type_6arelle_8arelle_c__Element) < 0) __PYX_ERR(6, 60, __pyx_L1_error)
  __pyx_type_6arelle_8arelle_c__Element.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "_Element", (PyObject *)&__pyx_type_6arelle_8arelle_c__Element) < 0) __PYX_ERR(6, 60, __pyx_L1_error)
  __pyx_ptype_6arelle_8arelle_c__Element = &__pyx_type_6arelle_8arelle_c__Element;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(9, 9, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  #endif

  /* "arelle_cython/arelle_c/Cntlr.pxi":5
 * from libcpp cimport bool
 * 
 * cdef bool _xerces_initialized = False, _xerces_terminated = False             # <<<<<<<<<<<<<<
 * cdef XMLGrammarPool* xerces_grammar_pool = NULL
 * 
 */
  __pyx_v_6arelle_8arelle_c__xerces_initialized = 0;
  __pyx_v_6arelle_8arelle_c__xerces_terminated = 0;

  /* "arelle_cython/arelle_c/Cntlr.pxi":6
 * 
 * cdef bool _xerces_initialized = False, _xerces_terminated = False
 * cdef XMLGrammarPool* xerces_grammar_pool = NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_6arelle_8arelle_c_xerces_grammar_pool = NULL;

  /* "arelle_cython/arelle_c/xerces.pxi":25
 * from arelle_c.xerces_sax2 cimport Attributes
 * from arelle_c.xerces_validators cimport SchemaGrammar, SchemaElementDecl, GrammarType
 * from time import time             # <<<<<<<<<<<<<<
 * from cpython.mem cimport PyMem_Malloc, PyMem_Realloc, PyMem_Free
 * from libc.stdlib cimport malloc, free
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_time);
  __Pyx_GIVEREF(__pyx_n_s_time);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_time);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_time, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(6, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":28
 * from cpython.mem cimport PyMem_Malloc, PyMem_Realloc, PyMem_Free
 * from libc.stdlib cimport malloc, free
 * from collections import OrderedDict             # <<<<<<<<<<<<<<
 * 
 * cdef bool _initialized = False, _terminated = False
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_OrderedDict);
  __Pyx_GIVEREF(__pyx_n_s_OrderedDict);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_OrderedDict);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_2) < 0) __PYX_ERR(6, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":30
 * from collections import OrderedDict
 * 
 * cdef bool _initialized = False, _terminated = False             # <<<<<<<<<<<<<<
 * 
 * def initialize():
 */
  __pyx_v_6arelle_8arelle_c__initialized = 0;
  __pyx_v_6arelle_8arelle_c__terminated = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":32
 * cdef bool _initialized = False, _terminated = False
 * 
 * def initialize():             # <<<<<<<<<<<<<<
 *     global _initialized
 *     assert not _initialized, "xerces already initialized"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6arelle_8arelle_c_1initialize, NULL, __pyx_n_s_arelle_arelle_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_initialize, __pyx_t_1) < 0) __PYX_ERR(6, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":39
 *         _initialized = True
 * 
 * def terminate():             # <<<<<<<<<<<<<<
 *     global _initialized, _terminated
 *     assert not _initialized, "xerces termination but not initialized"
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6arelle_8arelle_c_3terminate, NULL, __pyx_n_s_arelle_arelle_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_terminate, __pyx_t_1) < 0) __PYX_ERR(6, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":49
 * 
 * cdef void* pyListTestPtr
 * cdef object _list = []             # <<<<<<<<<<<<<<
 * pyListTestPtr = <void*>_list
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_6arelle_8arelle_c__list);
  __Pyx_DECREF_SET(__pyx_v_6arelle_8arelle_c__list, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":50
 * cdef void* pyListTestPtr
 * cdef object _list = []
 * pyListTestPtr = <void*>_list             # <<<<<<<<<<<<<<
 * 
 * def test():
 */
  __pyx_v_6arelle_8arelle_c_pyListTestPtr = ((void *)__pyx_v_6arelle_8arelle_c__list);

  /* "arelle_cython/arelle_c/xerces.pxi":52
 * pyListTestPtr = <void*>_list
 * 
 * def test():             # <<<<<<<<<<<<<<
 *     cdef object pyListTest
 *     global pyListTestPtr
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6arelle_8arelle_c_5test, NULL, __pyx_n_s_arelle_arelle_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(6, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":169
 *     return el
 * 
 * def fromstring( s ):             # <<<<<<<<<<<<<<
 *     cdef XercesDOMParser parser
 *     parser.setDoNamespaces( True )
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6arelle_8arelle_c_7fromstring, NULL, __pyx_n_s_arelle_arelle_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fromstring, __pyx_t_1) < 0) __PYX_ERR(6, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":182
 *     return _element( root )
 * 
 * def fromfile( s ):             # <<<<<<<<<<<<<<
 *     cdef XercesDOMParser parser
 *     parser.setDoNamespaces( True )
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6arelle_8arelle_c_9fromfile, NULL, __pyx_n_s_arelle_arelle_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fromfile, __pyx_t_1) < 0) __PYX_ERR(6, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":200
 *     return _element( root )
 * 
 * cdef char* lastParsedQName = NULL             # <<<<<<<<<<<<<<
 * 
 * cdef cppclass _ContentHandler(ContentHandler):
 */
  __pyx_v_6arelle_8arelle_c_lastParsedQName = NULL;

  /* "arelle_cython/arelle_c/xerces.pxi":325
 *     XMLSize_t lastLength
 * 
 * cdef char* EMPTYSTR = b""             # <<<<<<<<<<<<<<
 * 
 * cdef cppclass _LXMLSAX2Handler(ErrorHandler, LexicalHandler, ContentHandler):
 */
  __pyx_v_6arelle_8arelle_c_EMPTYSTR = ((char *)"");

  /* "arelle_cython/arelle_c/xerces.pxi":550
 *         return NULL
 * 
 * def testschema( s ):             # <<<<<<<<<<<<<<
 *     print("trace1")
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6arelle_8arelle_c_11testschema, NULL, __pyx_n_s_arelle_arelle_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_testschema, __pyx_t_1) < 0) __PYX_ERR(6, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":679
 *         print ("xsModel is null")
 * 
 * def testschemaDOM( s ):             # <<<<<<<<<<<<<<
 *     print("trace1")
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6arelle_8arelle_c_13testschemaDOM, NULL, __pyx_n_s_arelle_arelle_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_testschemaDOM, __pyx_t_1) < 0) __PYX_ERR(6, 679, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":772
 *         print ("xsModel is null")
 * 
 * def testsax2( s ):             # <<<<<<<<<<<<<<
 *     global _initialized, _terminated
 *     print("initialized flag {} terminated flag {}".format(_initialized, _terminated));
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6arelle_8arelle_c_15testsax2, NULL, __pyx_n_s_arelle_arelle_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_testsax2, __pyx_t_1) < 0) __PYX_ERR(6, 772, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":797
 *     print("trace10")
 * 
 * def testsax2incremental( ignore, instDocFile, ignore2 ):             # <<<<<<<<<<<<<<
 *     global lastParsedQName
 *     cdef SAX2XMLReader * parser = createXMLReader()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6arelle_8arelle_c_17testsax2incremental, NULL, __pyx_n_s_arelle_arelle_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_testsax2incremental, __pyx_t_1) < 0) __PYX_ERR(6, 797, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle_c/xerces.pxi":827
 *     print("doneParsedToken {}".format(lastParsedQName))
 * 
 * def validate( txmyFile, instFile, schemaLocation ):             # <<<<<<<<<<<<<<
 *     cdef XMLGrammarPool* grammarPool = new XMLGrammarPoolImpl(fgMemoryManager)
 *     cdef SAX2XMLReader * parser = createXMLReader(fgMemoryManager, grammarPool)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6arelle_8arelle_c_19validate, NULL, __pyx_n_s_arelle_arelle_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_validate, __pyx_t_1) < 0) __PYX_ERR(6, 827, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "arelle_cython/arelle.arelle_c.pyx":1
 * # cython: c_string_type=unicode, c_string_encoding=utf-8             # <<<<<<<<<<<<<<
 * 
 * # Created on April 7, 2017
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test_2, __pyx_t_1) < 0) __PYX_ERR(8, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init arelle.arelle_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init arelle.arelle_c");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* KeywordStringCheck */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* BytesEquals */
    static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
    static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* SaveResetException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCallMethod2 */
      static PyObject* __Pyx_PyObject_CallMethod2(PyObject* obj, PyObject* method_name, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) return NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method)) && likely(PyMethod_GET_SELF(method))) {
        PyObject *self, *function;
        self = PyMethod_GET_SELF(method);
        function = PyMethod_GET_FUNCTION(method);
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(function)) {
            PyObject *args[3] = {self, arg1, arg2};
            result = __Pyx_PyFunction_FastCall(function, args, 3);
            goto done;
        }
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(function)) {
            PyObject *args[3] = {self, arg1, arg2};
            result = __Pyx_PyFunction_FastCall(function, args, 3);
            goto done;
        }
        #endif
        args = PyTuple_New(3);
        if (unlikely(!args)) goto done;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        Py_INCREF(function);
        Py_DECREF(method);
        method = function;
    } else
#endif
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(method)) {
        PyObject *args[2] = {arg1, arg2};
        result = __Pyx_PyFunction_FastCall(method, args, 2);
        goto done;
    } else
#endif
#if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(method)) {
        PyObject *args[2] = {arg1, arg2};
        result = __Pyx_PyCFunction_FastCall(method, args, 2);
        goto done;
    } else
#endif
    {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto done;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
    }
    result = __Pyx_PyObject_Call(method, args, NULL);
    Py_DECREF(args);
done:
    Py_DECREF(method);
    return result;
}

/* dict_setdefault */
      static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,
                                                       CYTHON_UNUSED int is_safe_type) {
    PyObject* value;
#if PY_VERSION_HEX >= 0x030400A0
    if (1) {
        value = PyDict_SetDefault(d, key, default_value);
        if (unlikely(!value)) return NULL;
        Py_INCREF(value);
#else
    if (is_safe_type == 1 || (is_safe_type == -1 &&
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
            (PyUnicode_CheckExact(key) || PyString_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItemWithError(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#else
            (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#endif
#endif
    } else {
        value = __Pyx_PyObject_CallMethod2(d, __pyx_n_s_setdefault, key, default_value);
    }
    return value;
}

/* dict_getitem_default */
          static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    } else {
        if (default_value == Py_None)
            default_value = NULL;
        value = PyObject_CallMethodObjArgs(
            d, __pyx_n_s_get, key, default_value, NULL);
    }
#endif
    return value;
}

/* ExtTypeTest */
          static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetItemInt */
          static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallMethod1 */
          static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* append */
          static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* StringJoin */
          #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* GetModuleGlobalName */
          static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* None */
            static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* SetVTable */
            static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* Import */
            static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
            static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CodeObjectCache */
            static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
            #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
            #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Print */
            #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_xercesc_3a__3a_XMLResourceIdentifier_3a__3a_ResourceIdentifierType(xercesc::XMLResourceIdentifier::ResourceIdentifierType value) {
    const xercesc::XMLResourceIdentifier::ResourceIdentifierType neg_one = (xercesc::XMLResourceIdentifier::ResourceIdentifierType) -1, const_zero = (xercesc::XMLResourceIdentifier::ResourceIdentifierType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(xercesc::XMLResourceIdentifier::ResourceIdentifierType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(xercesc::XMLResourceIdentifier::ResourceIdentifierType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(xercesc::XMLResourceIdentifier::ResourceIdentifierType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(xercesc::XMLResourceIdentifier::ResourceIdentifierType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(xercesc::XMLResourceIdentifier::ResourceIdentifierType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(xercesc::XMLResourceIdentifier::ResourceIdentifierType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
            static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
            static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
            static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* PrintOne */
            #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
            static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
            static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
            #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
            #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
            static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
