name: Run Xbrl Conformance Suites

on:
  workflow_dispatch:
  pull_request_target:
    paths:
      - '.github/workflows/conformance-suites.yml'
      - 'arelle/**'
      - 'tests/**'
      - '**.py'
      - '**.pyw'
      - 'requirements*.txt'

permissions: {}

jobs:
  find-tests:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.build-test-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          persist-credentials: false
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - id: build-test-matrix
        run: |
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          python -m tests.integration_tests.validation.discover_tests | tee -a $GITHUB_OUTPUT
          echo EOF >> $GITHUB_OUTPUT

  run-conformance-suite:
    name: ${{ matrix.test.name }}${{ matrix.test.shard && format(':{0}', matrix.test.shard) || '' }} - ${{ matrix.os }} - ${{ matrix.python-version }}
    needs: find-tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
        python-version:
          - '3.11'
        test: ${{ fromJson(needs.find-tests.outputs.matrix) }}
        include:
          - os: windows-2022
            python-version: '3.8'
            test:
              name: xbrl_2_1
          - os: macos-12
            python-version: '3.8'
            test:
              name: xbrl_2_1
          - os: ubuntu-22.04
            python-version: '3.8'
            test:
              name: xbrl_2_1

          - os: windows-2022
            python-version: '3.9'
            test:
              name: xbrl_2_1
          - os: macos-12
            python-version: '3.9'
            test:
              name: xbrl_2_1
          - os: ubuntu-22.04
            python-version: '3.9'
            test:
              name: xbrl_2_1

          - os: windows-2022
            python-version: '3.10'
            test:
              name: xbrl_2_1
          - os: macos-12
            python-version: '3.10'
            test:
              name: xbrl_2_1
          - os: ubuntu-22.04
            python-version: '3.10'
            test:
              name: xbrl_2_1

          - os: windows-2022
            python-version: '3.11'
            test:
              name: xbrl_2_1
          - os: macos-12
            python-version: '3.11'
            test:
              name: xbrl_2_1

    environment: integration-tests
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1
      - name: Download XBRL validation config
        shell: bash
        run: |
          if aws s3api head-object --bucket arelle --key caches/${{ matrix.test.name }}.zip; then
            aws s3api get-object --bucket arelle --key caches/${{ matrix.test.name }}.zip config.zip
          else
            curl -L "${{ secrets.XBRL_VALIDATION_CONFIG_URL }}" -o config.zip
          fi
      - name: Unpack XBRL validation config
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          mkdir -p "$XDG_CONFIG_HOME/arelle/cache"
          unzip -d "$XDG_CONFIG_HOME/arelle/cache" config.zip 'http/*' 'https/*'
          rm config.zip
      - name: Unpack XBRL validation config
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          mkdir -p ~/Library/Caches/Arelle
          unzip -d ~/Library/Caches/Arelle config.zip 'http/*' 'https/*'
          rm config.zip
      - name: Unpack XBRL validation config
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          mkdir -p $env:LOCALAPPDATA\Arelle\cache
          7z x config.zip -o"$env:LOCALAPPDATA\Arelle\cache" 'http/*' 'https/*'
          rm config.zip
      - uses: actions/checkout@v4.1.1
        with:
          persist-credentials: false
          ref: ${{ github.event.pull_request.head.sha }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Checkout EdgarRenderer
        if: ${{ matrix.test.name == 'efm_current' }}
        uses: actions/checkout@v4.1.1
        with:
          repository: Arelle/EdgarRenderer
          path: arelle/plugin/EdgarRenderer
      - name: Install Python 3
        uses: actions/setup-python@v4.7.1
        with:
          cache: 'pip'
          check-latest: true
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements-dev.txt
      - name: Download from S3
        run: aws s3 sync s3://arelle/conformance_suites tests/resources/conformance_suites
      - name: Run integration tests with pytest
        run: pytest -s --disable-warnings --offline --name=${{ matrix.test.name }}${{ matrix.test.shard && format(' --shard={0}', matrix.test.shard) || '' }} tests/integration_tests/validation/test_conformance_suites.py
