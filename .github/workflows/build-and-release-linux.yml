name: Build and Release Linux

on:
  workflow_dispatch:
    inputs:
      edgar_renderer_ref:
        description: 'Arelle/EdgarRenderer branch, tag or SHA to checkout (blank for default)'
        required: false
        type: string
      ixbrl_viewer_ref:
        description: 'Workiva/ixbrl-viewer branch, tag or SHA to checkout (blank for default)'
        required: false
        type: string
      openssl_version:
        default: '1.1.1s'
        description: 'OpenSSL version to use'
        required: true
        type: string
      node_version:
        default: '19'
        description: 'Node.js version to use'
        required: true
        type: string
      python_version:
        default: '3.11.2'
        description: 'Python version to use'
        required: true
        type: string
      xule_ref:
        description: 'xbrlus/xule branch, tag or SHA to checkout (blank for default)'
        required: false
        type: string

jobs:
  build-linux:
    environment: release
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        distro: [
          ubuntu
        ]

    steps:
      - name: Checkout arelle
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0
      - name: Checkout EdgarRenderer
        uses: actions/checkout@v3.3.0
        with:
          repository: Arelle/EdgarRenderer
          path: arelle/plugin/EdgarRenderer
          ref: ${{ inputs.edgar_renderer_ref }}
      - name: Cleanup EdgarRenderer
        run: rm -rf arelle/plugin/EdgarRenderer/.git
      - name: Checkout XULE
        uses: actions/checkout@v3.3.0
        with:
          repository: xbrlus/xule
          path: xule
          ref: ${{ inputs.xule_ref }}
      - name: Move XULE plugins
        run: |
          mv xule/plugin/validate/* arelle/plugin/validate/
          rm -rf xule/plugin/validate
          mv xule/plugin/* arelle/plugin/
      - name: Cleanup XULE
        run: rm -rf xule
      - name: Checkout ixbrl-viewer
        uses: actions/checkout@v3.3.0
        with:
          repository: Workiva/ixbrl-viewer
          path: ixbrl-viewer
          ref: ${{ inputs.ixbrl_viewer_ref }}
      - name: Set up Node JS
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ inputs.node_version }}
      - name: Build ixbrl-viewer
        working-directory: ixbrl-viewer
        run: |
          npm install
          make prod
      - name: Move ixbrl-viewer plugin
        run: mv ixbrl-viewer/iXBRLViewerPlugin arelle/plugin/
      - name: Cleanup ixbrl-viewer
        run: rm -rf ixbrl-viewer
      - name: Docker setup buildx
        uses: docker/setup-buildx-action@v2.4.0
      - name: Docker build
        uses: docker/build-push-action@v3.3.0
        with:
          build-args: |
            "OPENSSL_VERSION=${{ inputs.openssl_version }}"
            "PYTHON_VERSION=${{ inputs.python_version }}"
          context: .
          file: docker/${{ matrix.distro }}.Dockerfile
          load: true
          tags: arelle:arelle
      - name: Docker copy build artifact
        run: |
          docker create --name arelle arelle:arelle
          docker cp arelle:/build/dist/ dist/
          docker rm -v arelle
      - name: Capture build env
        run: |
          [[ $(echo dist/*.tgz) =~ -([0-9]+\.[0-9]+\.[0-9]+)\.tgz$ ]] && echo "ARTIFACT_VERSIONED_NAME=arelle-${{ matrix.distro }}-${BASH_REMATCH[1]}.tgz" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=arelle-${{ matrix.distro }}.tgz" >> $GITHUB_ENV
          echo "BUILD_ARTIFACT_PATH=$(echo dist/*.tgz)" >> $GITHUB_ENV
      - name: Upload build artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ matrix.distro }} distribution
          if-no-files-found: error
          path: ${{ env.BUILD_ARTIFACT_PATH }}
      - name: Upload release artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v0.1.15
        with:
          fail_on_unmatched_files: true
          files: ${{ env.BUILD_ARTIFACT_PATH }}
      - name: Configure AWS Credentials
        if: startsWith(github.ref, 'refs/tags/')
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: us-west-1
      - name: Upload release artifacts to S3
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          aws s3 cp --acl public-read ${{ env.BUILD_ARTIFACT_PATH }} s3://arelle-us/${{ env.ARTIFACT_VERSIONED_NAME }}
          aws s3 cp --acl public-read s3://arelle-us/${{ env.ARTIFACT_VERSIONED_NAME }} s3://arelle-us/${{ env.ARTIFACT_NAME }}
      - name: Configure Ali Cloud Credentials
        if: startsWith(github.ref, 'refs/tags/')
        uses: yizhoumo/setup-ossutil@v1.1.3
        with:
          endpoint: oss-cn-shenzhen.aliyuncs.com
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
      - name: Upload release artifacts to Ali Cloud
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          ossutil cp -f ${{ env.BUILD_ARTIFACT_PATH }} oss://arelle-cn/${{ env.ARTIFACT_VERSIONED_NAME }}
          ossutil create-symlink oss://arelle-cn/${{ env.ARTIFACT_NAME }} oss://arelle-cn/${{ env.ARTIFACT_VERSIONED_NAME }}
