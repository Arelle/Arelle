#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class XFBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re='(?s)\\(:((?!(\\(:|:\\))).)*:\\)',
        eol_comments_re=None,
        ignorecase=None,
        namechars='-',
        **kwargs
    ):
        super(XFBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class XFParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re='(?s)\\(:((?!(\\(:|:\\))).)*:\\)',
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='-',
        buffer_class=XFBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(XFParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _module_(self):  # noqa

        def block0():
            self._namespace_declaration_()
        self._closure(block0)

        def block1():
            self._default_()
        self._closure(block1)

        def block2():
            self._parameter_()
        self._closure(block2)

        def block3():
            with self._choice():
                with self._option():
                    self._filter_declaration_()
                with self._option():
                    self._fact_variable_()
                with self._option():
                    self._general_variable_()
                with self._option():
                    self._function_declaration_()
                self._error('no available options')
        self._closure(block3)

        def block5():
            self._assertion_()
        self._closure(block5)
        self._check_eof()

    @tatsumasu()
    def _separator_(self):  # noqa
        self._token(';')

    @tatsumasu()
    def _namespace_declaration_(self):  # noqa
        self._token('namespace')
        self._name_()
        self._token('=')
        self._quoted_url_()
        self._separator_()

    @tatsumasu()
    def _default_(self):  # noqa
        with self._choice():
            with self._option():
                self._severity_()
            with self._option():
                self._token('default-language')
                self._language_()
                self._separator_()
            self._error('no available options')

    @tatsumasu()
    def _severity_(self):  # noqa
        self._token('unsatisfied-severity')
        self._message_severity_()
        self._separator_()

    @tatsumasu()
    def _message_severity_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('ERROR')
            with self._option():
                self._token('WARNING')
            with self._option():
                self._token('INFO')
            self._error('no available options')

    @tatsumasu()
    def _parameter_(self):  # noqa
        self._token('parameter')
        self._name_()
        with self._optional():
            self._token('required')
        self._token('{')
        with self._optional():
            self._token('select')
            self._enclosed_expression_()
        with self._optional():
            self._token('as')
            self._qname_()
        self._token('}')
        self._separator_()

    @tatsumasu()
    def _filter_declaration_(self):  # noqa
        self._token('filter')
        self._name_()
        self._token('{')

        def block0():
            self._filter_()
        self._positive_closure(block0)
        self._token('}')
        self._separator_()

    @tatsumasu()
    def _filter_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._concept_filter_()
                with self._option():
                    self._general_filter_()
                with self._option():
                    self._period_filter_()
                with self._option():
                    self._dimension_filter_()
                with self._option():
                    self._unit_filter_()
                with self._option():
                    self._entity_filter_()
                with self._option():
                    self._match_filter_()
                with self._option():
                    self._relative_filter_()
                with self._option():
                    self._tuple_filter_()
                with self._option():
                    self._value_filter_()
                with self._option():
                    self._boolean_filter_()
                with self._option():
                    self._aspect_cover_filter_()
                with self._option():
                    self._concept_relation_filter_()
                with self._option():
                    self._declared_filter_reference_()
                self._error('no available options')

    @tatsumasu()
    def _concept_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('covering')
                with self._option():
                    self._constant('covering')
                with self._option():
                    self._token('non-covering')
                self._error('no available options')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('concept-name')
                    self._cut()

                    def block1():
                        with self._choice():
                            with self._option():
                                self._qname_()
                            with self._option():
                                self._localname_()
                            with self._option():
                                self._enclosed_expression_()
                            self._error('no available options')
                    self._positive_closure(block1)
                with self._option():
                    self._token('concept-period-type')
                    self._cut()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._token('instant')
                            with self._option():
                                self._token('duration')
                            self._error('no available options')
                with self._option():
                    self._token('concept-balance')
                    self._cut()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._token('credit')
                            with self._option():
                                self._token('debit')
                            with self._option():
                                self._token('none')
                            self._error('no available options')
                with self._option():
                    self._token('concept-data-type')
                    self._cut()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._token('strict')
                            with self._option():
                                self._token('non-strict')
                            self._error('no available options')
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._qname_()
                            with self._option():
                                self._enclosed_expression_()
                            self._error('no available options')
                with self._option():
                    self._token('concept-substitution-group')
                    self._cut()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._token('strict')
                            with self._option():
                                self._token('non-strict')
                            self._error('no available options')
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._qname_()
                            with self._option():
                                self._enclosed_expression_()
                            self._error('no available options')
                self._error('no available options')
        self._separator_()

    @tatsumasu()
    def _general_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        self._token('general')
        self._cut()
        self._enclosed_expression_()
        self._separator_()

    @tatsumasu()
    def _period_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('period-start')
                    self._cut()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._date_constant_()
                            with self._option():
                                self._date_time_constant_()
                            with self._option():
                                with self._group():
                                    self._token('date')
                                    self._enclosed_expression_()
                                    with self._optional():
                                        self._token('time')
                                        self._enclosed_expression_()
                            self._error('no available options')
                with self._option():
                    self._token('period-end')
                    self._cut()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._date_constant_()
                            with self._option():
                                self._date_time_constant_()
                            with self._option():
                                with self._group():
                                    self._token('date')
                                    self._enclosed_expression_()
                                    with self._optional():
                                        self._token('time')
                                        self._enclosed_expression_()
                            self._error('no available options')
                with self._option():
                    self._token('period-instant')
                    self._cut()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._date_constant_()
                            with self._option():
                                self._date_time_constant_()
                            with self._option():
                                with self._group():
                                    self._token('date')
                                    self._enclosed_expression_()
                                    with self._optional():
                                        self._token('time')
                                        self._enclosed_expression_()
                            self._error('no available options')
                with self._option():
                    self._token('period')
                    self._cut()
                    self._enclosed_expression_()
                with self._option():
                    self._token('instant-duration')
                    self._cut()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._token('start')
                            with self._option():
                                self._token('end')
                            self._error('no available options')
                    self._variable_ref_()
                self._error('no available options')
        self._separator_()

    @tatsumasu()
    def _dimension_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('explicit-dimension')
                        self._cut()
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._variable_ref_()
                                with self._option():
                                    self._qname_()
                                with self._option():
                                    self._localname_()
                                with self._option():
                                    self._enclosed_expression_()
                                self._error('no available options')

                        def block1():
                            with self._choice():
                                with self._option():
                                    self._token('default-member')
                                with self._option():
                                    self._token('member')
                                    self._cut()
                                    with self._group():
                                        with self._choice():
                                            with self._option():
                                                self._variable_ref_()
                                            with self._option():
                                                self._qname_()
                                            with self._option():
                                                self._localname_()
                                            with self._option():
                                                self._enclosed_expression_()
                                            self._error('no available options')
                                    with self._optional():
                                        self._token('linkrole')
                                        self._quoted_anyURI_()
                                        self._token('arcrole')
                                        self._quoted_anyURI_()
                                        self._token('axis')
                                        self._dimension_axis_()
                                self._error('no available options')
                        self._closure(block1)
                with self._option():
                    with self._group():
                        self._token('typed-dimension')
                        self._cut()
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._variable_ref_()
                                with self._option():
                                    self._qname_()
                                with self._option():
                                    self._localname_()
                                with self._option():
                                    self._enclosed_expression_()
                                self._error('no available options')
                        with self._optional():
                            self._token('test')
                            self._enclosed_expression_()
                self._error('no available options')
        self._separator_()

    @tatsumasu()
    def _dimension_axis_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('child')
            with self._option():
                self._token('child-or-self')
            with self._option():
                self._token('descendant')
            with self._option():
                self._token('descendant-or-self')
            self._error('no available options')

    @tatsumasu()
    def _unit_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('unit-single-measure')
                    self._cut()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._qname_()
                            with self._option():
                                self._enclosed_expression_()
                            self._error('no available options')
                with self._option():
                    self._token('unit-general-measures')
                    self._cut()
                    self._enclosed_expression_()
                self._error('no available options')
        self._separator_()

    @tatsumasu()
    def _entity_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('entity-scheme-pattern')
                    self._cut()
                    self._regexp_pattern_()
                with self._option():
                    self._token('entity-scheme')
                    self._cut()
                    self._enclosed_expression_()
                with self._option():
                    self._token('entity-identifier-pattern')
                    self._cut()
                    self._regexp_pattern_()
                with self._option():
                    self._token('entity-identifier')
                    self._cut()
                    self._enclosed_expression_()
                with self._option():
                    self._token('entity')
                    self._cut()
                    self._token('scheme')
                    self._enclosed_expression_()
                    self._token('value')
                    self._enclosed_expression_()
                self._error('no available options')
        self._separator_()

    @tatsumasu()
    def _match_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('match-concept')
                    self._cut()
                    self._variable_ref_()
                with self._option():
                    self._token('match-location')
                    self._cut()
                    self._variable_ref_()
                with self._option():
                    self._token('match-entity-identifier')
                    self._cut()
                    self._variable_ref_()
                with self._option():
                    self._token('match-period')
                    self._cut()
                    self._variable_ref_()
                with self._option():
                    self._token('match-unit')
                    self._cut()
                    self._variable_ref_()
                with self._option():
                    self._token('match-dimension')
                    self._cut()
                    self._variable_ref_()
                    self._token('dimension')
                    self._qname_()
                self._error('no available options')
        with self._optional():
            self._token('match-any')
        self._separator_()

    @tatsumasu()
    def _relative_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        self._token('relative')
        self._cut()
        self._variable_ref_()
        self._separator_()

    @tatsumasu()
    def _tuple_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('parent')
                    self._cut()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._qname_()
                            with self._option():
                                self._enclosed_expression_()
                            self._error('no available options')
                with self._option():
                    self._token('ancestor')
                    self._cut()
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._qname_()
                            with self._option():
                                self._enclosed_expression_()
                            self._error('no available options')
                with self._option():
                    self._token('sibling')
                    self._cut()
                    self._variable_ref_()
                self._error('no available options')
        self._separator_()

    @tatsumasu()
    def _value_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        self._token('nilled')
        self._separator_()

    @tatsumasu()
    def _boolean_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('and')
                with self._option():
                    self._token('or')
                self._error('no available options')
        self._cut()
        self._token('{')

        def block1():
            self._filter_()
        self._positive_closure(block1)
        self._token('}')
        self._separator_()

    @tatsumasu()
    def _aspect_cover_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        self._token('aspect-cover')
        self._cut()

        def block0():
            with self._choice():
                with self._option():
                    self._token('all')
                with self._option():
                    self._token('concept')
                with self._option():
                    self._token('entity-identifier')
                with self._option():
                    self._token('location')
                with self._option():
                    self._token('period')
                with self._option():
                    self._token('unit')
                with self._option():
                    self._token('dimensions')
                with self._option():
                    self._token('dimension')
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._qname_()
                            with self._option():
                                self._localname_()
                            with self._option():
                                self._enclosed_expression_()
                            self._error('no available options')
                with self._option():
                    self._token('exclude-dimension')
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._qname_()
                            with self._option():
                                self._localname_()
                            with self._option():
                                self._enclosed_expression_()
                            self._error('no available options')
                self._error('no available options')
        self._positive_closure(block0)
        self._separator_()

    @tatsumasu()
    def _concept_relation_filter_(self):  # noqa
        with self._optional():
            self._token('complemented')
        self._token('concept-relation')
        self._cut()
        with self._group():
            with self._choice():
                with self._option():
                    self._variable_ref_()
                with self._option():
                    self._qname_()
                with self._option():
                    self._localname_()
                with self._option():
                    self._enclosed_expression_()
                self._error('no available options')
        with self._optional():
            self._token('linkrole')
            with self._group():
                with self._choice():
                    with self._option():
                        self._quoted_anyURI_()
                    with self._option():
                        self._enclosed_expression_()
                    self._error('no available options')
        with self._optional():
            self._token('arcrole')
            with self._group():
                with self._choice():
                    with self._option():
                        self._quoted_anyURI_()
                    with self._option():
                        self._enclosed_expression_()
                    self._error('no available options')
        with self._optional():
            self._token('axis')
            self._relation_axis_()
        with self._optional():
            self._token('generations')
            self._non_negative_integer_()
        with self._optional():
            self._token('test')
            self._enclosed_expression_()
        self._separator_()

    @tatsumasu()
    def _relation_axis_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('child-or-self')
                with self._option():
                    self._token('child')
                with self._option():
                    self._token('descendant-or-self')
                with self._option():
                    self._token('descendant')
                with self._option():
                    self._token('parent-or-self')
                with self._option():
                    self._token('parent')
                with self._option():
                    self._token('ancestor-or-self')
                with self._option():
                    self._token('ancestor')
                with self._option():
                    self._token('sibling-or-self')
                with self._option():
                    self._token('sibling-or-descendant')
                with self._option():
                    self._token('sibling')
                self._error('no available options')
        self._separator_()

    @tatsumasu()
    def _declared_filter_reference_(self):  # noqa
        self._token('filter')
        self._cut()
        self._variable_ref_()
        self._separator_()

    @tatsumasu()
    def _fact_variable_(self):  # noqa
        self._token('variable')
        self._cut()
        self._variable_ref_()
        self._token('{')
        with self._optional():
            self._token('bind-as-sequence')
        with self._optional():
            self._token('nils')
        with self._optional():
            self._token('matches')
        with self._optional():
            self._token('fallback')
            self._enclosed_expression_()

        def block0():
            self._filter_()
        self._closure(block0)
        self._token('}')
        self._separator_()

    @tatsumasu()
    def _general_variable_(self):  # noqa
        self._token('variable')
        self._cut()
        self._variable_ref_()
        self._token('{')
        with self._optional():
            self._token('bind-as-sequence')
        self._token('select')
        self._enclosed_expression_()
        self._token('}')
        self._separator_()

    @tatsumasu()
    def _function_declaration_(self):  # noqa
        self._token('function')
        self._cut()
        self._qname_()
        self._token('(')

        def block0():
            self._NCNAME_FRAG_()
            self._token('as')
            self._qname_()
        self._closure(block0)
        self._token(')')
        self._token('as')
        self._qname_()
        with self._optional():
            self._token('{')
            self._token('return')
            self._enclosed_expression_()
            self._separator_()
            self._token('}')
        self._separator_()

    @tatsumasu()
    def _assertion_(self):  # noqa
        self._token('assertion')
        self._name_()
        self._token('{')

        def block0():
            with self._choice():
                with self._option():
                    self._label_()
                with self._option():
                    self._message_()
                with self._option():
                    self._severity_()
                with self._option():
                    self._token('aspect-model-non-dimensional')
                    self._separator_()
                with self._option():
                    self._token('no-implicit-filtering')
                    self._separator_()
                self._error('no available options')
        self._closure(block0)

        def block2():
            self._filter_()
        self._closure(block2)

        def block3():
            with self._choice():
                with self._option():
                    self._fact_variable_()
                with self._option():
                    self._general_variable_()
                with self._option():
                    self._referenced_parameter_()
                self._error('no available options')
        self._closure(block3)

        def block5():
            self._precondition_()
        self._closure(block5)
        with self._group():
            with self._choice():
                with self._option():
                    self._value_expression_()
                with self._option():
                    self._existence_expression_()
                self._error('no available options')
        self._token('}')
        self._separator_()

    @tatsumasu()
    def _label_(self):  # noqa
        self._token('label')
        with self._optional():
            self._token('(')
            self._language_()
            self._token(')')
        self._quoted_string_()
        self._separator_()

    @tatsumasu()
    def _message_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('satisfied-message')
                with self._option():
                    self._token('unsatisfied-message')
                self._error('no available options')
        self._cut()
        with self._optional():
            self._token('(')
            self._cut()
            self._language_()
            self._token(')')
        self._quoted_string_()
        self._separator_()

    @tatsumasu()
    def _referenced_parameter_(self):  # noqa
        self._token('parameter')
        self._cut()
        self._variable_ref_()
        self._token('references')
        self._qname_()
        self._separator_()

    @tatsumasu()
    def _precondition_(self):  # noqa
        self._token('precondition')
        self._enclosed_expression_()

    @tatsumasu()
    def _value_expression_(self):  # noqa
        self._token('test')
        self._enclosed_expression_()
        self._separator_()

    @tatsumasu()
    def _existence_expression_(self):  # noqa
        self._token('evaluation-count')
        self._enclosed_expression_()
        self._separator_()

    @tatsumasu()
    def _enclosed_expression_(self):  # noqa
        self._token('{')
        self._xPath_()
        self._token('}')

    @tatsumasu()
    def _name_(self):  # noqa
        self._NCNAME_FRAG_()

    @tatsumasu()
    def _language_(self):  # noqa
        self._pattern(r'[A-Za-z]{2}(-[A-Za-z]{2})?')

    @tatsumasu()
    def _quoted_anyURI_(self):  # noqa
        self._quoted_url_()

    @tatsumasu()
    def _quoted_url_(self):  # noqa
        self._quoted_string_()

    @tatsumasu()
    def _localname_(self):  # noqa
        self._name_()

    @tatsumasu()
    def _variable_ref_(self):  # noqa
        self._token('$')
        self._variable_name_()

    @tatsumasu()
    def _variable_name_(self):  # noqa
        self._name_()

    @tatsumasu()
    def _non_negative_integer_(self):  # noqa
        self._pattern(r'[0-9]+')

    @tatsumasu()
    def _date_time_constant_(self):  # noqa
        self._pattern(r'\b(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?\b')

    @tatsumasu()
    def _date_constant_(self):  # noqa
        self._pattern(r'\b(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])\b')

    @tatsumasu()
    def _quoted_string_(self):  # noqa
        self._pattern(r'("([^\\"]|\\.)*"|\'([^\\\']|\\.)*\')')

    @tatsumasu()
    def _regexp_pattern_(self):  # noqa
        self._pattern(r'\/([^\\\/]|\\.)*\/')

    @tatsumasu()
    def _xPath_(self):  # noqa
        self._expr_()

    @tatsumasu()
    def _expr_(self):  # noqa
        self._exprSingle_()

        def block0():
            self._token(',')
            self._exprSingle_()
        self._closure(block0)

    @tatsumasu()
    def _exprSingle_(self):  # noqa
        with self._choice():
            with self._option():
                self._forExpr_()
            with self._option():
                self._quantifiedExpr_()
            with self._option():
                self._ifExpr_()
            with self._option():
                self._orExpr_()
            self._error('no available options')

    @tatsumasu()
    def _forExpr_(self):  # noqa
        self._simpleForClause_()
        self._token('return')
        self._exprSingle_()

    @tatsumasu()
    def _simpleForClause_(self):  # noqa
        self._token('for')
        self._token('$')
        self._varName_()
        self._token('in')
        self._exprSingle_()

        def block0():
            self._token(',')
            self._token('$')
            self._varName_()
            self._token('in')
            self._exprSingle_()
        self._closure(block0)

    @tatsumasu()
    def _quantifiedExpr_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('some')
                with self._option():
                    self._token('every')
                self._error('no available options')
        self._token('$')
        self._varName_()
        self._token('in')
        self._exprSingle_()

        def block1():
            self._token(',')
            self._token('$')
            self._varName_()
            self._token('in')
            self._exprSingle_()
        self._closure(block1)
        self._token('satisfies')
        self._exprSingle_()

    @tatsumasu()
    def _ifExpr_(self):  # noqa
        self._token('if')
        self._token('(')
        self._expr_()
        self._token(')')
        self._token('then')
        self._exprSingle_()
        self._token('else')
        self._exprSingle_()

    @tatsumasu()
    def _orExpr_(self):  # noqa
        self._andExpr_()

        def block0():
            self._token('or')
            self._andExpr_()
        self._closure(block0)

    @tatsumasu()
    def _andExpr_(self):  # noqa
        self._comparisonExpr_()

        def block0():
            self._token('and')
            self._comparisonExpr_()
        self._closure(block0)

    @tatsumasu()
    def _comparisonExpr_(self):  # noqa
        self._rangeExpr_()
        with self._optional():
            with self._group():
                with self._choice():
                    with self._option():
                        self._valueComp_()
                    with self._option():
                        self._nodeComp_()
                    with self._option():
                        self._generalComp_()
                    self._error('no available options')
            self._rangeExpr_()

    @tatsumasu()
    def _rangeExpr_(self):  # noqa
        self._additiveExpr_()
        with self._optional():
            self._token('to')
            self._additiveExpr_()

    @tatsumasu()
    def _additiveExpr_(self):  # noqa
        self._multiplicativeExpr_()

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    self._error('no available options')
            self._multiplicativeExpr_()
        self._closure(block0)

    @tatsumasu()
    def _multiplicativeExpr_(self):  # noqa
        self._unionExpr_()

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('*')
                    with self._option():
                        self._token('div')
                    with self._option():
                        self._token('idiv')
                    with self._option():
                        self._token('mod')
                    self._error('no available options')
            self._unionExpr_()
        self._closure(block0)

    @tatsumasu()
    def _unionExpr_(self):  # noqa
        self._intersectExceptExpr_()

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('union')
                    with self._option():
                        self._token('|')
                    self._error('no available options')
            self._intersectExceptExpr_()
        self._closure(block0)

    @tatsumasu()
    def _intersectExceptExpr_(self):  # noqa
        self._instanceofExpr_()

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('intersect')
                    with self._option():
                        self._token('except')
                    self._error('no available options')
            self._instanceofExpr_()
        self._closure(block0)

    @tatsumasu()
    def _instanceofExpr_(self):  # noqa
        self._treatExpr_()
        with self._optional():
            self._token('instance')
            self._token('of')
            self._sequenceType_()

    @tatsumasu()
    def _treatExpr_(self):  # noqa
        self._castableExpr_()
        with self._optional():
            self._token('treat')
            self._token('as')
            self._sequenceType_()

    @tatsumasu()
    def _castableExpr_(self):  # noqa
        self._castExpr_()
        with self._optional():
            self._token('castable')
            self._token('as')
            self._singleType_()

    @tatsumasu()
    def _castExpr_(self):  # noqa
        self._unaryExpr_()
        with self._optional():
            self._token('cast')
            self._token('as')
            self._singleType_()

    @tatsumasu()
    def _unaryExpr_(self):  # noqa

        def block0():
            with self._choice():
                with self._option():
                    self._token('-')
                with self._option():
                    self._token('+')
                self._error('no available options')
        self._closure(block0)
        self._valueExpr_()

    @tatsumasu()
    def _valueExpr_(self):  # noqa
        self._pathExpr_()

    @tatsumasu()
    def _generalComp_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('=')
            with self._option():
                self._token('!=')
            with self._option():
                self._token('<=')
            with self._option():
                self._token('<')
            with self._option():
                self._token('>=')
            with self._option():
                self._token('>')
            self._error('no available options')

    @tatsumasu()
    def _valueComp_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('eq')
            with self._option():
                self._token('ne')
            with self._option():
                self._token('lt')
            with self._option():
                self._token('le')
            with self._option():
                self._token('gt')
            with self._option():
                self._token('ge')
            self._error('no available options')

    @tatsumasu()
    def _nodeComp_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('is')
            with self._option():
                self._token('<<')
            with self._option():
                self._token('>>')
            self._error('no available options')

    @tatsumasu()
    def _pathExpr_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._token('//')
                    self._relativePathExpr_()
            with self._option():
                with self._group():
                    self._token('/')
                    with self._optional():
                        self._relativePathExpr_()
            with self._option():
                self._relativePathExpr_()
            self._error('no available options')

    @tatsumasu()
    def _relativePathExpr_(self):  # noqa
        self._stepExpr_()

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('/')
                    with self._option():
                        self._token('//')
                    self._error('no available options')
            self._stepExpr_()
        self._closure(block0)

    @tatsumasu()
    def _stepExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._filterExpr_()
            with self._option():
                self._axisStep_()
            self._error('no available options')

    @tatsumasu()
    def _axisStep_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._reverseStep_()
                with self._option():
                    self._forwardStep_()
                self._error('no available options')
        self._predicateList_()

    @tatsumasu()
    def _forwardStep_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._forwardAxis_()
                    self._nodeTest_()
            with self._option():
                self._abbrevForwardStep_()
            self._error('no available options')

    @tatsumasu()
    def _forwardAxis_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._token('child')
                    self._token('::')
            with self._option():
                with self._group():
                    self._token('descendant')
                    self._token('::')
            with self._option():
                with self._group():
                    self._token('attribute')
                    self._token('::')
            with self._option():
                with self._group():
                    self._token('self')
                    self._token('::')
            with self._option():
                with self._group():
                    self._token('descendant-or-self')
                    self._token('::')
            with self._option():
                with self._group():
                    self._token('following-sibling')
                    self._token('::')
            with self._option():
                with self._group():
                    self._token('following')
                    self._token('::')
            with self._option():
                with self._group():
                    self._token('namespace')
                    self._token('::')
            self._error('no available options')

    @tatsumasu()
    def _abbrevForwardStep_(self):  # noqa
        with self._optional():
            self._token('@')
        self._nodeTest_()

    @tatsumasu()
    def _reverseStep_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._reverseAxis_()
                    self._nodeTest_()
            with self._option():
                self._abbrevReverseStep_()
            self._error('no available options')

    @tatsumasu()
    def _reverseAxis_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._token('parent')
                    self._token('::')
            with self._option():
                with self._group():
                    self._token('ancestor')
                    self._token('::')
            with self._option():
                with self._group():
                    self._token('preceding-sibling')
                    self._token('::')
            with self._option():
                with self._group():
                    self._token('preceding')
                    self._token('::')
            with self._option():
                with self._group():
                    self._token('ancestor-or-self')
                    self._token('::')
            self._error('no available options')

    @tatsumasu()
    def _abbrevReverseStep_(self):  # noqa
        self._token('..')

    @tatsumasu()
    def _nodeTest_(self):  # noqa
        with self._choice():
            with self._option():
                self._kindTest_()
            with self._option():
                self._nameTest_()
            self._error('no available options')

    @tatsumasu()
    def _nameTest_(self):  # noqa
        with self._choice():
            with self._option():
                self._qname_()
            with self._option():
                self._wildcard_()
            self._error('no available options')

    @tatsumasu()
    def _wildcard_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('*')
            with self._option():
                with self._group():
                    self._ncname_()
                    self._token(':')
                    self._token('*')
            with self._option():
                with self._group():
                    self._token('*')
                    self._token(':')
                    self._ncname_()
            self._error('no available options')

    @tatsumasu()
    def _filterExpr_(self):  # noqa
        self._primaryExpr_()
        self._predicateList_()

    @tatsumasu()
    def _predicateList_(self):  # noqa

        def block0():
            self._predicate_()
        self._closure(block0)

    @tatsumasu()
    def _predicate_(self):  # noqa
        self._token('[')
        self._expr_()
        self._token(']')

    @tatsumasu()
    def _primaryExpr_(self):  # noqa
        with self._choice():
            with self._option():
                self._literal_()
            with self._option():
                self._varRef_()
            with self._option():
                self._parenthesizedExpr_()
            with self._option():
                self._contextItemExpr_()
            with self._option():
                self._functionCall_()
            self._error('no available options')

    @tatsumasu()
    def _literal_(self):  # noqa
        with self._choice():
            with self._option():
                self._numericLiteral_()
            with self._option():
                self._stringLiteral_()
            self._error('no available options')

    @tatsumasu()
    def _numericLiteral_(self):  # noqa
        with self._choice():
            with self._option():
                self._integerLiteral_()
            with self._option():
                self._decimalLiteral_()
            with self._option():
                self._doubleLiteral_()
            self._error('no available options')

    @tatsumasu()
    def _varRef_(self):  # noqa
        self._token('$')
        self._varName_()

    @tatsumasu()
    def _varName_(self):  # noqa
        self._qname_()

    @tatsumasu()
    def _parenthesizedExpr_(self):  # noqa
        self._token('(')
        with self._optional():
            self._expr_()
        self._token(')')

    @tatsumasu()
    def _contextItemExpr_(self):  # noqa
        self._token('.')

    @tatsumasu()
    def _functionCall_(self):  # noqa
        self._qname_()
        self._token('(')
        with self._optional():
            self._exprSingle_()

            def block0():
                self._token(',')
                self._exprSingle_()
            self._closure(block0)
        self._token(')')

    @tatsumasu()
    def _singleType_(self):  # noqa
        self._atomicType_()
        with self._optional():
            self._token('?')

    @tatsumasu()
    def _sequenceType_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._token('empty-sequence')
                    self._token('(')
                    self._token(')')
            with self._option():
                with self._group():
                    self._itemType_()
                    with self._optional():
                        self._occurrenceIndicator_()
            self._error('no available options')

    @tatsumasu()
    def _occurrenceIndicator_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('?')
            with self._option():
                self._token('*')
            with self._option():
                self._token('+')
            self._error('no available options')

    @tatsumasu()
    def _itemType_(self):  # noqa
        with self._choice():
            with self._option():
                self._kindTest_()
            with self._option():
                with self._group():
                    self._token('item')
                    self._token('(')
                    self._token(')')
            with self._option():
                self._atomicType_()
            self._error('no available options')

    @tatsumasu()
    def _atomicType_(self):  # noqa
        self._qname_()

    @tatsumasu()
    def _kindTest_(self):  # noqa
        with self._choice():
            with self._option():
                self._documentTest_()
            with self._option():
                self._elementTest_()
            with self._option():
                self._attributeTest_()
            with self._option():
                self._schemaElementTest_()
            with self._option():
                self._schemaAttributeTest_()
            with self._option():
                self._pITest_()
            with self._option():
                self._commentTest_()
            with self._option():
                self._textTest_()
            with self._option():
                self._anyKindTest_()
            self._error('no available options')

    @tatsumasu()
    def _anyKindTest_(self):  # noqa
        self._token('node')
        self._token('(')
        self._token(')')

    @tatsumasu()
    def _documentTest_(self):  # noqa
        self._token('document-node')
        self._token('(')
        with self._optional():
            with self._choice():
                with self._option():
                    self._elementTest_()
                with self._option():
                    self._schemaElementTest_()
                self._error('no available options')
        self._token(')')

    @tatsumasu()
    def _textTest_(self):  # noqa
        self._token('text')
        self._token('(')
        self._token(')')

    @tatsumasu()
    def _commentTest_(self):  # noqa
        self._token('comment')
        self._token('(')
        self._token(')')

    @tatsumasu()
    def _pITest_(self):  # noqa
        self._token('processing-instruction')
        self._token('(')
        with self._optional():
            with self._choice():
                with self._option():
                    self._ncname_()
                with self._option():
                    self._stringLiteral_()
                self._error('no available options')
        self._token(')')

    @tatsumasu()
    def _attributeTest_(self):  # noqa
        self._token('attribute')
        self._token('(')
        with self._optional():
            self._attribNameOrWildcard_()
            with self._optional():
                self._token(',')
                self._typeName_()
        self._token(')')

    @tatsumasu()
    def _attribNameOrWildcard_(self):  # noqa
        with self._choice():
            with self._option():
                self._attributeName_()
            with self._option():
                self._token('*')
            self._error('no available options')

    @tatsumasu()
    def _schemaAttributeTest_(self):  # noqa
        self._token('schema-attribute')
        self._token('(')
        self._attributeDeclaration_()
        self._token(')')

    @tatsumasu()
    def _attributeDeclaration_(self):  # noqa
        self._attributeName_()

    @tatsumasu()
    def _elementTest_(self):  # noqa
        self._token('element')
        self._token('(')
        with self._optional():
            self._elementNameOrWildcard_()
            with self._optional():
                self._token(',')
                self._typeName_()
                with self._optional():
                    self._token('?')
        self._token(')')

    @tatsumasu()
    def _elementNameOrWildcard_(self):  # noqa
        with self._choice():
            with self._option():
                self._elementName_()
            with self._option():
                self._token('*')
            self._error('no available options')

    @tatsumasu()
    def _schemaElementTest_(self):  # noqa
        self._token('schema-element')
        self._token('(')
        self._elementDeclaration_()
        self._token(')')

    @tatsumasu()
    def _elementDeclaration_(self):  # noqa
        self._elementName_()

    @tatsumasu()
    def _attributeName_(self):  # noqa
        self._qname_()

    @tatsumasu()
    def _elementName_(self):  # noqa
        self._qname_()

    @tatsumasu()
    def _typeName_(self):  # noqa
        self._qname_()

    @tatsumasu()
    def _integerLiteral_(self):  # noqa
        self._DIGITS_()

    @tatsumasu()
    def _decimalLiteral_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._token('.')
                    self._DIGITS_()
            with self._option():
                with self._group():
                    self._DIGITS_()
                    self._pattern(r'\.[0-9]*')
            self._error('no available options')

    @tatsumasu()
    def _doubleLiteral_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        self._token('.')
                        self._DIGITS_()
                with self._option():
                    with self._group():
                        self._DIGITS_()
                        self._pattern(r'(\.[0-9]*)?')
                self._error('no available options')
        self._pattern(r'[eE][+-]?')
        self._DIGITS_()

    @tatsumasu()
    def _stringLiteral_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._pattern(r'"')

                    def block0():
                        with self._choice():
                            with self._option():
                                self._ESCAPEQUOT_()
                            with self._option():
                                self._pattern(r'[^"]')
                            self._error('no available options')
                    self._closure(block0)
                    self._pattern(r'"')
            with self._option():
                with self._group():
                    self._pattern(r"'")

                    def block2():
                        with self._choice():
                            with self._option():
                                self._ESCAPEAPOS_()
                            with self._option():
                                self._pattern(r"[^']")
                            self._error('no available options')
                    self._closure(block2)
                    self._pattern(r"'")
            self._error('no available options')

    @tatsumasu()
    def _ESCAPEQUOT_(self):  # noqa
        self._token('""')

    @tatsumasu()
    def _ESCAPEAPOS_(self):  # noqa
        self._token("''")

    @tatsumasu()
    def _qname_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    self._NCNAME_FRAG_()
                    self._pattern(r':')
                    self._NCNAME_FRAG_()
            with self._option():
                self._NCNAME_FRAG_()
            self._error('no available options')

    @tatsumasu()
    def _ncname_(self):  # noqa
        self._NCNAME_FRAG_()

    @tatsumasu()
    def _NCNAME_FRAG_(self):  # noqa
        self._pattern(r'([A-Z]|_|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\U00010000-\U000EFFFF])([A-Z]|_|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\U00010000-\U000EFFFF]|-|\.|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])*')

    @tatsumasu()
    def _DIGITS_(self):  # noqa
        self._pattern(r'[0-9]+')


class XFSemantics(object):
    def module(self, ast):  # noqa
        return ast

    def separator(self, ast):  # noqa
        return ast

    def namespace_declaration(self, ast):  # noqa
        return ast

    def default(self, ast):  # noqa
        return ast

    def severity(self, ast):  # noqa
        return ast

    def message_severity(self, ast):  # noqa
        return ast

    def parameter(self, ast):  # noqa
        return ast

    def filter_declaration(self, ast):  # noqa
        return ast

    def filter(self, ast):  # noqa
        return ast

    def concept_filter(self, ast):  # noqa
        return ast

    def general_filter(self, ast):  # noqa
        return ast

    def period_filter(self, ast):  # noqa
        return ast

    def dimension_filter(self, ast):  # noqa
        return ast

    def dimension_axis(self, ast):  # noqa
        return ast

    def unit_filter(self, ast):  # noqa
        return ast

    def entity_filter(self, ast):  # noqa
        return ast

    def match_filter(self, ast):  # noqa
        return ast

    def relative_filter(self, ast):  # noqa
        return ast

    def tuple_filter(self, ast):  # noqa
        return ast

    def value_filter(self, ast):  # noqa
        return ast

    def boolean_filter(self, ast):  # noqa
        return ast

    def aspect_cover_filter(self, ast):  # noqa
        return ast

    def concept_relation_filter(self, ast):  # noqa
        return ast

    def relation_axis(self, ast):  # noqa
        return ast

    def declared_filter_reference(self, ast):  # noqa
        return ast

    def fact_variable(self, ast):  # noqa
        return ast

    def general_variable(self, ast):  # noqa
        return ast

    def function_declaration(self, ast):  # noqa
        return ast

    def assertion(self, ast):  # noqa
        return ast

    def label(self, ast):  # noqa
        return ast

    def message(self, ast):  # noqa
        return ast

    def referenced_parameter(self, ast):  # noqa
        return ast

    def precondition(self, ast):  # noqa
        return ast

    def value_expression(self, ast):  # noqa
        return ast

    def existence_expression(self, ast):  # noqa
        return ast

    def enclosed_expression(self, ast):  # noqa
        return ast

    def name(self, ast):  # noqa
        return ast

    def language(self, ast):  # noqa
        return ast

    def quoted_anyURI(self, ast):  # noqa
        return ast

    def quoted_url(self, ast):  # noqa
        return ast

    def localname(self, ast):  # noqa
        return ast

    def variable_ref(self, ast):  # noqa
        return ast

    def variable_name(self, ast):  # noqa
        return ast

    def non_negative_integer(self, ast):  # noqa
        return ast

    def date_time_constant(self, ast):  # noqa
        return ast

    def date_constant(self, ast):  # noqa
        return ast

    def quoted_string(self, ast):  # noqa
        return ast

    def regexp_pattern(self, ast):  # noqa
        return ast

    def xPath(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def exprSingle(self, ast):  # noqa
        return ast

    def forExpr(self, ast):  # noqa
        return ast

    def simpleForClause(self, ast):  # noqa
        return ast

    def quantifiedExpr(self, ast):  # noqa
        return ast

    def ifExpr(self, ast):  # noqa
        return ast

    def orExpr(self, ast):  # noqa
        return ast

    def andExpr(self, ast):  # noqa
        return ast

    def comparisonExpr(self, ast):  # noqa
        return ast

    def rangeExpr(self, ast):  # noqa
        return ast

    def additiveExpr(self, ast):  # noqa
        return ast

    def multiplicativeExpr(self, ast):  # noqa
        return ast

    def unionExpr(self, ast):  # noqa
        return ast

    def intersectExceptExpr(self, ast):  # noqa
        return ast

    def instanceofExpr(self, ast):  # noqa
        return ast

    def treatExpr(self, ast):  # noqa
        return ast

    def castableExpr(self, ast):  # noqa
        return ast

    def castExpr(self, ast):  # noqa
        return ast

    def unaryExpr(self, ast):  # noqa
        return ast

    def valueExpr(self, ast):  # noqa
        return ast

    def generalComp(self, ast):  # noqa
        return ast

    def valueComp(self, ast):  # noqa
        return ast

    def nodeComp(self, ast):  # noqa
        return ast

    def pathExpr(self, ast):  # noqa
        return ast

    def relativePathExpr(self, ast):  # noqa
        return ast

    def stepExpr(self, ast):  # noqa
        return ast

    def axisStep(self, ast):  # noqa
        return ast

    def forwardStep(self, ast):  # noqa
        return ast

    def forwardAxis(self, ast):  # noqa
        return ast

    def abbrevForwardStep(self, ast):  # noqa
        return ast

    def reverseStep(self, ast):  # noqa
        return ast

    def reverseAxis(self, ast):  # noqa
        return ast

    def abbrevReverseStep(self, ast):  # noqa
        return ast

    def nodeTest(self, ast):  # noqa
        return ast

    def nameTest(self, ast):  # noqa
        return ast

    def wildcard(self, ast):  # noqa
        return ast

    def filterExpr(self, ast):  # noqa
        return ast

    def predicateList(self, ast):  # noqa
        return ast

    def predicate(self, ast):  # noqa
        return ast

    def primaryExpr(self, ast):  # noqa
        return ast

    def literal(self, ast):  # noqa
        return ast

    def numericLiteral(self, ast):  # noqa
        return ast

    def varRef(self, ast):  # noqa
        return ast

    def varName(self, ast):  # noqa
        return ast

    def parenthesizedExpr(self, ast):  # noqa
        return ast

    def contextItemExpr(self, ast):  # noqa
        return ast

    def functionCall(self, ast):  # noqa
        return ast

    def singleType(self, ast):  # noqa
        return ast

    def sequenceType(self, ast):  # noqa
        return ast

    def occurrenceIndicator(self, ast):  # noqa
        return ast

    def itemType(self, ast):  # noqa
        return ast

    def atomicType(self, ast):  # noqa
        return ast

    def kindTest(self, ast):  # noqa
        return ast

    def anyKindTest(self, ast):  # noqa
        return ast

    def documentTest(self, ast):  # noqa
        return ast

    def textTest(self, ast):  # noqa
        return ast

    def commentTest(self, ast):  # noqa
        return ast

    def pITest(self, ast):  # noqa
        return ast

    def attributeTest(self, ast):  # noqa
        return ast

    def attribNameOrWildcard(self, ast):  # noqa
        return ast

    def schemaAttributeTest(self, ast):  # noqa
        return ast

    def attributeDeclaration(self, ast):  # noqa
        return ast

    def elementTest(self, ast):  # noqa
        return ast

    def elementNameOrWildcard(self, ast):  # noqa
        return ast

    def schemaElementTest(self, ast):  # noqa
        return ast

    def elementDeclaration(self, ast):  # noqa
        return ast

    def attributeName(self, ast):  # noqa
        return ast

    def elementName(self, ast):  # noqa
        return ast

    def typeName(self, ast):  # noqa
        return ast

    def integerLiteral(self, ast):  # noqa
        return ast

    def decimalLiteral(self, ast):  # noqa
        return ast

    def doubleLiteral(self, ast):  # noqa
        return ast

    def stringLiteral(self, ast):  # noqa
        return ast

    def ESCAPEQUOT(self, ast):  # noqa
        return ast

    def ESCAPEAPOS(self, ast):  # noqa
        return ast

    def qname(self, ast):  # noqa
        return ast

    def ncname(self, ast):  # noqa
        return ast

    def NCNAME_FRAG(self, ast):  # noqa
        return ast

    def DIGITS(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'module'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = XFParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, XFParser, name='XF')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
